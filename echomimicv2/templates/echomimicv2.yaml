{{- if and .Values.admin .Values.bfl.username (eq .Values.admin .Values.bfl.username) }}
{{- $echomimicv2DomainENV := split "," .Values.domain.echomimicv2 -}}
{{- $echomimicv2Domain := index $echomimicv2DomainENV "_0" -}}
{{- $localDomain := $echomimicv2Domain -}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: echomimicv2
  namespace: {{ .Release.Namespace }}
  labels:
    app: echomimicv2
  annotations:
    applications.app.bytetrade.io/gpu-inject: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: echomimicv2
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: echomimicv2
    spec:
      securityContext:
        runAsUser: 0
      initContainers:
        - name: init-resources
          image: beclab/echomimic_v2:echomimic-v0.10
          envFrom:
            - configMapRef:
                name: echomimicv2-config
          command:
            - sh
            - "-c"
            - |
              apt update && apt install rsync -y;
              mkdir -p /tmp/echomimicv2/assets;
              rsync -av --update /app/assets/ /tmp/echomimicv2/assets;
              echo "[$(date +%H:%M:%S)] Initialization completed!"
              exit 0
          volumeMounts:
            - name: assets
              mountPath: /tmp/echomimicv2/assets
            - name: data
              mountPath: /tmp/echomimicv2/models
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 0
      containers:
        - name: echomimicv2
          image: beclab/echomimic_v2:echomimic-v0.10
          command:
            - sh
            - "-c"
            - |
              {{- if and (hasKey .Values "models") (gt (len .Values.models) 0) }}
              {{- range $i, $model := .Values.models }}
              while [ ! -f /app/pretrained_weights/.success.{{ $model.name }} ]; do
                echo "Waiting for model file /app/pretrained_weights/.success.{{ $model.name }} ..."
                sleep 5
              done
              {{- end }}
              echo "All model files are ready."
              {{- end }}
              echo "Starting application..."
              python3 app.py
          ports:
            - containerPort: 7860
          env:
            - name: PGID
              value: "1000"
            - name: PUID
              value: "1000"
            - name: TZ
              value: Etc/UTC
          resources:
            requests:
              cpu: "500m"
              memory: "9Gi"
            limits:
              cpu: "7"
              memory: "16Gi"
          volumeMounts:
            - name: data
              mountPath: /app/pretrained_weights
            - name: outputs
              mountPath: /app/outputs
            - name: assets
              mountPath: /app/assets
          securityContext:
            runAsUser: 0
      volumes:
        - name: data
          hostPath:
            path: "{{ .Values.sharedlib }}/ai/echomimicv2"
            type: DirectoryOrCreate
        - name: outputs
          hostPath:
            path: "{{ .Values.userspace.userData }}/AI/output/echomimicv2"
            type: DirectoryOrCreate
        - name: assets
          hostPath:
            path: "{{ .Values.userspace.appData }}/echomimicv2/assets"
            type: DirectoryOrCreate
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-download-models
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Release.Name }}-downloadmodels
spec:
  ttlSecondsAfterFinished: 100
  backoffLimit: 3
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-downloadmodels
    spec:
      containers:
        - name: {{ .Release.Name }}-downloadmodels
          image: beclab/downloader-init:v0.1.0
          ports:
            - containerPort: 8090
          envFrom:
            - configMapRef:
                name: echomimicv2-config
          command: ["sh", "-c"]
          args:
            - |
              {{- range $i, $model := .Values.models }}
              echo "${CDN_HOST}/{{ $model.name }} {{ $model.output }} {{ $model.md5 }}" {{ if eq $i 0 }} > {{ else }} >> {{ end }} /app/tasks/tasks.txt && \
              {{- end }}
              /app/downloader-init /app/tasks/tasks.txt 8090 1 EchoMimicV2 https://{{ $echomimicv2Domain }}/config && \
              echo "Download finished..."
          resources:
            requests:
              cpu: "500m"
              memory: "500Mi"
            limits:
              cpu: "1"
              memory: "1Gi"
          volumeMounts:
            - name: downloader-tmp-vol
              mountPath: /app/downloader-tmp
            - name: downloads-vol
              mountPath: /app/downloads
            - name: tasks-txt-vol
              mountPath: /app/tasks
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 0
      volumes:
        - name: downloader-tmp-vol
          hostPath:
            path: "{{ .Values.sharedlib }}/ai/{{ .Release.Name }}/download/temp"
            type: DirectoryOrCreate
        - name: downloads-vol
          hostPath:
            path: "{{ .Values.sharedlib }}/ai/{{ .Release.Name }}"
            type: DirectoryOrCreate
        - name: tasks-txt-vol
          emptyDir: {}
      restartPolicy: OnFailure
---
apiVersion: v1
kind: Service
metadata:
  name: echomimicv2-svc
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    app: echomimicv2
  ports:
    - name: api
      port: 7860
      targetPort: 7860
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: download-svc
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    app: {{ .Release.Name }}-downloadmodels
  ports:
    - name: download-status
      port: 8090
      targetPort: 8090
  type: ClusterIP
{{- end }}
