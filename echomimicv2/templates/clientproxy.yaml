---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: {{ .Release.Namespace }}
data:
  nginx.conf: |
    upstream echomimicv2_backend {
      {{- if and .Values.admin .Values.bfl.username (eq .Values.admin .Values.bfl.username) }}
      server {{ .Release.Name }}-svc:7860 max_fails=1 fail_timeout=2s;
      server download-svc:8090 backup;
      {{- else }}
      server {{ .Release.Name }}-svc.{{ .Release.Name }}-{{ .Values.admin }}:7860 max_fails=1 fail_timeout=2s;
      server download-svc.{{ .Release.Name }}-{{ .Values.admin }}:8090 backup;
      {{- end }}
    }

    server {
      listen 8080;
      access_log /opt/bitnami/openresty/nginx/logs/access.log;
      error_log /opt/bitnami/openresty/nginx/logs/error.log;

      location /config {
        {{- if and .Values.admin .Values.bfl.username (eq .Values.admin .Values.bfl.username) }}
        proxy_pass http://{{ .Release.Name }}-svc:7860;
        {{- else }}
        proxy_pass http://{{ .Release.Name }}-svc.{{ .Release.Name }}-{{ .Values.admin }}:7860;
        {{- end }}
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Host $http_host;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        proxy_hide_header Access-Control-Allow-Origin;
        proxy_hide_header Access-Control-Allow-Methods;
        proxy_hide_header Access-Control-Allow-Headers;
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, HEAD";
        add_header Access-Control-Allow-Headers "deviceType,token,authorization,content-type,x-csrftoken";

        if ($request_method = 'OPTIONS') {
          add_header Access-Control-Allow-Origin *;
          add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, HEAD";
          add_header Access-Control-Allow-Headers "deviceType,token,authorization,content-type,x-csrftoken";
          return 204;
        }
      }

      location / {
        proxy_pass http://echomimicv2_backend;
        proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
        proxy_connect_timeout 600s;
        proxy_read_timeout 600s;
        proxy_send_timeout 600s;

        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Host $http_host;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";

        proxy_hide_header Access-Control-Allow-Origin;
        proxy_hide_header Access-Control-Allow-Methods;
        proxy_hide_header Access-Control-Allow-Headers;
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, HEAD";
        add_header Access-Control-Allow-Headers "deviceType,token,authorization,content-type,x-csrftoken";

        if ($request_method = 'OPTIONS') {
          add_header Access-Control-Allow-Origin *;
          add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS, HEAD";
          add_header Access-Control-Allow-Headers "deviceType,token,authorization,content-type,x-csrftoken";
          return 204;
        }
      }
    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  {{- if and .Values.admin .Values.bfl.username (eq .Values.admin .Values.bfl.username) }}
  name: echomimicv2proxy
  {{- else }}
  name: echomimicv2
  {{- end }}
  namespace: {{ .Release.Namespace }}
  labels:
    io.kompose.service: echomimicv2web
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: echomimicv2web
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.service: echomimicv2web
    spec:
      volumes:
        - name: nginx-config
          configMap:
            name: nginx-config
            items:
              - key: nginx.conf
                path: nginx.conf
      containers:
        - name: nginx
          image: docker.io/aboveos/bitnami-openresty:1.25.3-2
          ports:
            - containerPort: 8080
              protocol: TCP
          env:
            - name: OPENRESTY_CONF_FILE
              value: /etc/nginx/nginx.conf
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - |
                  http_code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8080)
                  [ $http_code -ge 200 ] && [ $http_code -lt 500 ]
            initialDelaySeconds: 2
            timeoutSeconds: 3
            periodSeconds: 3
            successThreshold: 1
            failureThreshold: 60
          resources:
            limits:
              cpu: 500m
              memory: 500Mi
            requests:
              cpu: 10m
              memory: 64Mi
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
            - name: nginx-config
              mountPath: /opt/bitnami/openresty/nginx/conf/server_blocks/nginx.conf
              subPath: nginx.conf

---
apiVersion: v1
kind: Service
metadata:
  name: echomimicv2-web-svc
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    io.kompose.service: echomimicv2web
  ports:
    - name: http
      protocol: TCP
      port: 8080
      targetPort: 8080
