apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: immich-machine-learning
  name: immich-machine-learning
  namespace: '{{ .Release.Namespace }}'
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: immich-machine-learning
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.network/chrome-default: "true"
        io.kompose.service: immich-machine-learning
    spec:
      containers:
      # - name: immich-redis
      #   image: aboveos/redis:latest
      #   resources:
      #     limits:
      #       cpu: "1"
      #       memory: 2Gi
      #     requests:
      #       cpu: 100m
      #       memory: 1Gi
      #   volumeMounts:
      #   - mountPath: /data
      #     name: redis
      - env:
        - name: PGID
          value: "1000"
        - name: PUID
          value: "1000"
        - name: TZ
          value: Etc/UTC
        - name: REDIS_HOSTNAME
          value: {{ .Values.redis.host }}
        - name: REDIS_PASSWORD
          value: {{ .Values.redis.password }}
        # - name: REDIS_HOSTNAME
        #   value: "127.0.0.1:6379"
        - name: DB_HOSTNAME
          value: {{ .Values.postgres.host }}
        - name: DB_USERNAME
          value: {{ .Values.postgres.username }}
        - name: DB_PASSWORD
          value: {{ .Values.postgres.password }}
        - name: DB_DATABASE_NAME
          value: {{ .Values.postgres.databases.immich }}
        - name: IMMICH_PORT
          value: "3003"
        image: docker.io/aboveos/immich-app-immich-machine-learning:v1.108.0
        imagePullPolicy: IfNotPresent
        name: immich-machine-learning
        ports:
        - containerPort: 3003
          name: http
          protocol: TCP
        resources:
          limits:
            cpu: 2000m
            memory: 2000Mi
          requests:
            cpu: 50m
            memory: 100Mi
        volumeMounts:
        - mountPath: /cache
          name: cache
      restartPolicy: Always
      volumes:
      - hostPath:
          path: '{{ .Values.userspace.appData }}/immich/machine-learning'
          type: DirectoryOrCreate
        name: cache
status: {}

---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: immich-machine-learning
  name: immich-machine-learning
  namespace: '{{ .Release.Namespace }}'
spec:
  ports:
  - name: http
    port: 3003
    protocol: TCP
    targetPort: 3003
  selector:
    io.kompose.service: immich-machine-learning
status:
  loadBalancer: {}
