apiVersion: v1
data:
  config.json: |
    {
      oauth: {
        autoLaunch: false,
        autoRegister: true,
        clientId: '{{ .Values.oidc.client.id }}',
        clientSecret: '{{ .Values.oidc.client.secret }}',
        enabled: true,
        issuerUrl: '{{ .Values.oidc.issuer }}',
        scope: 'openid email profile',
      }
    }
kind: ConfigMap
metadata:
  name: config
  namespace: {{ .Release.Namespace }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: immich
  name: immich
  namespace: '{{ .Release.Namespace }}'
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: immich
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.network/chrome-default: "true"
        io.kompose.service: immich
    spec:
      containers:
      - name: immich-redis
        image: aboveos/redis:latest
        resources:
          limits:
            cpu: "1"
            memory: 2Gi
          requests:
            cpu: 100m
            memory: 1Gi
        volumeMounts:
        - mountPath: /data
          name: redis
      - args:
        - sed -i "s/RedisConnection.minimumVersion = '5.0.0';/RedisConnection.minimumVersion = '4.0.0';/" ./node_modules/bullmq/dist/cjs/classes/redis-connection.js; sed -i 's/0.2.x/0.3.x/' ./dist/constants.js; exec ./start.sh
        command:
        - /bin/sh
        - -c
        env:
        - name: PGID
          value: "1000"
        - name: PUID
          value: "1000"
        - name: TZ
          value: Etc/UTC
        # - name: REDIS_HOSTNAME
        #   value: {{ .Values.redis.host }}
        # - name: REDIS_PASSWORD
        #   value: {{ .Values.redis.password }}
        - name: REDIS_HOSTNAME
          value: "localhost"
        - name: DB_HOSTNAME
          value: {{ .Values.postgres.host }}
        - name: DB_USERNAME
          value: {{ .Values.postgres.username }}
        - name: DB_PASSWORD
          value: {{ .Values.postgres.password }}
        - name: DB_DATABASE_NAME
          value: {{ .Values.postgres.databases.immich }}
        - name: IMMICH_PORT
          value: "3001"
        - name: OAUTH_ENABLED
          value: "true"
        - name: OAUTH_CLIENT_ID
          value: "{{ .Values.oidc.client.id }}"
        - name: OAUTH_CLIENT_SECRET
          value: "{{ .Values.oidc.client.secret }}"
        - name: OAUTH_ISSUER_URL
          value: "{{ .Values.oidc.issuer }}"
        - name: OAUTH_SCOPE
          value: "openid,profile,email"
        - name: IMMICH_CONFIG_FILE
          value: "/config.json"
        image: docker.io/aboveos/immich-app-immich-server:v1.108.0
        imagePullPolicy: IfNotPresent
        name: immich
        ports:
        - containerPort: 3001
          name: http
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /api/server-info/ping
            port: http
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/server-info/ping
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 3
        resources:
          limits:
            cpu: 2000m
            memory: 2000Mi
          requests:
            cpu: 200m
            memory: 300Mi
        volumeMounts:
        - name: appcache
          mountPath: /usr/src/app/upload          
        - name: home  
          mountPath: /home
        - name: config
          mountPath: /config.json
          subPath: config.json
      restartPolicy: Always
      volumes:
      - name: appcache
        hostPath:
          path: '{{ .Values.userspace.appData }}/immich/data/upload'
          type: DirectoryOrCreate  
      - hostPath:
          path: '{{ .Values.userspace.appData }}/immich/redis'
          type: DirectoryOrCreate
        name: redis      
      - name: home
        hostPath:
          path: '{{ .Values.userspace.userData }}'
          type: DirectoryOrCreate  
      - name: config
        configMap:
          name: config
          defaultMode: 438
          items:
          - key: config.json
            path: config.json
status: {}

---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: immich
  name: immich
  namespace: '{{ .Release.Namespace }}'
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 3001
  selector:
    io.kompose.service: immich
status:
  loadBalancer: {}
