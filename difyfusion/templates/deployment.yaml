{{- $namespace := printf "%s%s" "user-system-" .Values.bfl.username -}}
{{- $difyfusion_secret := (lookup "v1" "Secret" $namespace "difyfusion-secrets") -}}
{{- $pg_password := "" -}}
{{ if $difyfusion_secret -}}
{{ $pg_password = (index $difyfusion_secret "data" "pg_password") }}
{{ else -}}
{{ $pg_password = randAlphaNum 16 | b64enc }}
{{- end -}}

{{- $redis_password := "" -}}
{{ if $difyfusion_secret -}}
{{ $redis_password = (index $difyfusion_secret "data" "redis_password") }}
{{ else -}}
{{ $redis_password = randAlphaNum 16 | b64enc }}
{{- end -}}

{{ $client_id := randAlphaNum 8 }}


---
apiVersion: v1
kind: Secret
metadata:
  name: difyfusion-secrets
  namespace: user-system-{{ .Values.bfl.username }}
type: Opaque
data:
  pg_password: {{ $pg_password }}
  redis_password: {{ $redis_password }}

---
apiVersion: apr.bytetrade.io/v1alpha1
kind: MiddlewareRequest
metadata:
  name: difyfusion-pg
  namespace: user-system-{{ .Values.bfl.username }}
spec:
  app: difyfusion
  appNamespace: user-space-{{ .Values.bfl.username }}
  middleware: postgres
  postgreSQL:
    user: difyfusion_{{ .Values.bfl.username }}
    password:
      valueFrom:
        secretKeyRef:
          key: pg_password
          name: difyfusion-secrets
    databases:
      - name: difyfusion

---
apiVersion: apr.bytetrade.io/v1alpha1
kind: MiddlewareRequest
metadata:
  name: difyfusion-redis
  namespace: user-system-{{ .Values.bfl.username }}
spec:
  app: difyfusion
  appNamespace: user-space-{{ .Values.bfl.username }}
  middleware: redis
  redis:
    password:
      valueFrom:
        secretKeyRef:
          key: redis_password
          name: difyfusion-secrets
    namespace: difyfusion

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: difyfusion-nginx-config
  namespace: user-space-{{ .Values.bfl.username }}
  annotations:
    kubesphere.io/creator: bytetrade.io
data:
  default.conf: |-
    server {
      listen 80;
      server_name _;

      location /console/api/setup {
        proxy_pass http://127.0.0.1:5001;
        include proxy.conf;
      }
    
      location /chat {
        proxy_pass http://difyfusion.user-space-{{ .Values.bfl.username }}:3000;
        include proxy.conf;
      }
    
      location /completion {
        proxy_pass http://difyfusion.user-space-{{ .Values.bfl.username }}:3000;
        include proxy.conf;
      }
    
      location /workflow {
        proxy_pass http://difyfusion.user-space-{{ .Values.bfl.username }}:3000;
        include proxy.conf;
      }

      location /console/api/login {
        # Check if user has logged in~
        # access_by_lua_file login.lua;

        proxy_pass http://difyfusion.user-space-{{ .Values.bfl.username }}:5001;
        # proxy_pass http://127.0.0.1:5001;
        include proxy.conf;
      }
    
      location /console/api/system-features {
        # Check if user has logged in~
        # access_by_lua_file login.lua;

        proxy_pass http://difyfusion.user-space-{{ .Values.bfl.username }}:5001;
        # proxy_pass http://127.0.0.1:5001;
        include proxy.conf;
      }

      location /console/api {
        # Check if user has logged in~
        access_by_lua_file login.lua;

        # Proxy pass the request to backend~
        proxy_pass http://difyfusion.user-space-{{ .Values.bfl.username }}:5001;
        # proxy_pass http://127.0.0.1:5001;
        include proxy.conf;
      }

      location /api {
        # Check if user has logged in~
        # access_by_lua_file login.lua;

        # Proxy pass the request to backend~
        proxy_pass http://difyfusion.user-space-{{ .Values.bfl.username }}:5001;
        # proxy_pass http://127.0.0.1:5001;
        include proxy.conf;
      }

      location /v1 {
        # Check if user has logged in~
        access_by_lua_file login.lua;

        # Proxy pass the request to backend~
        proxy_pass http://difyfusion.user-space-{{ .Values.bfl.username }}:5001;
        # proxy_pass http://127.0.0.1:5001;
        include proxy.conf;
      }

      location /files {
        # Check if user has logged in~
        access_by_lua_file login.lua;

        # Proxy pass the request to backend~
        proxy_pass http://difyfusion.user-space-{{ .Values.bfl.username }}:5001;
        # proxy_pass http://127.0.0.1:5001;
        include proxy.conf;
      }

      location /signin {
        # Check if user has logged in~
        access_by_lua_file login.lua;

        # Proxy pass the request to backend~
        # proxy_pass http://127.0.0.1:3000;
        proxy_pass http://difyfusion.user-space-{{ .Values.bfl.username }}:3000/apps;
        include proxy.conf;
      }

      location / {
        # Check if user has logged in~
        access_by_lua_file login.lua;

        # Proxy pass the request to backend~
        # proxy_pass http://127.0.0.1:3000;
        proxy_pass http://difyfusion.user-space-{{ .Values.bfl.username }}:3000;
        include proxy.conf;
      }
    }
  login.lua: |-
    local cjson = require "cjson.safe"

    local function processAuthorization()
        local difyHost = "difyfusion.user-space-{{ .Values.bfl.username }}"
        ngx.log(ngx.STDERR, "HOST: " .. ngx.var.host)
        local isInner = ngx.var.host == difyHost

        -- Check if current URL is "/signin"
        ngx.log(ngx.STDERR, "URI: " .. ngx.var.uri)
        local isSignIn = ngx.var.uri == "/signin"
        local isModel = ngx.var.uri == "/console/api/workspaces/current/model-providers/openai_api_compatible/models"

        if isInner and isSignIn then
          return
        end

        local headers = ngx.req.get_headers()

        if not isSignIn and not isModel then
          local cookie = ngx.var.http_cookie
          local redirectedURL = ngx.var.request_uri

          -- Get next URL
          ngx.log(ngx.STDERR, "Next URL: " .. redirectedURL)

          local token = ""
          local _ = ""
          if cookie then
              _, _, token = string.find(cookie, "Authorization=Bearer ([^;]+)")
          end

          if token then
            -- Check if "Authorization" exists and is not empty string
            local authorizationHeader = headers["Authorization"]
            if authorizationHeader then
              ngx.log(ngx.STDERR, "authorizatioonHeader=" .. authorizationHeader)
            else
              ngx.log(ngx.STDERR, "authorizatioonHeader=nil")
            end

            ngx.log(ngx.STDERR, "token=" .. token)
            if authorizationHeader and authorizationHeader:match("^Bearer%s+.+") then
                if isInner then
                    ngx.log(ngx.STDERR, "Inner Request! Authorization header with non-empty Bearer token found. Skipping further processing.")
                    return
                end
                if authorizationHeader == "Bearer" .. token then
                    ngx.log(ngx.STDERR, "Authorization header with non-empty and newest Bearer token found. Skipping further processing.")
                    return
                end
            else
                ngx.req.set_header("Authorization", "Bearer " .. token)
                ngx.log(ngx.STDERR, "Authorization token found in cookie. Token: " .. token)
                return
            end
          end
        end

        local username = headers["x-bfl-user"]
        local orig_ct = headers["Content-Type"]
        local user_email = 'admin@bytetrade.io'
        if username ~= nil and username ~= '' then
          user_email = username .. '@dify.ai'
        end

        ngx.req.set_header("Content-Type", "application/json")
        local res = ngx.location.capture("/console/api/login", {
            method = ngx.HTTP_POST,
            body = '{"email":"' .. user_email .. '","password":"abcd123456","remember_me":true}'
        })
        ngx.req.set_header("Content-Type", orig_ct)

        if res.status == ngx.HTTP_OK or res.status == ngx.HTTP_MOVED_TEMPORARILY then
            local new_cookie = res.header["Set-Cookie"]
            local data = res.body
            local jsonData = cjson.decode(data)
            local token_data = jsonData

            if token_data and token_data.data and token_data.data.access_token then
                local token = token_data.data.access_token
                ngx.req.set_header("Authorization", "Bearer " .. token)
                ngx.header["Set-Cookie"] = "Authorization=Bearer " .. token .. "; Path=/"
                ngx.log(ngx.STDERR, "Authorization token obtained from login API. token: " .. token)
            else
                ngx.log(ngx.STDERR, "Failed to parse JSON data")
            end
        else
            ngx.log(ngx.STDERR, "Failed to obtain authorization from login API: " .. tostring(res.status))
            ngx.header["X-Redirected"] = "/"
            return
        end
    end

    processAuthorization()
  nginx.conf: |-
    user  nginx;
    worker_processes  auto;

    error_log  /var/log/nginx/error.log notice;
    pid        /var/run/nginx.pid;


    events {
        worker_connections  1024;
    }


    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;

        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

        access_log  /var/log/nginx/access.log  main;

        sendfile        on;
        #tcp_nopush     on;

        keepalive_timeout  65;

        #gzip  on;
        client_max_body_size 200M;

        include /etc/nginx/conf.d/*.conf;
    }
  proxy.conf: |-
    proxy_set_header Host $host;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    # proxy_set_header X-Forwarded-Proto $scheme;
    proxy_http_version 1.1;
    proxy_set_header Connection "";
    proxy_buffering off;
    proxy_read_timeout 3600s;
    proxy_send_timeout 3600s;
  squid.conf.template: |-
    acl localnet src 0.0.0.1-0.255.255.255	# RFC 1122 "this" network (LAN)
    acl localnet src 10.0.0.0/8		# RFC 1918 local private network (LAN)
    acl localnet src 100.64.0.0/10		# RFC 6598 shared address space (CGN)
    acl localnet src 169.254.0.0/16 	# RFC 3927 link-local (directly plugged) machines
    acl localnet src 172.16.0.0/12		# RFC 1918 local private network (LAN)
    acl localnet src 192.168.0.0/16		# RFC 1918 local private network (LAN)
    acl localnet src fc00::/7       	# RFC 4193 local private network range
    acl localnet src fe80::/10      	# RFC 4291 link-local (directly plugged) machines
    acl SSL_ports port 443
    acl Safe_ports port 80		# http
    acl Safe_ports port 21		# ftp
    acl Safe_ports port 443		# https
    acl Safe_ports port 70		# gopher
    acl Safe_ports port 210		# wais
    acl Safe_ports port 1025-65535	# unregistered ports
    acl Safe_ports port 280		# http-mgmt
    acl Safe_ports port 488		# gss-http
    acl Safe_ports port 591		# filemaker
    acl Safe_ports port 777		# multiling http
    acl CONNECT method CONNECT
    http_access deny !Safe_ports
    http_access deny CONNECT !SSL_ports
    http_access allow localhost manager
    http_access deny manager
    http_access allow localhost
    include /etc/squid/conf.d/*.conf
    http_access deny all
    
    ################################## Proxy Server ################################
    http_port ${HTTP_PORT}
    coredump_dir ${COREDUMP_DIR}
    refresh_pattern ^ftp:		1440	20%	10080
    refresh_pattern ^gopher:	1440	0%	1440
    refresh_pattern -i (/cgi-bin/|\?) 0	0%	0
    refresh_pattern \/(Packages|Sources)(|\.bz2|\.gz|\.xz)$ 0 0% 0 refresh-ims
    refresh_pattern \/Release(|\.gpg)$ 0 0% 0 refresh-ims
    refresh_pattern \/InRelease$ 0 0% 0 refresh-ims
    refresh_pattern \/(Translation-.*)(|\.bz2|\.gz|\.xz)$ 0 0% 0 refresh-ims
    refresh_pattern .		0	20%	4320


    # cache_dir ufs /var/spool/squid 100 16 256
    # upstream proxy, set to your own upstream proxy IP to avoid SSRF attacks
    # cache_peer 172.1.1.1 parent 3128 0 no-query no-digest no-netdb-exchange default
    
    ################################## Reverse Proxy To Sandbox ################################
    http_port ${REVERSE_PROXY_PORT} accel vhost
    cache_peer ${SANDBOX_HOST} parent ${SANDBOX_PORT} 0 no-query originserver
    acl src_all src all
    http_access allow src_all

  docker-entrypoint.sh: |-
    #!/bin/bash
  
    # Modified based on Squid OCI image entrypoint
  
    # This entrypoint aims to forward the squid logs to stdout to assist users of
    # common container related tooling (e.g., kubernetes, docker-compose, etc) to
    # access the service logs.
  
    # Moreover, it invokes the squid binary, leaving all the desired parameters to
    # be provided by the "command" passed to the spawned container. If no command
    # is provided by the user, the default behavior (as per the CMD statement in
    # the Dockerfile) will be to use Ubuntu's default configuration [1] and run
    # squid with the "-NYC" options to mimic the behavior of the Ubuntu provided
    # systemd unit.
  
    # [1] The default configuration is changed in the Dockerfile to allow local
    # network connections. See the Dockerfile for further information.
  
    echo "[ENTRYPOINT] re-create snakeoil self-signed certificate removed in the build process"
    if [ ! -f /etc/ssl/private/ssl-cert-snakeoil.key ]; then
    /usr/sbin/make-ssl-cert generate-default-snakeoil --force-overwrite > /dev/null 2>&1
    fi
  
    tail -F /var/log/squid/access.log 2>/dev/null &
    tail -F /var/log/squid/error.log 2>/dev/null &
    tail -F /var/log/squid/store.log 2>/dev/null &
    tail -F /var/log/squid/cache.log 2>/dev/null &
  
    # Replace environment variables in the template and output to the squid.conf
    echo "[ENTRYPOINT] replacing environment variables in the template"
    awk '{
      while(match($0, /\${[A-Za-z_][A-Za-z_0-9]*}/)) {
      var = substr($0, RSTART+2, RLENGTH-3)
      val = ENVIRON[var]
      $0 = substr($0, 1, RSTART-1) val substr($0, RSTART+RLENGTH)
    }
      print
    }' /etc/squid/squid.conf.template > /etc/squid/squid.conf
  
    /usr/sbin/squid -Nz
    echo "[ENTRYPOINT] starting squid"
    /usr/sbin/squid -f /etc/squid/squid.conf -NYC 1

---
kind: Service
apiVersion: v1
metadata:
  name: difyfusion
  namespace: user-space-{{ .Values.bfl.username }}
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 3020
      targetPort: 3020
    - name: nginx-port
      protocol: TCP
      port: 80
      targetPort: 80
    - name: api-port
      protocol: TCP
      port: 5001
      targetPort: 5001
    - name: web-port
      protocol: TCP
      port: 3000
      targetPort: 3000
    - name: ui-port
      protocol: TCP
      port: 3900
      targetPort: 3900
    - name: nitro-port
      protocol: TCP
      port: 3928
      targetPort: 3928
  selector:
    app: difyfusion

---
# create statefulset
apiVersion: apps/v1
kind: Deployment
metadata:
  name: difyfusion
  namespace: user-space-{{ .Values.bfl.username }}
  labels:
    app: difyfusion
    applications.app.bytetrade.io/author: bytetrade.io
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: difyfusion
      name: difyfusion
  template:
    metadata:
      labels:
        app: difyfusion
        name: difyfusion
    spec:
      initContainers:
        - name: init-container
          image: 'docker.io/aboveos/postgres:16.0-alpine3.18'
          command:
            - sh
            - '-c'
            - >-
              echo -e "Checking for the availability of PostgreSQL Server deployment"; until psql -h $PGHOST -p $PGPORT -U $PGUSER -d $PGDB1 -c "SELECT 1"; do sleep 1; printf "-"; done; sleep 5; echo -e " >> PostgreSQL DB Server has started";
          env:
            - name: PGHOST
              value: citus-master-svc.user-system-{{ .Values.bfl.username }}
            - name: PGPORT
              value: "5432"
            - name: PGUSER
              value: difyfusion_{{ .Values.bfl.username }}
            - name: PGPASSWORD
              value: {{ $pg_password | b64dec }}
            - name: PGDB1
              value: user_space_{{ .Values.bfl.username }}_difyfusion

      securityContext:
        runAsUser: 0
      # terminationGracePeriodSeconds: 0
      containers:
        - name: api
          image: beclab/dify-api:v0.0.7
          imagePullPolicy: IfNotPresent
          ports:
            - name: api-port
              containerPort: 5001
              protocol: TCP
          env:
            # Startup mode, 'api' starts the API server.
            - name: MODE
              value: api
            # The log level for the application. Supported values are `DEBUG`, `INFO`, `WARNING`, `ERROR`, `CRITICAL`
            - name: LOG_LEVEL
              value: INFO
            # A secret key that is used for securely signing the session cookie and encrypting sensitive information on the database. You can generate a strong key using `openssl rand -base64 42`.
            - name: SECRET_KEY
              value: sk-9f73s3ljTXVcMT3Blb3ljTqtsKiGHXVcMT3BlbkFJLK7U
            # The base URL of console application web frontend, refers to the Console base URL of WEB service if console domain is
            # different from api or web app domain.
            # example: http://cloud.dify.ai
            - name: CONSOLE_WEB_URL
              value: ''
            # Password for admin user initialization.
            # If left unset, admin user will not be prompted for a password when creating the initial admin account.
            - name: INIT_PASSWORD
              value: ''
            # The base URL of console application api server, refers to the Console base URL of WEB service if console domain is
            # different from api or web app domain.
            # example: http://cloud.dify.ai
            - name: CONSOLE_API_URL
              value: ''
            # The URL for Service API endpoints，refers to the base URL of the current API service if api domain is
            # different from console domain.
            # example: http://api.dify.ai
            - name: SERVICE_API_URL
              value: ''
            # The URL for Web APP api server, refers to the Web App base URL of WEB service if web app domain is different from
            # console or api domain.
            # example: http://udify.app
            #          - name: APP_API_URL
            #            value: ''
            # The URL for Web APP frontend, refers to the Web App base URL of WEB service if web app domain is different from
            # console or api domain.
            # example: http://udify.app
            - name: APP_WEB_URL
              value: ''
            # File preview or download Url prefix.
            # used to display File preview or download Url to the front-end or as Multi-model inputs;
            # Url is signed and has expiration time.
            - name: FILES_URL
              value: ''
            - name: ACCESS_TOKEN_EXPIRE_MINUTES
              value: '53000000'
            # When enabled, migrations will be executed prior to application startup and the application will start after the migrations have completed.
            - name: MIGRATION_ENABLED
              value: 'true'
            - name: NUMEXPR_MAX_THREADS
              value: '4'
            # The configurations of postgres database connection.
            # It is consistent with the configuration in the 'db' service below.
            - name: DB_USERNAME
              value: difyfusion_{{ .Values.bfl.username }}
            - name: DB_PASSWORD
              value: {{ $pg_password | b64dec }}
            - name: DB_HOST
              value: citus-master-svc.user-system-{{ .Values.bfl.username }}
            - name: DB_PORT
              value: '5432'
            - name: DB_DATABASE
              value: user_space_{{ .Values.bfl.username }}_difyfusion
            - name: DB_OPTIONS
              value: "-c connect_timeout=10000"
            - name: SQLALCHEMY_POOL_SIZE
              value: '20'
            - name: SQLALCHEMY_MAX_OVERFLOW
              value: '5'
            - name: SQLALCHEMY_POOL_RECYCLE
              value: '14400'
            - name: SQLALCHEMY_ECHO
              value: 'false'
            - name: SQLALCHEMY_POOL_PRE_PING
              value: 'true'
            - name: POSTGRES_MAX_CONNECTIONS
              value: '20'
            - name: POSTGRES_SHARED_BUFFERS
              value: '128MB'
            - name: POSTGRES_WORK_MEM
              value: '4MB'
            - name: POSTGRES_MAINTENANCE_WORK_MEM
              value: '64MB'
            - name: POSTGRES_EFFECTIVE_CACHE_SIZE
              value: '4096MB'
            # The configurations of redis connection.
            # It is consistent with the configuration in the 'redis' service below.
            - name: REDIS_HOST
              value: localhost
            - name: REDIS_PORT
              value: '6379'
            - name: REDIS_USERNAME
              value: ''
            - name: REDIS_PASSWORD
              value: {{ $redis_password | b64dec }}
            - name: REDIS_USE_SSL
              value: 'false'
            # use redis db 0 for redis cache
            - name: REDIS_DB
              value: '0'
            # The configurations of celery broker.
            # Use redis as the broker, and redis db 1 for celery broker.
            - name: CELERY_BROKER_URL
              value: redis://:{{ $redis_password | b64dec }}@localhost:6379/0
            # Specifies the allowed origins for cross-origin requests to the Web API, e.g. https://dify.app or * for all origins.
            - name: WEB_API_CORS_ALLOW_ORIGINS
              value: '*'
            # Specifies the allowed origins for cross-origin requests to the console API, e.g. https://cloud.dify.ai or * for all origins.
            - name: CONSOLE_CORS_ALLOW_ORIGINS
              value: '*'
            # The type of storage to use for storing user files. Supported values are `local` and `s3`, Default: `local`
            - name: STORAGE_TYPE
              value: local
            # The path to the local storage directory, the directory relative the root path of API service codes or absolute path. Default: `storage` or `/home/john/storage`.
            # only available when STORAGE_TYPE is `local`.
            - name: STORAGE_LOCAL_PATH
              value: storage
            # The S3 storage configurations, only available when STORAGE_TYPE is `s3`.
            - name: S3_ENDPOINT
              value: 'https://xxx.r2.cloudflarestorage.com'
            - name: S3_BUCKET_NAME
              value: 'difyai'
            - name: S3_ACCESS_KEY
              value: 'ak-difyai'
            - name: S3_SECRET_KEY
              value: 'sk-difyai'
            - name: S3_REGION
              value: 'us-east-1'
            # The Azure Blob storage configurations, only available when STORAGE_TYPE is `azure-blob`.
            - name: AZURE_BLOB_ACCOUNT_NAME
              value: 'difyai'
            - name: AZURE_BLOB_ACCOUNT_KEY
              value: 'difyai'
            - name: AZURE_BLOB_CONTAINER_NAME
              value: 'difyai-container'
            - name: AZURE_BLOB_ACCOUNT_URL
              value: 'https://<your_account_name>.blob.core.windows.net'
            # The type of vector store to use. Supported values are `weaviate`, `qdrant`.
            - name: VECTOR_STORE
              value: weaviate
            # The Weaviate endpoint URL. Only available when VECTOR_STORE is `weaviate`.
            - name: WEAVIATE_ENDPOINT
              value: http://localhost:8080
            # The Weaviate API key.
            - name: WEAVIATE_API_KEY
              value: WVF5YThaHlkYwhGUSmCRgsX3tD5ngdN8pkih
            # The Qdrant endpoint URL. Only available when VECTOR_STORE is `qdrant`.
            - name: QDRANT_URL
              value: 'https://your-qdrant-cluster-url.qdrant.tech/'
            # The Qdrant API key.
            - name: QDRANT_API_KEY
              value: 'ak-difyai'
            # The Qdrant clinet timeout setting.
            - name: QDRANT_CLIENT_TIMEOUT
              value: '20'
            # Milvus configuration Only available when VECTOR_STORE is `milvus`.
            # The milvus host.
            - name: MILVUS_HOST
              value: 127.0.0.1
            # The milvus host.
            - name: MILVUS_PORT
              value: '19530'
            # The milvus username.
            - name: MILVUS_USER
              value: root
            # The milvus password.
            - name: MILVUS_PASSWORD
              value: Milvus
            # The milvus tls switch.
            - name: MILVUS_SECURE
              value: 'false'
            # Mail configuration, support: resend
            - name: MAIL_TYPE
              value: ''
            # default send from email address, if not specified
            - name: MAIL_DEFAULT_SEND_FROM
              value: 'YOUR EMAIL FROM (eg: no-reply <no-reply@dify.ai>)'
            - name: SMTP_SERVER
              value: ''
            - name: SMTP_PORT
              value: '587'
            - name: SMTP_USERNAME
              value: ''
            - name: SMTP_PASSWORD
              value: ''
            - name: SMTP_USE_TLS
              value: 'true'
            # the api-key for resend (https://resend.com)
            - name: RESEND_API_KEY
              value: ''
            - name: RESEND_API_URL
              value: https://api.resend.com
            - name: UPLOAD_FILE_SIZE_LIMIT
              value: '30'
            - name: UPLOAD_FILE_BATCH_LIMIT
              value: '10'
            - name: UPLOAD_IMAGE_FILE_SIZE_LIMIT
              value: '20'
            - name: UPLOAD_VIDEO_FILE_SIZE_LIMIT
              value: '200'
            - name: UPLOAD_AUDIO_FILE_SIZE_LIMIT
              value: '100'
            # The DSN for Sentry error reporting. If not set, Sentry error reporting will be disabled.
            - name: SENTRY_DSN
              value: ''
            # The sample rate for Sentry events. Default: `1.0`
            - name: SENTRY_TRACES_SAMPLE_RATE
              value: '1.0'
            # The sample rate for Sentry profiles. Default: `1.0`
            - name: SENTRY_PROFILES_SAMPLE_RATE
              value: '1.0'
            # The sandbox service endpoint.
            - name: CODE_EXECUTION_ENDPOINT
              value: "http://127.0.0.1:8194"
            - name: CODE_EXECUTION_API_KEY
              value: dify-sandbox
            - name: CODE_MAX_NUMBER
              value: '9223372036854775807'
            - name: CODE_MIN_NUMBER
              value: '-9223372036854775808'
            - name: CODE_MAX_STRING_LENGTH
              value: '80000'
            - name: TEMPLATE_TRANSFORM_MAX_LENGTH
              value: '80000'
            - name: CODE_MAX_STRING_ARRAY_LENGTH
              value: '30'
            - name: CODE_MAX_OBJECT_ARRAY_LENGTH
              value: '30'
            - name: CODE_MAX_NUMBER_ARRAY_LENGTH
              value: '1000'
            - name: HTTP_PROXY
              value: http://127.0.0.1:3128
            - name: HTTPS_PROXY
              value: http://127.0.0.1:3128
            - name: DIFY_PORT
              value: '5001'
          resources:
            limits:
              cpu: 1000m
              memory: 2Gi
            requests:
              cpu: 50m
              memory: 1Gi
          volumeMounts:
            # Mount the storage directory to the container, for storing user files.
            - name: api-vol
              mountPath: /app/api/storage

        - name: worker
          image: beclab/dify-api:v0.0.7
          imagePullPolicy: IfNotPresent
          env:
            # Startup mode, 'worker' starts the Celery worker for processing the queue.
            - name: MODE
              value: worker


            # --- All the configurations below are the same as those in the 'api' service. ---

            # The log level for the application. Supported values are `DEBUG`, `INFO`, `WARNING`, `ERROR`, `CRITICAL`
            - name: LOG_LEVEL
              value: INFO
            # A secret key that is used for securely signing the session cookie and encrypting sensitive information on the database. You can generate a strong key using `openssl rand -base64 42`.
            # same as the API service
            - name: SECRET_KEY
              value: sk-9f73s3ljTXVcMT3Blb3ljTqtsKiGHXVcMT3BlbkFJLK7U
            - name: NUMEXPR_MAX_THREADS
              value: '4'
            # The configurations of postgres database connection.
            # It is consistent with the configuration in the 'db' service below.
            - name: DB_USERNAME
              value: difyfusion_{{ .Values.bfl.username }}
            - name: DB_PASSWORD
              value: {{ $pg_password | b64dec }}
            - name: DB_HOST
              value: citus-master-svc.user-system-{{ .Values.bfl.username }}
            - name: DB_PORT
              value: '5432'
            - name: DB_DATABASE
              value: user_space_{{ .Values.bfl.username }}_difyfusion
            - name: DB_OPTIONS
              value: "-c connect_timeout=10000"
            - name: SQLALCHEMY_POOL_SIZE
              value: '4'
            - name: SQLALCHEMY_MAX_OVERFLOW
              value: '1'
            - name: SQLALCHEMY_POOL_RECYCLE
              value: '14400'
            - name: SQLALCHEMY_ECHO
              value: 'false'
            - name: SQLALCHEMY_POOL_PRE_PING
              value: 'true'
            - name: POSTGRES_MAX_CONNECTIONS
              value: '4'
            - name: POSTGRES_SHARED_BUFFERS
              value: '128MB'
            - name: POSTGRES_WORK_MEM
              value: '4MB'
            - name: POSTGRES_MAINTENANCE_WORK_MEM
              value: '64MB'
            - name: POSTGRES_EFFECTIVE_CACHE_SIZE
              value: '4096MB'
            # The configurations of redis cache connection.
            - name: REDIS_HOST
              value: localhost
            - name: REDIS_PORT
              value: '6379'
            - name: REDIS_USERNAME
              value: ''
            - name: REDIS_PASSWORD
              value: {{ $redis_password | b64dec }}
            - name: REDIS_DB
              value: '0'
            - name: REDIS_USE_SSL
              value: 'false'
            # The configurations of celery broker.
            - name: CELERY_BROKER_URL
              value: redis://:{{ $redis_password | b64dec }}@localhost:6379/0
            # The type of storage to use for storing user files. Supported values are `local` and `s3`, Default: `local`
            - name: STORAGE_TYPE
              value: local
            - name: STORAGE_LOCAL_PATH
              value: storage
            # The S3 storage configurations, only available when STORAGE_TYPE is `s3`.
            - name: S3_ENDPOINT
              value: 'https://xxx.r2.cloudflarestorage.com'
            - name: S3_BUCKET_NAME
              value: 'difyai'
            - name: S3_ACCESS_KEY
              value: 'ak-difyai'
            - name: S3_SECRET_KEY
              value: 'sk-difyai'
            - name: S3_REGION
              value: 'us-east-1'
            # The Azure Blob storage configurations, only available when STORAGE_TYPE is `azure-blob`.
            - name: AZURE_BLOB_ACCOUNT_NAME
              value: 'difyai'
            - name: AZURE_BLOB_ACCOUNT_KEY
              value: 'difyai'
            - name: AZURE_BLOB_CONTAINER_NAME
              value: 'difyai-container'
            - name: AZURE_BLOB_ACCOUNT_URL
              value: 'https://<your_account_name>.blob.core.windows.net'
            # The Vector store configurations.
            - name: VECTOR_STORE
              value: weaviate
            - name: WEAVIATE_ENDPOINT
              value: http://localhost:8080
            - name: WEAVIATE_API_KEY
              value: WVF5YThaHlkYwhGUSmCRgsX3tD5ngdN8pkih
            # The Qdrant endpoint URL. Only available when VECTOR_STORE is `qdrant`.
            - name: QDRANT_URL
              value: http://qdrant:6333
            # The Qdrant API key.
            - name: QDRANT_API_KEY
              value: difyai123456
            # The Qdrant clinet timeout setting.
            - name: QDRANT_CLIENT_TIMEOUT
              value: '20'
            # Milvus configuration Only available when VECTOR_STORE is `milvus`.
            # The milvus host.
            - name: MILVUS_HOST
              value: 127.0.0.1
            # The milvus host.
            - name: MILVUS_PORT
              value: '19530'
            # The milvus username.
            - name: MILVUS_USER
              value: root
            # The milvus password.
            - name: MILVUS_PASSWORD
              value: Milvus
            # The milvus tls switch.
            - name: MILVUS_SECURE
              value: 'false'
            # Mail configuration, support: resend
            - name: MAIL_TYPE
              value: ''
            # default send from email address, if not specified
            - name: MAIL_DEFAULT_SEND_FROM
              value: 'YOUR EMAIL FROM (eg: no-reply <no-reply@dify.ai>)'
            # the api-key for resend (https://resend.com)
            - name: RESEND_API_KEY
              value: ''
            - name: RESEND_API_URL
              value: https://api.resend.com
            # relyt configurations
            - name: RELYT_HOST
              value: db
            - name: RELYT_PORT
              value: '5432'
            - name: RELYT_USER
              value: postgres
            - name: RELYT_PASSWORD
              value: difyai123456
            - name: RELYT_DATABASE
              value: postgres
            - name: UPLOAD_FILE_SIZE_LIMIT
              value: '30'
            - name: UPLOAD_FILE_BATCH_LIMIT
              value: '10'
            - name: UPLOAD_IMAGE_FILE_SIZE_LIMIT
              value: '20'
            - name: UPLOAD_VIDEO_FILE_SIZE_LIMIT
              value: '200'
            - name: UPLOAD_AUDIO_FILE_SIZE_LIMIT
              value: '100'
            - name: HTTP_PROXY
              value: http://127.0.0.1:3128
            - name: HTTPS_PROXY
              value: http://127.0.0.1:3128
          resources:
            limits:
              cpu: 1000m
              memory: 2Gi
            requests:
              cpu: 50m
              memory: 1Gi
          volumeMounts:
            # Mount the storage directory to the container, for storing user files.
            - name: worker-vol
              mountPath: /app/api/storage

        - name: web
          image: beclab/dify-web:v0.0.7
          imagePullPolicy: IfNotPresent
          ports:
            - name: web-port
              containerPort: 3000
              protocol: TCP
          env:
            - name: EDITION
              value: SELF_HOSTED
            # The base URL of console application api server, refers to the Console base URL of WEB service if console domain is
            # different from api or web app domain.
            # example: http://cloud.dify.ai
            - name: CONSOLE_API_URL
              value: ''
            # The URL for Web APP api server, refers to the Web App base URL of WEB service if web app domain is different from
            # console or api domain.
            # example: http://udify.app
            - name: APP_API_URL
              value: ''
            # The DSN for Sentry error reporting. If not set, Sentry error reporting will be disabled.
            - name: SENTRY_DSN
              value: ''
            - name: NEXT_TELEMETRY_DISABLED
              value: '0'
            - name: TEXT_GENERATION_TIMEOUT_MS
              value: '60000'
            - name: CSP_WHITELIST
              value: ''

          resources:
            limits:
              cpu: 1000m
              memory: 2Gi
            requests:
              cpu: 50m
              memory: 200Mi
        - name: weaviate
          image: docker.io/aboveos/semitechnologies-weaviate:1.19.0
          imagePullPolicy: IfNotPresent
          volumeMounts:
            # Mount the Weaviate data directory to the container.
            - name: weaviate-vol
              mountPath: /var/lib/weaviate
          env:
            # The Weaviate configurations
            # You can refer to the [Weaviate](https://weaviate.io/developers/weaviate/config-refs/env-vars) documentation for more information.
            - name: QUERY_DEFAULTS_LIMIT
              value: '25'
            - name: AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED
              value: 'false'
            - name: PERSISTENCE_DATA_PATH
              value: '/var/lib/weaviate'
            - name: DEFAULT_VECTORIZER_MODULE
              value: 'none'
            - name: CLUSTER_HOSTNAME
              value: 'node1'
            - name: AUTHENTICATION_APIKEY_ENABLED
              value: 'true'
            - name: AUTHENTICATION_APIKEY_ALLOWED_KEYS
              value: 'WVF5YThaHlkYwhGUSmCRgsX3tD5ngdN8pkih'
            - name: AUTHENTICATION_APIKEY_USERS
              value: 'hello@dify.ai'
            - name: AUTHORIZATION_ADMINLIST_ENABLED
              value: 'true'
            - name: AUTHORIZATION_ADMINLIST_USERS
              value: 'hello@dify.ai'
          resources:
            limits:
              cpu: 1000m
              memory: 2Gi
            requests:
              cpu: 50m
              memory: 100Mi

        - name: nginx
          image: 'beclab/nginx-lua:n0.0.4'
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 80
              name: nginx-port
              protocol: TCP
          volumeMounts:
            - name: difyfusion-nginx-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
            - name: difyfusion-nginx-config
              mountPath: /etc/nginx/proxy.conf
              subPath: proxy.conf
            - name: difyfusion-nginx-config
              mountPath: /etc/nginx/conf.d/default.conf
              subPath: default.conf
            - name: difyfusion-nginx-config
              mountPath: /etc/nginx/login.lua
              subPath: login.lua
          resources:
            limits:
              cpu: 1000m
              memory: 2Gi
            requests:
              cpu: 50m
              memory: 50Mi

        - name: redis
          image: docker.io/aboveos/redis:6.2.13-alpine3.18
          imagePullPolicy: IfNotPresent
          volumeMounts:
            # Mount the redis data directory to the container.
            - name: redis-data
              mountPath: /data
          # Set the redis password when startup redis server.
          command:
            - "redis-server"
            - "--requirepass"
            - "{{ $redis_password | b64dec }}"
          resources:
            limits:
              cpu: "1"
              memory: 100Mi
            requests:
              cpu: 20m
              memory: 50Mi

        - name: dify-sandbox
          image: 'langgenius/dify-sandbox:0.2.10'
          ports:
            - containerPort: 8194  # 或你需要的端口
          env:
            - name: API_KEY
              value: dify-sandbox
            - name: GIN_MODE
              value: release
            - name: WORKER_TIMEOUT
              value: '15'
            - name: ENABLE_NETWORK
              value: 'true'
            - name: HTTP_PROXY
              value: http://127.0.0.1:3128
            - name: HTTPS_PROXY
              value: http://127.0.0.1:3128
            - name: SANDBOX_PORT
              value: '8194'
          resources:
            limits:
              cpu: 1000m
              memory: 2Gi
            requests:
              cpu: 50m
              memory: 500Mi
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
          securityContext:
            capabilities:
              add:
                - SYS_ADMIN

        - name: ssrf-proxy
          image: ubuntu/squid:latest
#          restartPolicy: Always  # 在 K8S 中，restartPolicy 通常在 Pod 级别设置，这里仅示意为 Always
          resources:
            limits:
              cpu: 200m
              memory: 200Mi
            requests:
              cpu: 50m
              memory: 100Mi
          ports:
            - containerPort: 3128  # 或你需要的端口
          volumeMounts:
            - mountPath: /etc/squid/squid.conf.template
              subPath: squid.conf.template
              name: difyfusion-nginx-config
            - mountPath: /docker-entrypoint.sh
              subPath: docker-entrypoint.sh
              name: difyfusion-nginx-config
          command: [ "sh", "-c" ]
          args:
            - >
              cp /docker-entrypoint.sh /docker-entrypoint-mount.sh &&
              sed -i 's/\r$$//' /docker-entrypoint-mount.sh &&
              chmod +x /docker-entrypoint-mount.sh &&
              /docker-entrypoint-mount.sh
          env:
            - name: HTTP_PORT
              value: '3128'
            - name: COREDUMP_DIR
              value: '/var/spool/squid'
            - name: REVERSE_PROXY_PORT
              value: '8194'
            - name: SANDBOX_HOST
              value: '127.0.0.1'
            - name: SANDBOX_PORT
              value: '8194'
            - name: SSRF_DEFAULT_MAX_RETRIES
              value: '3'
            - name: SSRF_DEFAULT_TIME_OUT
              value: '5'
            - name: SSRF_DEFAULT_CONNECT_TIME_OUT
              value: '5'
            - name: SSRF_DEFAULT_READ_TIME_OUT
              value: '5'
            - name: SSRF_DEFAULT_WRITE_TIME_OUT
              value: '5'
#          networks:
#            - name: ssrf_proxy_network  # 在 K8S 中，网络通常在 Pod 级别通过 network policies 或在部署时指定
#            - name: default  # 默认网络通常自动应用，如果已在 Pod 级别指定可省略

      volumes:
        - name: api-vol
          hostPath:
            type: DirectoryOrCreate
            path: {{ .Values.userspace.appCache }}/difyfusion/volumes/app/storage

        - name: worker-vol
          hostPath:
            type: DirectoryOrCreate
            path: {{ .Values.userspace.appCache }}/difyfusion/volumes/app/storage

        - name: weaviate-vol
          hostPath:
            type: DirectoryOrCreate
            path: {{ .Values.userspace.appCache }}/difyfusion/volumes/weaviate

        - name: redis-data
          hostPath:
            type: DirectoryOrCreate
            path: {{ .Values.userspace.appCache }}/difyfusion/volumes/redis/data

        - name: difyfusion-nginx-config
          configMap:
            name: difyfusion-nginx-config
            items:
              - key: nginx.conf
                path: nginx.conf
              - key: proxy.conf
                path: proxy.conf
              - key: default.conf
                path: default.conf
              - key: login.lua
                path: login.lua
              - key: squid.conf.template
                path: squid.conf.template
              - key: docker-entrypoint.sh
                path: docker-entrypoint.sh
            defaultMode: 420
