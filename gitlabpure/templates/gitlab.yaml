

{{- $gitlabDomainENV := split  ","  .Values.domain.gitlab -}}
{{- $gitlabDomain := index $gitlabDomainENV "_0" -}}

{{- $minioDomainENV := split  ","  .Values.domain.minio -}}
{{- $minioDomain := index $minioDomainENV "_0" -}}

{{- $kasDomainENV := split  ","  .Values.domain.kas -}}
{{- $kasDomain := index $kasDomainENV "_0" -}}

{{- $registryDomainENV := split  ","  .Values.domain.registry -}}
{{- $registryDomain := index $registryDomainENV "_0" -}}

{{- $smartcardDomainENV := split  ","  .Values.domain.smartcard -}}
{{- $smartcardDomain := index $smartcardDomainENV "_0" -}}

{{- $projectspagesDomainENV := split  ","  .Values.domain.projectspages -}}
{{- $projectspagesDomain := index $projectspagesDomainENV "_0" -}}

{{- $pagesDomainENV := split  ","  .Values.domain.pages -}}
{{- $pagesDomain := index $pagesDomainENV "_0" -}}
---
apiVersion: v1
kind: Secret
metadata:
  name: replace-gitlab-postgres
  namespace: {{ .Release.Namespace }}
type: kubernetes.io/basic-auth
stringData:
  password: {{ .Values.postgres.password }}
---
apiVersion: v1
kind: Secret
metadata:
  name: replace-gitlab-redis
  namespace: {{ .Release.Namespace }}
type: kubernetes.io/basic-auth
stringData:
  password: {{ .Values.redis.password }}
---
# Source: gitlab/charts/certmanager/templates/startupapicheck-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: gitlab-certmanager-startupapicheck
  namespace: {{ .Release.Namespace }}
  annotations:
    helm.sh/hook: post-install
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "-5"
  labels:
    app: startupapicheck
    app.kubernetes.io/name: startupapicheck
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: "startupapicheck"
    app.kubernetes.io/version: "v1.12.6"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: certmanager-v1.12.6
---
# Source: gitlab/templates/shared-secrets/rbac-config.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gitlab-shared-secrets
  namespace: {{ .Release.Namespace }}
  labels:
    app: gitlab
    chart: gitlab-7.6.0
    release: gitlab
    heritage: Helm
    
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
---
# Source: gitlab/templates/shared-secrets/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-shared-secrets
  namespace: {{ .Release.Namespace }}
  labels:
    app: gitlab
    chart: gitlab-7.6.0
    release: gitlab
    heritage: Helm
    
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-3"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
data:
  generate-secrets: |
    # vim: set filetype=sh:
    
    namespace={{ .Release.Namespace }}
    release=gitlab
    env=production
    
    pushd $(mktemp -d)
    
    # Args pattern, length
    function gen_random(){
      head -c 4096 /dev/urandom | LC_CTYPE=C tr -cd $1 | head -c $2
    }
    
    # Args: yaml file, search path
    function fetch_rails_value(){
      local value=$(yq ".${2}" $1)
    
      # Don't return null values
      if [ "${value}" != "null" ]; then echo "${value}"; fi
    }
    
    # Args: secretname
    function label_secret(){
      local secret_name=$1
    # Remove application labels if they exist
      kubectl --namespace=$namespace label \
        secret $secret_name $(echo 'app.kubernetes.io/name=gitlab' | sed -E 's/=[^ ]*/-/g')
    
      kubectl --namespace=$namespace label \
        --overwrite \
        secret $secret_name app=gitlab chart=gitlab-7.6.0 release=gitlab heritage=Helm 
    }
    
    # Args: secretname, args
    function generate_secret_if_needed(){
      local secret_args=( "${@:2}")
      local secret_name=$1
    
      if ! $(kubectl --namespace=$namespace get secret $secret_name > /dev/null 2>&1); then
        kubectl --namespace=$namespace create secret generic $secret_name ${secret_args[@]}
      else
        echo "secret \"$secret_name\" already exists."
    
        for arg in "${secret_args[@]}"; do
          local from=$(echo -n ${arg} | cut -d '=' -f1)
    
          if [ -z "${from##*literal*}" ]; then
            local key=$(echo -n ${arg} | cut -d '=' -f2)
            local desiredValue=$(echo -n ${arg} | cut -d '=' -f3-)
            local flags="--namespace=$namespace --allow-missing-template-keys=false"
    
            if ! $(kubectl $flags get secret $secret_name -ojsonpath="{.data.${key}}" > /dev/null 2>&1); then
              echo "key \"${key}\" does not exist. patching it in."
    
              if [ "${desiredValue}" != "" ]; then
                desiredValue=$(echo -n "${desiredValue}" | base64 -w 0)
              fi
    
              kubectl --namespace=$namespace patch secret ${secret_name} -p "{\"data\":{\"$key\":\"${desiredValue}\"}}"
            fi
          fi
        done
      fi
    
      label_secret $secret_name
    }
    
    # Initial root password
    generate_secret_if_needed "gitlab-gitlab-initial-root-password" --from-literal="password"=$(gen_random 'a-zA-Z0-9' 64)
    
    
    # Redis password
    generate_secret_if_needed "gitlab-redis-secret" --from-literal="secret"=$(gen_random 'a-zA-Z0-9' 64)
    
    
    # Postgres password
    generate_secret_if_needed "gitlab-postgresql-password" --from-literal="postgresql-password"=$(gen_random 'a-zA-Z0-9' 64) --from-literal=postgresql-postgres-password=$(gen_random 'a-zA-Z0-9' 64)
    
    
    # Gitlab shell
    generate_secret_if_needed "gitlab-gitlab-shell-secret" --from-literal="secret"=$(gen_random 'a-zA-Z0-9' 64)
    
    # Gitaly secret
    generate_secret_if_needed "gitlab-gitaly-secret" --from-literal="token"=$(gen_random 'a-zA-Z0-9' 64)
    
    # Minio secret
    generate_secret_if_needed "gitlab-minio-secret" --from-literal=accesskey=$(gen_random 'a-zA-Z0-9' 64) --from-literal=secretkey=$(gen_random 'a-zA-Z0-9' 64)
    
    
    # Gitlab runner secret
    generate_secret_if_needed "gitlab-gitlab-runner-secret" --from-literal=runner-registration-token=$(gen_random 'a-zA-Z0-9' 64) --from-literal=runner-token=""
    
    # GitLab Pages API secret
    
    
    # GitLab Pages auth secret for hashing cookie store when using access control
    
    
    # GitLab Pages OAuth secret
    
    
    # Gitlab-kas secret
    generate_secret_if_needed "gitlab-gitlab-kas-secret" --from-literal="kas_shared_secret"=$(gen_random 'a-zA-Z0-9' 32 | base64)
    
    # Gitlab-kas private API secret
    generate_secret_if_needed "gitlab-kas-private-api" --from-literal="kas_private_api_secret"=$(gen_random 'a-zA-Z0-9' 32 | base64)
    
    
    # Gitlab-suggested-reviewers secret
    generate_secret_if_needed "gitlab-gitlab-suggested-reviewers" --from-literal="suggested_reviewers_secret"=$(gen_random 'a-zA-Z0-9' 32 | base64)
    
    
    
    
    
    # Registry certificates
    mkdir -p certs
    openssl req -new -newkey rsa:4096 -subj "/CN=gitlab-issuer" -nodes -x509 -keyout certs/registry-example-com.key -out certs/registry-example-com.crt -days 3650
    generate_secret_if_needed "gitlab-registry-secret" --from-file=registry-auth.key=certs/registry-example-com.key --from-file=registry-auth.crt=certs/registry-example-com.crt
    
    # config/secrets.yaml
    if [ -n "$env" ]; then
      rails_secret="gitlab-rails-secret"
    
      # Fetch the values from the existing secret if it exists
      if $(kubectl --namespace=$namespace get secret $rails_secret > /dev/null 2>&1); then
        kubectl --namespace=$namespace get secret $rails_secret -o jsonpath="{.data.secrets\.yml}" | base64 --decode > secrets.yml
        secret_key_base=$(fetch_rails_value secrets.yml "${env}.secret_key_base")
        otp_key_base=$(fetch_rails_value secrets.yml "${env}.otp_key_base")
        db_key_base=$(fetch_rails_value secrets.yml "${env}.db_key_base")
        openid_connect_signing_key=$(fetch_rails_value secrets.yml "${env}.openid_connect_signing_key")
        ci_jwt_signing_key=$(fetch_rails_value secrets.yml "${env}.ci_jwt_signing_key")
        encrypted_settings_key_base=$(fetch_rails_value secrets.yml "${env}.encrypted_settings_key_base")
      fi;
    
      # Generate defaults for any unset secrets
      secret_key_base="${secret_key_base:-$(gen_random 'a-f0-9' 128)}" # equavilent to secureRandom.hex(64)
      otp_key_base="${otp_key_base:-$(gen_random 'a-f0-9' 128)}" # equavilent to secureRandom.hex(64)
      db_key_base="${db_key_base:-$(gen_random 'a-f0-9' 128)}" # equavilent to secureRandom.hex(64)
      openid_connect_signing_key="${openid_connect_signing_key:-$(openssl genrsa 2048)}"
      ci_jwt_signing_key="${ci_jwt_signing_key:-$(openssl genrsa 2048)}"
      encrypted_settings_key_base="${encrypted_settings_key_base:-$(gen_random 'a-f0-9' 128)}" # equavilent to secureRandom.hex(64)
    
      # Update the existing secret
      cat << EOF > rails-secrets.yml
    apiVersion: v1
    kind: Secret
    metadata:
      name: $rails_secret
    type: Opaque
    stringData:
      secrets.yml: |-
        $env:
          secret_key_base: $secret_key_base
          otp_key_base: $otp_key_base
          db_key_base: $db_key_base
          encrypted_settings_key_base: $encrypted_settings_key_base
          openid_connect_signing_key: |
    $(echo "${openid_connect_signing_key}" | awk '{print "        " $0}')
          ci_jwt_signing_key: |
    $(echo "${ci_jwt_signing_key}" | awk '{print "        " $0}')
    EOF
      kubectl --validate=false --namespace=$namespace apply -f rails-secrets.yml
      label_secret $rails_secret
    fi
    
    # Shell ssh host keys
    ssh-keygen -A
    mkdir -p host_keys
    cp /etc/ssh/ssh_host_* host_keys/
    generate_secret_if_needed "gitlab-gitlab-shell-host-keys" --from-file host_keys
    
    # Gitlab-workhorse secret
    generate_secret_if_needed "gitlab-gitlab-workhorse-secret" --from-literal="shared_secret"=$(gen_random 'a-zA-Z0-9' 32 | base64)
    
    # Registry http.secret secret
    generate_secret_if_needed "gitlab-registry-httpsecret" --from-literal="secret"=$(gen_random 'a-z0-9' 128 | base64 -w 0)
    
    # Container Registry notification_secret
    generate_secret_if_needed "gitlab-registry-notification" --from-literal="secret"=[\"$(gen_random 'a-zA-Z0-9' 32)\"]
    
    
    
    # Zoekt basic auth credentials
    generate_secret_if_needed gitlab-zoekt-basicauth  --from-literal=gitlab_username=gitlab --from-literal=gitlab_password=$(gen_random 'a-zA-Z0-9' 64)
---
# Source: gitlab/templates/upgrade_check_hook.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-gitlab-upgrade-check
  namespace: {{ .Release.Namespace }}
  labels:
    app: gitlab
    chart: gitlab-7.6.0
    release: gitlab
    heritage: Helm
    
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "-11"
    "helm.sh/hook-delete-policy": before-hook-creation
data:
  runcheck: |
    #!/bin/sh
    
    set -e
    
    notify() {
      echo "$1"
      echo -n "$1 " >> /dev/termination-log
    }
    
    greater_version()
    {
      test "$(printf '%s\n' "$@" | sort -V | tail -n 1)" = "$1";
    }
    
    is_semver()
    {
      printf '%s' "$1" | grep -Eq "^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}"
      return "$?"
    }
    
    # For the PostgreSQL upgrade, you either need both secrets, or no secrets.
    # If there are no secrets, we will create them for you.
    # If the secrets aren't in either of these states, we assume you are upgrading from an older version
    # This is running ahead of version checks to ensure this always runs. This is to account for
    # installations outside of the official helm repo.
    secrets_dir="/etc/secrets/postgresql"
    if [ -d "${secrets_dir}" ]; then
      if [ ! "$(ls -A ${secrets_dir}/..data/)" = "" ]; then
        if [ ! -f "${secrets_dir}/postgresql-postgres-password" ] || [ ! -f "${secrets_dir}/postgresql-password" ]; then
          notify "You seem to be upgrading from a previous version of GitLab using the bundled PostgreSQL chart"
          notify "There are some manual steps which need to be performed in order to upgrade the database"
          notify "Please see the upgrade documentation for instructions on how to proceed:"
          notify "https://docs.gitlab.com/charts/installation/upgrade.html"
          exit 1
        fi
      fi
    fi
    MIN_VERSION=16.3
    CHART_MIN_VERSION=7.3
    
    # Remove 'v' prefix from GitLab version if present (set in Chart.yaml appVersions)
    GITLAB_VERSION=${GITLAB_VERSION#v}
    
    # Only run check for semver releases
    if ! is_semver "$GITLAB_VERSION"; then
      exit 0
    fi
    
    NEW_MAJOR_VERSION=$(echo $GITLAB_VERSION | awk -F "." '{print $1}')
    NEW_MINOR_VERSION=$(echo $GITLAB_VERSION | awk -F "." '{print $1"."$2}')
    
    NEW_CHART_MAJOR_VERSION=$(echo $CHART_VERSION | awk -F "." '{print $1}')
    NEW_CHART_MINOR_VERSION=$(echo $CHART_VERSION | awk -F "." '{print $1"."$2}')
    
    if [ ! -f /chart-info/gitlabVersion ]; then
      notify "It seems you are attempting an unsupported upgrade path."
      notify "Please follow the upgrade documentation at https://docs.gitlab.com/ee/update/#upgrade-paths"
      exit 1
    fi
    
    OLD_VERSION_STRING=$(cat /chart-info/gitlabVersion)
    OLD_VERSION_STRING=${OLD_VERSION_STRING#v}
    OLD_CHART_VERSION_STRING=$(cat /chart-info/gitlabChartVersion)
    
    # Skip check if old version wasn't semver
    if ! is_semver "$OLD_VERSION_STRING"; then
      exit 0
    fi
    
    OLD_MAJOR_VERSION=$(echo $OLD_VERSION_STRING | awk -F "." '{print $1}')
    OLD_MINOR_VERSION=$(echo $OLD_VERSION_STRING | awk -F "." '{print $1"."$2}')
    OLD_CHART_MAJOR_VERSION=$(echo $OLD_CHART_VERSION_STRING | awk -F "." '{print $1}')
    OLD_CHART_MINOR_VERSION=$(echo $OLD_CHART_VERSION_STRING | awk -F "." '{print $1"."$2}')
    
    # Checking Version
    if ( ! greater_version "$OLD_MINOR_VERSION" "$MIN_VERSION" ) || ( ! greater_version "$OLD_CHART_MINOR_VERSION" "$CHART_MIN_VERSION" ); then
      notify "It seems you are upgrading the GitLab Helm Chart from ${OLD_CHART_VERSION_STRING} (GitLab ${OLD_VERSION_STRING}) to ${CHART_VERSION} (GitLab ${GITLAB_VERSION})."
      notify "It is required to upgrade to the latest ${CHART_MIN_VERSION}.x version first before proceeding."
      # Link to upgrade docs if it is a major version jump
      if [ "${OLD_MAJOR_VERSION}" -lt "${NEW_MAJOR_VERSION}" ] || [ "${OLD_CHART_MAJOR_VERSION}" -lt "${NEW_CHART_MAJOR_VERSION}" ]; then
        notify "Please follow the upgrade documentation at https://docs.gitlab.com/charts/releases/7_0.html"
        notify "and upgrade to GitLab Helm Chart version ${CHART_MIN_VERSION}.x before upgrading to ${CHART_VERSION}."
      fi
      exit 1
    fi
---
# Source: gitlab/charts/certmanager/templates/startupapicheck-rbac.yaml
# create certificate role
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: gitlab-certmanager-startupapicheck:create-cert
  namespace: {{ .Release.Namespace }}
  labels:
    app: startupapicheck
    app.kubernetes.io/name: startupapicheck
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: "startupapicheck"
    app.kubernetes.io/version: "v1.12.6"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: certmanager-v1.12.6
  annotations:
    helm.sh/hook: post-install
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "-5"
rules:
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates"]
    verbs: ["create"]
---
# Source: gitlab/templates/shared-secrets/rbac-config.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gitlab-shared-secrets
  namespace: {{ .Release.Namespace }}
  labels:
    app: shared-secrets
    chart: shared-secrets-7.6.0
    release: gitlab
    heritage: Helm
    
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "create", "patch"]
---
# Source: gitlab/charts/certmanager/templates/startupapicheck-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: gitlab-certmanager-startupapicheck:create-cert
  namespace: {{ .Release.Namespace }}
  labels:
    app: startupapicheck
    app.kubernetes.io/name: startupapicheck
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: "startupapicheck"
    app.kubernetes.io/version: "v1.12.6"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: certmanager-v1.12.6
  annotations:
    helm.sh/hook: post-install
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "-5"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: gitlab-certmanager-startupapicheck:create-cert
subjects:
  - kind: ServiceAccount
    name: gitlab-certmanager-startupapicheck
    namespace: {{ .Release.Namespace }}
---
# Source: gitlab/templates/shared-secrets/rbac-config.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: gitlab-shared-secrets
  namespace: {{ .Release.Namespace }}
  labels:
    app: shared-secrets
    chart: shared-secrets-7.6.0
    release: gitlab
    heritage: Helm
    
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-weight": "-5"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: gitlab-shared-secrets
subjects:
  - kind: ServiceAccount
    name: gitlab-shared-secrets
    namespace: {{ .Release.Namespace }}
---
# Source: gitlab/charts/gitlab/charts/webservice/templates/tests/test-runner.yaml
apiVersion: v1
kind: Pod
metadata:
  name: gitlab-webservice-test-runner-qowox
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": test
    "helm.sh/hook-delete-policy": hook-succeeded,hook-failed,before-hook-creation
  labels:
    app: webservice
    chart: webservice-7.6.0
    release: gitlab
    heritage: Helm
    
spec:
  containers:
  - name: test-runner
    image: docker.io/aboveos/gitlab-org-build-cng-gitlab-webservice-ce:v16.6.0
    command: ['sh', '/tests/test_login']
    volumeMounts:
      - name: tests
        mountPath: '/tests'
      - name: root-password
        readOnly: true
        mountPath: /initial_root_password
        subPath: initial_root_password
  volumes:
  - name: tests
    configMap:
      name: gitlab-webservice-tests
  - name: root-password
    secret:
      secretName: "gitlab-gitlab-initial-root-password"
      items:
        - key: "password"
          path: initial_root_password
  restartPolicy: Never
---
# Source: gitlab/charts/certmanager/templates/startupapicheck-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: gitlab-certmanager-startupapicheck
  namespace: {{ .Release.Namespace }}
  labels:
    app: startupapicheck
    app.kubernetes.io/name: startupapicheck
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: "startupapicheck"
    app.kubernetes.io/version: "v1.12.6"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: certmanager-v1.12.6
  annotations:
    helm.sh/hook: post-install
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
    helm.sh/hook-weight: "1"
spec:
  backoffLimit: 4
  template:
    metadata:
      labels:
        app: startupapicheck
        app.kubernetes.io/name: startupapicheck
        app.kubernetes.io/instance: gitlab
        app.kubernetes.io/component: "startupapicheck"
        app.kubernetes.io/version: "v1.12.6"
        app.kubernetes.io/managed-by: Helm
        helm.sh/chart: certmanager-v1.12.6
    spec:
      restartPolicy: OnFailure
      serviceAccountName: gitlab-certmanager-startupapicheck
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: certmanager-startupapicheck
          image: "docker.io/aboveos/jetstack-cert-manager-ctl:v1.12.6"
          imagePullPolicy: IfNotPresent
          args:
          - check
          - api
          - --wait=1m
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: gitlab/templates/shared-secrets/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: gitlab-shared-secrets-1-qo1
  namespace: {{ .Release.Namespace }}
  labels:
    app: gitlab
    chart: gitlab-7.6.0
    release: gitlab
    heritage: Helm
    
  annotations:
    "helm.sh/hook": pre-install,pre-upgrade
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
spec:
  template:
    metadata:
      labels:
        app: gitlab
        chart: gitlab-7.6.0
        release: gitlab
        heritage: Helm
        
        
      annotations:
    spec:
      
      securityContext:
        runAsUser: 65534
        fsGroup: 65534
      serviceAccountName: gitlab-shared-secrets
      restartPolicy: Never
      
      containers:
        - name: gitlab
          image: docker.io/aboveos/gitlab-org-build-cng-kubectl:v16.6.0          
          command: ['/bin/bash', '/scripts/generate-secrets']
          volumeMounts:
            - name: scripts
              mountPath: /scripts
            - name: ssh
              mountPath: /etc/ssh
          resources:
            requests:
              cpu: 50m
      volumes:
      - name: scripts
        configMap:
          name: gitlab-shared-secrets
      - name: ssh
        emptyDir: {}
---
# Source: gitlab/templates/upgrade_check_hook.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: gitlab-gitlab-upgrade-check
  namespace: {{ .Release.Namespace }}
  labels:
    app: gitlab
    chart: gitlab-7.6.0
    release: gitlab
    heritage: Helm
    
  annotations:
    "helm.sh/hook": pre-upgrade
    "helm.sh/hook-weight": "-10"
    "helm.sh/hook-delete-policy": hook-succeeded,before-hook-creation
spec:
  backoffLimit: 2
  template:
    metadata:
      labels:
        app: gitlab
        release: gitlab

    spec:
      
      securityContext:
        runAsUser: 65534
        fsGroup: 65534
      restartPolicy: Never
      
      containers:
        - name: run-check
          image: "docker.io/aboveos/gitlab-org-build-cng-gitlab-base:v16.6.0"
          command: ['/bin/sh', '/scripts/runcheck']          
          env:
            - name: GITLAB_VERSION
              value: '16.6.0'
            - name: CHART_VERSION
              value: '7.6.0'
          volumeMounts:
            - name: chart-info
              mountPath: /chart-info
            - name: scripts
              mountPath: /scripts
            - name: postgresql-secret
              mountPath: /etc/secrets/postgresql
          resources:
            requests:
              cpu: 50m
      volumes:
      - name: chart-info
        configMap:
          name: gitlab-gitlab-chart-info
          optional: true
      - name: scripts
        configMap:
          name: gitlab-gitlab-upgrade-check
      - name: postgresql-secret
        secret:
          secretName: "gitlab-postgresql-password"
          optional: true
MANIFEST:
---
# Source: gitlab/charts/gitlab/charts/gitaly/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: gitlab-gitaly
  namespace: {{ .Release.Namespace }}
  labels:
    app: gitaly
    chart: gitaly-7.6.0
    release: gitlab
    heritage: Helm
    
spec:
  maxUnavailable:  1
  selector:
    matchLabels:
      app: gitaly
      release: gitlab
---
# Source: gitlab/charts/gitlab/charts/gitlab-shell/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: gitlab-gitlab-shell
  namespace: {{ .Release.Namespace }}
  labels:
    app: gitlab-shell
    chart: gitlab-shell-7.6.0
    release: gitlab
    heritage: Helm
    
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: gitlab-shell
      release: gitlab
---
# Source: gitlab/charts/gitlab/charts/kas/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: gitlab-kas
  namespace: {{ .Release.Namespace }}
  labels:
    app: kas
    chart: kas-7.6.0
    release: gitlab
    heritage: Helm
    
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: kas
      release: gitlab
---
# Source: gitlab/charts/gitlab/charts/sidekiq/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: gitlab-sidekiq-all-in-1-v1
  namespace: {{ .Release.Namespace }}
  labels:
    app: sidekiq
    chart: sidekiq-7.6.0
    release: gitlab
    heritage: Helm
    
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: sidekiq
      release: gitlab
      
      queue-pod-name: all-in-1
---
# Source: gitlab/charts/gitlab/charts/webservice/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: gitlab-webservice-default
  namespace: {{ .Release.Namespace }}
  labels:
    app: webservice
    chart: webservice-7.6.0
    release: gitlab
    heritage: Helm
    gitlab.com/webservice-name: default
    
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: webservice
      release: gitlab
      
      
      gitlab.com/webservice-name: default
---
# Source: gitlab/charts/minio/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: gitlab-minio-v1
  namespace: {{ .Release.Namespace }}
  labels:
    app: minio
    chart: minio-0.4.3
    release: gitlab
    heritage: Helm
    
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: minio
      release: gitlab
      component: app
---
# Source: gitlab/charts/nginx-ingress/templates/controller-poddisruptionbudget.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-4.0.6
    release: gitlab
    heritage: Helm
    
    component: "controller"
    helm.sh/chart: nginx-ingress-4.0.6
    app.kubernetes.io/version: "1.0.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: gitlab-nginx-ingress-controller
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: nginx-ingress
      release: gitlab
      component: "controller"
  minAvailable: 1
---
# Source: gitlab/charts/registry/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: gitlab-registry-v1
  namespace: {{ .Release.Namespace }}
  labels:
    app: registry
    chart: registry-0.7.0
    release: gitlab
    heritage: Helm
    
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: registry
      release: gitlab
---
# Source: gitlab/charts/certmanager-issuer/templates/rbac-config.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gitlab-certmanager-issuer
  namespace: {{ .Release.Namespace }}
  labels:
    app: certmanager-issuer
    chart: certmanager-issuer-0.1.0
    release: gitlab
    heritage: Helm
    
  annotations:
    namespace: {{ .Release.Namespace }}
# ---
# # Source: gitlab/charts/certmanager/templates/cainjector-serviceaccount.yaml
# apiVersion: v1
# kind: ServiceAccount
# automountServiceAccountToken: true
# metadata:
#   name: gitlab-certmanager-cainjector
#   namespace: {{ .Release.Namespace }}
#   labels:
#     app: cainjector
#     app.kubernetes.io/name: cainjector
#     app.kubernetes.io/instance: gitlab
#     app.kubernetes.io/component: "cainjector"
#     app.kubernetes.io/version: "v1.12.6"
#     app.kubernetes.io/managed-by: Helm
#     helm.sh/chart: certmanager-v1.12.6
---
# Source: gitlab/charts/certmanager/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: gitlab-certmanager
  namespace: {{ .Release.Namespace }}
  labels:
    app: certmanager
    app.kubernetes.io/name: certmanager
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: "controller"
    app.kubernetes.io/version: "v1.12.6"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: certmanager-v1.12.6
---
# Source: gitlab/charts/certmanager/templates/webhook-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: gitlab-certmanager-webhook
  namespace: {{ .Release.Namespace }}
  labels:
    app: webhook
    app.kubernetes.io/name: webhook
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: "webhook"
    app.kubernetes.io/version: "v1.12.6"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: certmanager-v1.12.6
---
# Source: gitlab/charts/gitlab-runner/templates/service-account.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gitlab-gitlab-runner
  namespace: "{{ .Release.Namespace }}"
  labels:
    app: gitlab-gitlab-runner
    chart: gitlab-runner-0.58.2
    release: "gitlab"
    heritage: "Helm"
---
# Source: gitlab/charts/nginx-ingress/templates/controller-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-4.0.6
    release: gitlab
    heritage: Helm
    
    component: "controller"
    helm.sh/chart: nginx-ingress-4.0.6
    app.kubernetes.io/version: "1.0.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: gitlab-nginx-ingress
  namespace: {{ .Release.Namespace }}
automountServiceAccountToken: true
---
# Source: gitlab/charts/prometheus/templates/server/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    component: "server"
    app: prometheus
    release: gitlab
    chart: prometheus-15.18.0
    heritage: Helm
  name: gitlab-prometheus-server
  namespace: {{ .Release.Namespace }}
  annotations:
    {}
---
# Source: gitlab/charts/redis/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
automountServiceAccountToken: true
metadata:
  name: gitlab-redis
  namespace: "{{ .Release.Namespace }}"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.13.2
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/managed-by: Helm
---
# Source: gitlab/charts/certmanager-issuer/templates/cert-manager.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-certmanager-issuer-certmanager
  namespace: {{ .Release.Namespace }}
  labels:
    app: certmanager-issuer
    chart: certmanager-issuer-0.1.0
    release: gitlab
    heritage: Helm
    
data:
  create-issuer: |
    #!/bin/bash
    set -e ;
    
    issuer_file=$1
    namespace={{ .Release.Namespace }}
    
    echo "Creating the certmanager issuer..."
    set +e ; # The CRD may not exist yet. We need to retry until this passes
    while ! kubectl --namespace=$namespace apply -f ${issuer_file:=issuer.yml}; do
      sleep 1;
    done ;
    set -e ; # reset `e` as active
    
  issuer.yml: |
    apiVersion: cert-manager.io/v1
    kind: Issuer
    metadata:
      name: gitlab-issuer
      namespace: {{ .Release.Namespace }}
      labels:
        app: certmanager-issuer
        chart: certmanager-issuer-0.1.0
        release: gitlab
        heritage: Helm
        
    spec:
      acme:
        # The ACME server URL
        server: "https://acme-v02.api.letsencrypt.org/directory"
        # Email address used for ACME registration
        email: "kldtks@live.com"
        # Name of a secret used to store the ACME account private key
        privateKeySecretRef:
          name: gitlab-acme-key
        # Enable the HTTP-01 challenge provider
        solvers:
        - selector: {}
          http01:
            ingress:
              class: gitlab-nginx
---
# Source: gitlab/charts/certmanager/templates/webhook-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-certmanager-webhook
  namespace: {{ .Release.Namespace }}
  labels:
    app: webhook
    app.kubernetes.io/name: webhook
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: "webhook"
    app.kubernetes.io/version: "v1.12.6"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: certmanager-v1.12.6
data:
---
# Source: gitlab/charts/gitlab-runner/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-gitlab-runner
  namespace: "{{ .Release.Namespace }}"
  labels:
    app: gitlab-gitlab-runner
    chart: gitlab-runner-0.58.2
    release: "gitlab"
    heritage: "Helm"
data:
  entrypoint: |
    #!/bin/bash
    set -e

    export CONFIG_PATH_FOR_INIT="/home/gitlab-runner/.gitlab-runner/"
    mkdir -p ${CONFIG_PATH_FOR_INIT}
    cp /configmaps/config.toml ${CONFIG_PATH_FOR_INIT}

    # Set up environment variables for cache
    if [[ -f /secrets/accesskey && -f /secrets/secretkey ]]; then
      export CACHE_S3_ACCESS_KEY=$(cat /secrets/accesskey)
      export CACHE_S3_SECRET_KEY=$(cat /secrets/secretkey)
    fi

    if [[ -f /secrets/gcs-applicaton-credentials-file ]]; then
      export GOOGLE_APPLICATION_CREDENTIALS="/secrets/gcs-applicaton-credentials-file"
    elif [[ -f /secrets/gcs-application-credentials-file ]]; then
      export GOOGLE_APPLICATION_CREDENTIALS="/secrets/gcs-application-credentials-file"
    else
      if [[ -f /secrets/gcs-access-id && -f /secrets/gcs-private-key ]]; then
        export CACHE_GCS_ACCESS_ID=$(cat /secrets/gcs-access-id)
        # echo -e used to make private key multiline (in google json auth key private key is oneline with \n)
        export CACHE_GCS_PRIVATE_KEY=$(echo -e $(cat /secrets/gcs-private-key))
      fi
    fi

    if [[ -f /secrets/azure-account-name && -f /secrets/azure-account-key ]]; then
      export CACHE_AZURE_ACCOUNT_NAME=$(cat /secrets/azure-account-name)
      export CACHE_AZURE_ACCOUNT_KEY=$(cat /secrets/azure-account-key)
    fi

    if [[ -f /secrets/runner-registration-token ]]; then
      export REGISTRATION_TOKEN=$(cat /secrets/runner-registration-token)
    fi

    if [[ -f /secrets/runner-token ]]; then
      export CI_SERVER_TOKEN=$(cat /secrets/runner-token)
    fi

    # Register the runner
    if ! sh /configmaps/register-the-runner; then
      exit 1
    fi

    # Run pre-entrypoint-script
    if ! bash /configmaps/pre-entrypoint-script; then
      exit 1
    fi

    # Start the runner
    exec /entrypoint run \
      --working-directory=/home/gitlab-runner

  config.toml: |
    shutdown_timeout = 0
    concurrent = 10
    check_interval = 30
    log_level = "info"

  config.template.toml: |
    [[runners]]
      [runners.kubernetes]
      image = "ubuntu:22.04"
      privileged = true
      [runners.kubernetes.pod_security_context]
        run_as_user = 0
      [[runners.kubernetes.volumes.host_path]]
        name = "docker"
        mount_path = "/var/run/docker.sock"
      [runners.cache]
        Type = "s3"
        Path = "gitlab-runner"
        Shared = true
        [runners.cache.s3]
          ServerAddress = "{{ $minioDomain }}"
          BucketName = "runner-cache"
          BucketLocation = "us-east-1"
          Insecure = false

  register-the-runner: |
    #!/bin/bash
    MAX_REGISTER_ATTEMPTS=30

    # Reset/unset the not needed flags when an authentication token
    RUN_UNTAGGED=""
    ACCESS_LEVEL=""

    if [ ! -z "$REGISTRATION_TOKEN" ] && [ "${REGISTRATION_TOKEN#glrt-}" != "$REGISTRATION_TOKEN" ]; then
      RUN_UNTAGGED=""
      ACCESS_LEVEL=""
      unset REGISTER_LOCKED
      unset RUNNER_TAG_LIST
    fi

    for i in $(seq 1 "${MAX_REGISTER_ATTEMPTS}"); do
      echo "Registration attempt ${i} of ${MAX_REGISTER_ATTEMPTS}"
      /entrypoint register \
        ${RUN_UNTAGGED} \
        ${ACCESS_LEVEL} \
        --template-config /configmaps/config.template.toml \
        --non-interactive

      retval=$?

      if [ ${retval} = 0 ]; then
        break
      elif [ ${i} = ${MAX_REGISTER_ATTEMPTS} ]; then
        exit 1
      fi

      sleep 5
    done

    exit 0

  check-live: |
    #!/bin/bash
    set -eou pipefail

    if ! /usr/bin/pgrep -f ".*register-the-runner"  > /dev/null && ! /usr/bin/pgrep -f "gitlab.*runner"  > /dev/null ; then
      exit 1
    fi

    name=$(awk -F'"' '/^  name = ".*"/ { print $2 }' "${HOME%/root}/.gitlab-runner/config.toml")
    url=$(awk -F'"' '/^  url = ".*"/ { print $2 }' "${HOME%/root}/.gitlab-runner/config.toml")

    gitlab-runner verify -n "$name" -u "$url" 2>&1 | grep -E "is alive|is valid"

  pre-entrypoint-script: |
---
# Source: gitlab/charts/gitlab/charts/gitaly/templates/configmap.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-gitaly
  namespace: {{ .Release.Namespace }}
  labels:
    app: gitaly
    chart: gitaly-7.6.0
    release: gitlab
    heritage: Helm
    
data:
  configure: |
    set -e
    mkdir -p /init-secrets/gitaly /init-secrets/shell
    cp -v -r -L /init-config/.gitlab_shell_secret  /init-secrets/shell/.gitlab_shell_secret
    cp -v -r -L /init-config/gitaly_token  /init-secrets/gitaly/gitaly_token
  config.toml.tpl: |
    # The directory where Gitaly's executables are stored
    bin_dir = "/usr/local/bin"

    # listen on a TCP socket. This is insecure (no authentication)
    listen_addr = "0.0.0.0:8075"

    # Directory where internal sockets reside
    # note: no value will result in a `/tmp/gitlab-internal-*` path
    # internal_socket_dir = "/home/git"

    # If metrics collection is enabled, inform gitaly about that
    prometheus_listen_addr = "0.0.0.0:9236"
    
    {% $storages := coll.Slice  "default" %}

    {% $index := index (.Env.HOSTNAME | strings.Split "-" | coll.Reverse) 0 | conv.ToInt64 %}
    {% if len $storages | lt $index %}
    [[storage]]
    name = "{% index $storages $index %}"
    path = "/home/git/repositories"
    {% else %}
    {% printf "Storage for node %d is not present in the storageNames array. Did you use kubectl to scale up? You need to solely use helm for this purpose." $index | fail %}
    {% end %}

    [logging]
    format = "json"
    dir = "/var/log/gitaly"

    [auth]
    token = {% file.Read "/etc/gitlab-secrets/gitaly/gitaly_token" | strings.TrimSpace | data.ToJSON %}

    [git]
    use_bundled_binaries = true
    ignore_gitconfig = true

    [gitlab-shell]
    # The directory where gitlab-shell is installed
    dir = "/srv/gitlab-shell"

    [gitlab]
    # location of shared secret for GitLab Shell / API interaction
    secret_file = "/etc/gitlab-secrets/shell/.gitlab_shell_secret"
    # URL of API
    url = "http://gitlab-webservice-default.{{ .Release.Namespace }}.svc:8181/"

    [gitlab.http-settings]
    # read_timeout = 300
    # user = someone
    # password = somepass
    # ca_file = /etc/ssl/cert.pem
    # ca_path = /etc/pki/tls/certs

    [hooks]
    # directory containing custom hooks
    custom_hooks_dir = "/home/git/custom_hooks"
---
# Source: gitlab/charts/gitlab/charts/gitlab-exporter/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-gitlab-exporter
  namespace: {{ .Release.Namespace }}
  labels:
    app: gitlab-exporter
    chart: gitlab-exporter-7.6.0
    release: gitlab
    heritage: Helm
    
data:
  gitlab-exporter.yml.erb: |
    server:
      name: webrick
      listen_address: 0.0.0.0
      listen_port: 9168
      

    probes:
      db_common: &db_common
        methods:
          - probe_db
        opts:
          connection_string: dbname=gitlabhq_production user=gitlab host=gitlab-postgresql.{{ .Release.Namespace }}.svc port=5432 password='<%= File.read('/etc/gitlab/postgres/psql-password-main').strip.gsub(/[\'\\]/) { |esc| '\\' + esc } %>'
      database:
        multiple: true
        ci_builds:
          class_name: Database::CiBuildsProber
          <<: *db_common
        tuple_stats:
          class_name: Database::TuplesProber
          <<: *db_common
        rows_count:
          class_name: Database::RowCountProber
          <<: *db_common
      database_bloat:
        class_name: Database::BloatProber
        <<: *db_common

      sidekiq: &sidekiq
        methods:
          - probe_queues
          - probe_workers
          - probe_retries
          - probe_stats
        opts:
          redis_url: redis://:<%= ERB::Util::url_encode(File.read("/etc/gitlab/redis/redis-password").strip) %>@gitlab-redis-master.{{ .Release.Namespace }}.svc:6379
          redis_enable_client: false
          probe_non_namespaced: true
          probe_namespaced: true

      ruby: &ruby
        methods:
          - probe_gc
        opts:
          quantiles: false

      metrics:
        multiple: true
        ruby:
          <<: *ruby
        sidekiq:
          <<: *sidekiq
        ci_builds:
          class_name: Database::CiBuildsProber
          <<: *db_common
        tuple_stats:
          class_name: Database::TuplesProber
          <<: *db_common
        rows_count:
          class_name: Database::RowCountProber
          <<: *db_common

  configure: |
    # BEGIN gitlab.scripts.configure.secrets
    set -e
    config_dir="/init-config"
    secret_dir="/init-secrets"
    # optional
    for secret in redis postgres gitlab-exporter ; do
      if [ -e "${config_dir}/${secret}" ]; then
        mkdir -p "${secret_dir}/${secret}"
        cp -f -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
      fi
    done
    # END gitlab.scripts.configure.secrets
# Leave this here - This line denotes end of block to the parser.
---
# Source: gitlab/charts/gitlab/charts/gitlab-shell/templates/configmap-sshd.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-gitlab-shell-sshd
  namespace: {{ .Release.Namespace }}
  labels:
    app: gitlab-shell
    chart: gitlab-shell-7.6.0
    release: gitlab
    heritage: Helm
    
data:
  sshd_config: |
    #	$OpenBSD: sshd_config,v 1.101 2017/03/14 07:19:07 djm Exp $

    # This is the sshd server system-wide configuration file.  See
    # sshd_config(5) for more information.

    # This sshd was compiled with PATH=/bin:/usr/bin:/sbin:/usr/sbin

    # The strategy used for options in the default sshd_config shipped with
    # OpenSSH is to specify options with their default value where
    # possible, but leave them commented.  Uncommented options override the
    # default value.

    Port 2222
    #AddressFamily any
    #ListenAddress 0.0.0.0
    #ListenAddress ::

    #HostKey /etc/ssh/ssh_host_rsa_key
    #HostKey /etc/ssh/ssh_host_dsa_key
    #HostKey /etc/ssh/ssh_host_ecdsa_key
    #HostKey /etc/ssh/ssh_host_ed25519_key

    # Ciphers and keying
    #RekeyLimit default none

    # Logging
    #SyslogFacility AUTH
    LogLevel ERROR

    # Authentication:

    PermitRootLogin no
    #StrictModes yes
    #MaxAuthTries 6
    #MaxSessions 10

    #PubkeyAuthentication yes

    #AuthorizedPrincipalsFile none

    # For this to work you will also need host keys in /etc/ssh/ssh_known_hosts
    #HostbasedAuthentication no
    # Change to yes if you don't trust ~/.ssh/known_hosts for
    # HostbasedAuthentication
    #IgnoreUserKnownHosts no
    # Don't read the user's ~/.rhosts and ~/.shosts files
    #IgnoreRhosts yes

    #PermitEmptyPasswords no

    # Change to no to disable s/key passwords
    #ChallengeResponseAuthentication yes

    # Kerberos options
    #KerberosAuthentication no
    #KerberosOrLocalPasswd yes
    #KerberosTicketCleanup yes
    #KerberosGetAFSToken no

    # GSSAPI options
    #GSSAPIAuthentication no
    #GSSAPICleanupCredentials yes

    # Set this to 'yes' to enable PAM authentication, account processing,
    # and session processing. If this is enabled, PAM authentication will
    # be allowed through the ChallengeResponseAuthentication and
    # PasswordAuthentication.  Depending on your PAM configuration,
    # PAM authentication via ChallengeResponseAuthentication may bypass
    # the setting of "PermitRootLogin without-password".
    # If you just want the PAM account and session checks to run without
    # PAM authentication, then enable this but set PasswordAuthentication
    # and ChallengeResponseAuthentication to 'no'.
    #UsePAM no

    #AllowAgentForwarding yes
    #AllowTcpForwarding yes
    #GatewayPorts no
    #X11Forwarding no
    #X11DisplayOffset 10
    #X11UseLocalhost yes
    #PermitTTY yes
    #PrintMotd yes
    #PrintLastLog yes
    #TCPKeepAlive yes
    #UseLogin no
    #PermitUserEnvironment no
    #Compression delayed
    ClientAliveInterval 0
    #ClientAliveCountMax 3
    #UseDNS no
    PidFile /srv/sshd/sshd.pid
    #PermitTunnel no
    #ChrootDirectory none
    #VersionAddendum none

    # no default banner path
    #Banner none

    # override default of no subsystems
    # Subsystem	sftp	/usr/lib/ssh/sftp-server

    # the following are HPN related configuration options
    # tcp receive buffer polling. disable in non autotuning kernels
    #TcpRcvBufPoll yes

    # disable hpn performance boosts
    #HPNDisabled no

    # buffer size for hpn to non-hpn connections
    #HPNBufferSize 2048


    # Example of overriding settings on a per-user basis
    #Match User anoncvs
    #	X11Forwarding no
    #	AllowTcpForwarding no
    #	PermitTTY no
    #	ForceCommand cvs server

    # The default is to check both .ssh/authorized_keys and .ssh/authorized_keys2
    # but this is overridden so installations will only check .ssh/authorized_keys
    AuthorizedKeysFile	.ssh/authorized_keys

    AuthorizedKeysCommand /authorized_keys %u %k
    AuthorizedKeysCommandUser git

    PasswordAuthentication no

    AllowUsers git

    # Enable the use of Git protcol v2
    AcceptEnv GIT_PROTOCOL

    # Hard disable all forwarding
    DisableForwarding yes

    # Specifies the maximum number of concurrent unauthenticated connections to the SSH daemon.
    # See `man sshd_config(5)`
    
    MaxStartups 10:30:100
    

    # Specifies amount of time athat the server will disconnect after if the user has not successfully logged in
    LoginGraceTime 60
# Leave this here - This line denotes end of block to the parser.
---
# Source: gitlab/charts/gitlab/charts/gitlab-shell/templates/configmap.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-gitlab-shell
  namespace: {{ .Release.Namespace }}
  labels:
    app: gitlab-shell
    chart: gitlab-shell-7.6.0
    release: gitlab
    heritage: Helm
    
data:
  configure: |
    # BEGIN gitlab.scripts.configure.secrets
    set -e
    config_dir="/init-config"
    secret_dir="/init-secrets"
    # required
    for secret in shell ; do
      mkdir -p "${secret_dir}/${secret}"
      cp -f -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
    done
    # END gitlab.scripts.configure.secrets
    mkdir -p /${secret_dir}/ssh
    cp -v -r -L /${config_dir}/ssh_host_* /${secret_dir}/ssh/
    chmod 0400 /${secret_dir}/ssh/ssh_host_*
  config.yml.tpl: |
    # GitLab user. git by default
    user: git

    # Url to gitlab instance. Used for api calls. Should end with a slash.
    gitlab_url: "http://gitlab-webservice-default.{{ .Release.Namespace }}.svc:8181/"

    secret_file: /etc/gitlab-secrets/shell/.gitlab_shell_secret

    # File used as authorized_keys for gitlab user
    auth_file: "/home/git/.ssh/authorized_keys"

    # Log file.
    # Default is gitlab-shell.log in the root directory.
    log_file: "/var/log/gitlab-shell/gitlab-shell.log"

    log_format: json

    # Audit usernames.
    # Set to true to see real usernames in the logs instead of key ids, which is easier to follow, but
    # incurs an extra API call on every gitlab-shell command.
    audit_usernames: false

    
  krb5.conf: |
    
# Leave this here - This line denotes end of block to the parser.
---
# Source: gitlab/charts/gitlab/charts/gitlab-shell/templates/nginx-tcp-configmap.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-nginx-ingress-tcp
  namespace: {{ .Release.Namespace }}
  labels:
    app: gitlab-shell
    chart: gitlab-shell-7.6.0
    release: gitlab
    heritage: Helm
    
data:
  "22": "{{ .Release.Namespace }}/gitlab-gitlab-shell:22::"
---
# Source: gitlab/charts/gitlab/charts/kas/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-kas
  namespace: {{ .Release.Namespace }}
  labels:
    app: kas
    chart: kas-7.6.0
    release: gitlab
    heritage: Helm
    
data:
  # See https://gitlab.com/gitlab-org/cluster-integration/gitlab-agent/-/blob/master/pkg/kascfg/config_example.yaml
  config.yaml: |
    agent:
      kubernetes_api:
        listen:
          address: :8154
        url_path_prefix: /k8s-proxy
      listen:
        address: :8150
        websocket: true
    api:
      listen:
        address: :8153
        authentication_secret_file: /etc/kas/.gitlab_kas_secret
    gitlab:
      address: http://gitlab-webservice-default.{{ .Release.Namespace }}.svc:8181
      authentication_secret_file: /etc/kas/.gitlab_kas_secret
      external_url: https://{{ $gitlabDomain }}
    observability:
      listen:
        address: :8151
      liveness_probe:
        url_path: /liveness
      readiness_probe:
        url_path: /readiness
    private_api:
      listen:
        address: :8155
        authentication_secret_file: /etc/kas/.gitlab_kas_private_api_secret
    redis:
      password_file: /etc/kas/redis/redis-password
      server:
        address: gitlab-redis-master.{{ .Release.Namespace }}.svc:6379
---
# Source: gitlab/charts/gitlab/charts/migrations/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-migrations
  namespace: {{ .Release.Namespace }}
  labels:
    app: migrations
    chart: migrations-7.6.0
    release: gitlab
    heritage: Helm
    
data:
  pages_redirect_uri: https://{{ $projectspagesDomain }}/auth
  installation_type: |
    gitlab-helm-chart
  database.yml.erb: |
    
    production:
      main:
        adapter: postgresql
        encoding: unicode
        database: gitlabhq_production
        username: gitlab
        password: <%= File.read('/etc/gitlab/postgres/psql-password-main').strip.to_json %>
        host: "gitlab-postgresql.{{ .Release.Namespace }}.svc"
        port: 5432
        connect_timeout: 
        keepalives: 
        keepalives_idle: 
        keepalives_interval: 
        keepalives_count: 
        tcp_user_timeout: 
        application_name: 
        prepared_statements: false
        database_tasks: true
        
        
      ci:
        adapter: postgresql
        encoding: unicode
        database: gitlabhq_production
        username: gitlab
        password: <%= File.read('/etc/gitlab/postgres/psql-password-ci').strip.to_json %>
        host: "gitlab-postgresql.{{ .Release.Namespace }}.svc"
        port: 5432
        connect_timeout: 
        keepalives: 
        keepalives_idle: 
        keepalives_interval: 
        keepalives_count: 
        tcp_user_timeout: 
        application_name: 
        prepared_statements: false
        database_tasks: false
        
        
  resque.yml.erb: |
    production:
      url: redis://:<%= ERB::Util::url_encode(File.read("/etc/gitlab/redis/redis-password").strip) %>@gitlab-redis-master.{{ .Release.Namespace }}.svc:6379
      
      id:
  
  
  
  
  cable.yml.erb: |
    production:
      url: redis://:<%= ERB::Util::url_encode(File.read("/etc/gitlab/redis/redis-password").strip) %>@gitlab-redis-master.{{ .Release.Namespace }}.svc:6379
      
      id:
      adapter: redis
  
  
  
  
  
  
  
  gitlab.yml.erb: |
    production: &base
      gitlab:
        host: {{ $gitlabDomain }}
      gitaly:
        client_path: /home/git/gitaly/bin
        token: <%= File.read('/etc/gitlab/gitaly/gitaly_token').strip.to_json %>
      repositories:
        storages: # You must have at least a `default` storage path.
          default:
            path: /var/opt/gitlab/repo
            gitaly_address: tcp://gitlab-gitaly-0.gitlab-gitaly.{{ .Release.Namespace }}.svc:8075
          
      
      sidekiq:
        log_format: json
      
  configure: |
    # BEGIN gitlab.scripts.configure.secrets
    set -e
    config_dir="/init-config"
    secret_dir="/init-secrets"
    # required
    for secret in rails-secrets migrations gitaly ; do
      mkdir -p "${secret_dir}/${secret}"
      cp -f -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
    done
    # optional
    for secret in redis minio objectstorage postgres ldap duo omniauth smtp kas pages oauth-secrets mailroom gitlab-exporter microsoft_graph_mailer suggested_reviewers zoekt clickhouse ; do
      if [ -e "${config_dir}/${secret}" ]; then
        mkdir -p "${secret_dir}/${secret}"
        cp -f -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
      fi
    done
    # END gitlab.scripts.configure.secrets
    
    
# Leave this here - This line denotes end of block to the parser.
---
# Source: gitlab/charts/gitlab/charts/sidekiq/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-sidekiq
  namespace: {{ .Release.Namespace }}
  labels:
    app: sidekiq
    chart: sidekiq-7.6.0
    release: gitlab
    heritage: Helm
    
data:
  installation_type: |
    gitlab-helm-chart
  database.yml.erb: |
    
    production:
      main:
        adapter: postgresql
        encoding: unicode
        database: gitlabhq_production
        username: gitlab
        password: <%= File.read('/etc/gitlab/postgres/psql-password-main').strip.to_json %>
        host: "gitlab-postgresql.{{ .Release.Namespace }}.svc"
        port: 5432
        connect_timeout: 
        keepalives: 
        keepalives_idle: 
        keepalives_interval: 
        keepalives_count: 
        tcp_user_timeout: 
        application_name: 
        prepared_statements: false
        database_tasks: true
        
        
      ci:
        adapter: postgresql
        encoding: unicode
        database: gitlabhq_production
        username: gitlab
        password: <%= File.read('/etc/gitlab/postgres/psql-password-ci').strip.to_json %>
        host: "gitlab-postgresql.{{ .Release.Namespace }}.svc"
        port: 5432
        connect_timeout: 
        keepalives: 
        keepalives_idle: 
        keepalives_interval: 
        keepalives_count: 
        tcp_user_timeout: 
        application_name: 
        prepared_statements: false
        database_tasks: false
        
        
  krb5.conf: |
    
  smtp_settings.rb: |
    
  resque.yml.erb: |
    production:
      url: redis://:<%= ERB::Util::url_encode(File.read("/etc/gitlab/redis/redis-password").strip) %>@gitlab-redis-master.{{ .Release.Namespace }}.svc:6379
      
      id:
  
  
  
  
  cable.yml.erb: |
    production:
      url: redis://:<%= ERB::Util::url_encode(File.read("/etc/gitlab/redis/redis-password").strip) %>@gitlab-redis-master.{{ .Release.Namespace }}.svc:6379
      
      id:
      adapter: redis
  
  
  
  
  
  
  
  gitlab.yml.erb: |
    production: &base
      gitlab:
        host: {{ $gitlabDomain }}
        https: true
        max_request_duration_seconds: 57
        impersonation_enabled: 
        application_settings_cache_seconds: 60
        usage_ping_enabled: true
        seat_link_enabled: true
        username_changing_enabled: true
        issue_closing_pattern: 
        default_theme: 
        default_projects_features:
          issues: true
          merge_requests: true
          wiki: true
          snippets: true
          builds: true
          container_registry: true
        graphql_timeout: 
        webhook_timeout: 
        trusted_proxies:
        time_zone: "UTC"        
        email_from: "gitlab@{{ .Release.Namespace }}.snowinning.com"
        email_display_name: "GitLab"
        email_reply_to: "noreply@{{ .Release.Namespace }}.snowinning.com"
        email_subject_suffix: ""
      
      gravatar:
        plain_url: 
        ssl_url: 
      extra:
        
        
        
        
        
        
      artifacts:
        enabled: true
        object_store:
          enabled: true
          remote_directory: gitlab-artifacts
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            host: {{ $minioDomain }}
            endpoint: http://gitlab-minio-svc.{{ .Release.Namespace }}.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
      lfs:
        enabled: true
        object_store:
          enabled: true
          remote_directory: git-lfs
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            host: {{ $minioDomain }}
            endpoint: http://gitlab-minio-svc.{{ .Release.Namespace }}.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
      uploads:
        enabled: true
        object_store:
          enabled: true
          remote_directory: gitlab-uploads
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            host: {{ $minioDomain }}
            endpoint: http://gitlab-minio-svc.{{ .Release.Namespace }}.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
      packages:
        enabled: true
        object_store:
          enabled: true
          remote_directory: gitlab-packages
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            host: {{ $minioDomain }}
            endpoint: http://gitlab-minio-svc.{{ .Release.Namespace }}.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
      external_diffs:
        enabled: false
        when: 
        object_store:
          enabled: false
          remote_directory: gitlab-mr-diffs
          proxy_download: true
      terraform_state:
        enabled: false
        object_store:
          enabled: false
          remote_directory: gitlab-terraform-state
          proxy_download: true
      ci_secure_files:
        enabled: false
        object_store:
          enabled: false
          remote_directory: gitlab-ci-secure-files
          proxy_download: true
      dependency_proxy:
        enabled: false
        object_store:
          enabled: false
          remote_directory: gitlab-dependency-proxy
          proxy_download: true
      
      sentry:
        enabled: false
        dsn: 
        clientside_dsn: 
        environment: 
      
      sidekiq:
        log_format: json
      pages:
        enabled: false
        access_control: false
        artifacts_server: true
        path: /srv/gitlab/shared/pages
        host: {{ $pagesDomain }}
        port: 443
        https: true
        secret_file: /etc/gitlab/pages/secret
        external_http: false
        external_https: false
        object_store:
          enabled: true
          remote_directory: gitlab-pages
          connection:
            provider: AWS
            region: us-east-1
            host: {{ $minioDomain }}
            endpoint: http://gitlab-minio-svc.{{ .Release.Namespace }}.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
        local_store:
          enabled: false
          path: 
      mattermost:
        enabled: false
      ## Registry Integration
      registry:
        enabled: true
        host: {{ $registryDomain }}
        api_url: http://gitlab-registry.{{ .Release.Namespace }}.svc:5000
        key: /etc/gitlab/registry/gitlab-registry.key
        issuer: gitlab-issuer
        notification_secret: <%= YAML.load_file("/etc/gitlab/registry/notificationSecret").flatten.first %>
      gitlab_ci:
      ldap:
        enabled: false
      
      omniauth:
        enabled: false
        sync_profile_from_provider: []
        sync_profile_attributes: ["email"]
        allow_single_sign_on: ["saml"]
        block_auto_created_users: true
        auto_link_ldap_user: false
        auto_link_saml_user: false
        external_providers: []
      kerberos:
        enabled: false
        keytab: /etc/krb5.keytab
        use_dedicated_port: false
        port: 8443
        https: true
        simple_ldap_linking_allowed_realms: []
      
      duo_auth:
        enabled: false
        hostname: 
        integration_key: 
        secret_key: 
      
      duo_auth:
        enabled: false
        hostname: 
        integration_key: 
        secret_key: 
      shared:
      gitaly:
        client_path: /home/git/gitaly/bin
        token: <%= File.read('/etc/gitlab/gitaly/gitaly_token').strip.to_json %>
      repositories:
        storages: # You must have at least a `default` storage path.
          default:
            path: /var/opt/gitlab/repo
            gitaly_address: tcp://gitlab-gitaly-0.gitlab-gitaly.{{ .Release.Namespace }}.svc:8075
          
      backup:
        path: "tmp/backups"   # Relative paths are relative to Rails.root (default: tmp/backups/)
      gitlab_kas:
        enabled: true
        secret_file: /etc/gitlab/kas/.gitlab_kas_secret
        external_url: "wss://{{ $kasDomain }}"
        internal_url: "grpc://gitlab-kas.{{ .Release.Namespace }}.svc:8153"
      suggested_reviewers:
        secret_file: /etc/gitlab/suggested_reviewers/.gitlab_suggested_reviewers_secret
      # Zoekt secrets are present, load them.
      zoekt:
        username_file: /etc/gitlab/zoekt/.gitlab_zoekt_username
        password_file: /etc/gitlab/zoekt/.gitlab_zoekt_password
      gitlab_shell:
        path: /home/git/gitlab-shell/
        hooks_path: /home/git/gitlab-shell/hooks/
        upload_pack: true
        receive_pack: true
        ssh_port: 22
      workhorse:
      git:
        bin_path: /usr/bin/git
      webpack:
      monitoring:
        ip_whitelist:
          - 127.0.0.0/8
        sidekiq_exporter:
          enabled: true
          address: 0.0.0.0
          port: 3807
          log_enabled: false
        sidekiq_health_checks:
          enabled: true
          address: 0.0.0.0
          port: 3808
  configure: |
    # BEGIN gitlab.scripts.configure.secrets
    set -e
    config_dir="/init-config"
    secret_dir="/init-secrets"
    # required
    for secret in gitaly registry rails-secrets ; do
      mkdir -p "${secret_dir}/${secret}"
      cp -f -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
    done
    # optional
    for secret in redis minio objectstorage postgres ldap duo omniauth smtp kas pages oauth-secrets mailroom gitlab-exporter microsoft_graph_mailer suggested_reviewers zoekt clickhouse ; do
      if [ -e "${config_dir}/${secret}" ]; then
        mkdir -p "${secret_dir}/${secret}"
        cp -f -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
      fi
    done
    # END gitlab.scripts.configure.secrets
    
    
# Leave this here - This line denotes end of block to the parser.
---
# Source: gitlab/charts/gitlab/charts/toolbox/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-toolbox
  namespace: {{ .Release.Namespace }}
  labels:
    app: toolbox
    chart: toolbox-7.6.0
    release: gitlab
    heritage: Helm
    
data:
  database.yml.erb: |
    
    production:
      main:
        adapter: postgresql
        encoding: unicode
        database: gitlabhq_production
        username: gitlab
        password: <%= File.read('/etc/gitlab/postgres/psql-password-main').strip.to_json %>
        host: "gitlab-postgresql.{{ .Release.Namespace }}.svc"
        port: 5432
        connect_timeout: 
        keepalives: 
        keepalives_idle: 
        keepalives_interval: 
        keepalives_count: 
        tcp_user_timeout: 
        application_name: 
        prepared_statements: false
        database_tasks: true
        
        
      ci:
        adapter: postgresql
        encoding: unicode
        database: gitlabhq_production
        username: gitlab
        password: <%= File.read('/etc/gitlab/postgres/psql-password-ci').strip.to_json %>
        host: "gitlab-postgresql.{{ .Release.Namespace }}.svc"
        port: 5432
        connect_timeout: 
        keepalives: 
        keepalives_idle: 
        keepalives_interval: 
        keepalives_count: 
        tcp_user_timeout: 
        application_name: 
        prepared_statements: false
        database_tasks: false
        
        
  krb5.conf: |
    
  smtp_settings.rb: |
    
  resque.yml.erb: |
    production:
      url: redis://:<%= ERB::Util::url_encode(File.read("/etc/gitlab/redis/redis-password").strip) %>@gitlab-redis-master.{{ .Release.Namespace }}.svc:6379
      
      id:
  
  
  
  
  cable.yml.erb: |
    production:
      url: redis://:<%= ERB::Util::url_encode(File.read("/etc/gitlab/redis/redis-password").strip) %>@gitlab-redis-master.{{ .Release.Namespace }}.svc:6379
      
      id:
      adapter: redis
  
  
  
  
  
  
  
  gitlab.yml.erb: |
    production: &base
      gitlab:
        host: {{ $gitlabDomain }}
        https: true
        max_request_duration_seconds: 57
        impersonation_enabled: 
        application_settings_cache_seconds: 60
        usage_ping_enabled: true
        seat_link_enabled: true
        username_changing_enabled: true
        issue_closing_pattern: 
        default_theme: 
        default_projects_features:
          issues: true
          merge_requests: true
          wiki: true
          snippets: true
          builds: true
          container_registry: true
        graphql_timeout: 
        webhook_timeout: 
        trusted_proxies:
        time_zone: "UTC"        
        email_from: "gitlab@{{ .Release.Namespace }}.snowinning.com"
        email_display_name: "GitLab"
        email_reply_to: "noreply@{{ .Release.Namespace }}.snowinning.com"
        email_subject_suffix: ""
      
      artifacts:
        enabled: true
        object_store:
          enabled: true
          remote_directory: gitlab-artifacts
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            host: {{ $minioDomain }}
            endpoint: http://gitlab-minio-svc.{{ .Release.Namespace }}.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
      lfs:
        enabled: true
        object_store:
          enabled: true
          remote_directory: git-lfs
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            host: {{ $minioDomain }}
            endpoint: http://gitlab-minio-svc.{{ .Release.Namespace }}.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
      uploads:
        enabled: true
        object_store:
          enabled: true
          remote_directory: gitlab-uploads
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            host: {{ $minioDomain }}
            endpoint: http://gitlab-minio-svc.{{ .Release.Namespace }}.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
      packages:
        enabled: true
        object_store:
          enabled: true
          remote_directory: gitlab-packages
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            host: {{ $minioDomain }}
            endpoint: http://gitlab-minio-svc.{{ .Release.Namespace }}.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
      external_diffs:
        enabled: false
        when: 
        object_store:
          enabled: false
          remote_directory: gitlab-mr-diffs
          proxy_download: true
      terraform_state:
        enabled: false
        object_store:
          enabled: false
          remote_directory: gitlab-terraform-state
          proxy_download: true
      ci_secure_files:
        enabled: false
        object_store:
          enabled: false
          remote_directory: gitlab-ci-secure-files
          proxy_download: true
      dependency_proxy:
        enabled: false
        object_store:
          enabled: false
          remote_directory: gitlab-dependency-proxy
          proxy_download: true
      
      sidekiq:
        log_format: json
      
      pages:
        enabled: false
        access_control: false
        artifacts_server: true
        path: /srv/gitlab/shared/pages
        host: {{ $pagesDomain }}
        port: 443
        https: true
        secret_file: /etc/gitlab/pages/secret
        external_http: false
        external_https: false
        object_store:
          enabled: true
          remote_directory: gitlab-pages
          connection:
            provider: AWS
            region: us-east-1
            host: {{ $minioDomain }}
            endpoint: http://gitlab-minio-svc.{{ .Release.Namespace }}.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
        local_store:
          enabled: false
          path: 
      mattermost:
        enabled: false
      ## Registry Integration
      registry:
        enabled: true
        host: {{ $registryDomain }}
        api_url: http://gitlab-registry.{{ .Release.Namespace }}.svc:5000
        key: /etc/gitlab/registry/gitlab-registry.key
        issuer: gitlab-issuer
        notification_secret: <%= YAML.load_file("/etc/gitlab/registry/notificationSecret").flatten.first %>
      gitlab_ci:
      ldap:
        enabled: false
      
      omniauth:
        enabled: false
        sync_profile_from_provider: []
        sync_profile_attributes: ["email"]
        allow_single_sign_on: ["saml"]
        block_auto_created_users: true
        auto_link_ldap_user: false
        auto_link_saml_user: false
        external_providers: []
      kerberos:
        enabled: false
        keytab: /etc/krb5.keytab
        use_dedicated_port: false
        port: 8443
        https: true
        simple_ldap_linking_allowed_realms: []
      
      duo_auth:
        enabled: false
        hostname: 
        integration_key: 
        secret_key: 
      shared:
      gitaly:
        client_path: /home/git/gitaly/bin
        token: <%= File.read('/etc/gitlab/gitaly/gitaly_token').strip.to_json %>
      repositories:
        storages: # You must have at least a `default` storage path.
          default:
            path: /var/opt/gitlab/repo
            gitaly_address: tcp://gitlab-gitaly-0.gitlab-gitaly.{{ .Release.Namespace }}.svc:8075
          
      backup:
        path: "tmp/backups"   # Relative paths are relative to Rails.root (default: tmp/backups/)
      gitlab_kas:
        enabled: true
        secret_file: /etc/gitlab/kas/.gitlab_kas_secret
        external_url: "wss://{{ $kasDomain }}"
        internal_url: "grpc://gitlab-kas.{{ .Release.Namespace }}.svc:8153"
      suggested_reviewers:
        secret_file: /etc/gitlab/suggested_reviewers/.gitlab_suggested_reviewers_secret
      # Zoekt secrets are present, load them.
      zoekt:
        username_file: /etc/gitlab/zoekt/.gitlab_zoekt_username
        password_file: /etc/gitlab/zoekt/.gitlab_zoekt_password
      gitlab_shell:
        path: /home/git/gitlab-shell/
        hooks_path: /home/git/gitlab-shell/hooks/
        upload_pack: true
        receive_pack: true
        ssh_port: 22
        secret_file: /etc/gitlab/shell/.gitlab_shell_secret
      workhorse:
      git:
        bin_path: /usr/bin/git
      webpack:
      monitoring:
        ip_whitelist:
          - 127.0.0.0/8
        sidekiq_exporter:
      extra:
  configure: |
    # BEGIN gitlab.scripts.configure.secrets
    set -e
    config_dir="/init-config"
    secret_dir="/init-secrets"
    # required
    for secret in shell gitaly registry rails-secrets ; do
      mkdir -p "${secret_dir}/${secret}"
      cp -f -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
    done
    # optional
    for secret in redis minio objectstorage postgres ldap duo omniauth smtp kas pages oauth-secrets mailroom gitlab-exporter microsoft_graph_mailer suggested_reviewers zoekt clickhouse ; do
      if [ -e "${config_dir}/${secret}" ]; then
        mkdir -p "${secret_dir}/${secret}"
        cp -f -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
      fi
    done
    # END gitlab.scripts.configure.secrets
    
    
    if [ ! -f "/${secret_dir}/objectstorage/.s3cfg" ]; then
    cat <<EOF > "/${secret_dir}/.s3cfg"
    [default]
    access_key = $(cat /init-secrets/minio/accesskey)
    secret_key = $(cat /init-secrets/minio/secretkey)
    bucket_location = us-east-1
    host_base = {{ $minioDomain }}
    host_bucket = {{ $minioDomain }}/%(bucket)
    default_mime_type = binary/octet-stream
    enable_multipart = True
    multipart_max_chunks = 10000
    multipart_chunk_size_mb = 128
    recursive = True
    recv_chunk = 65536
    send_chunk = 65536
    server_side_encryption = False
    signature_v2 = True
    socket_timeout = 300
    use_mime_magic = False
    verbosity = WARNING
    website_endpoint = https://{{ $minioDomain }}
    EOF
    else
      mv "/${secret_dir}/objectstorage/.s3cfg" "/${secret_dir}/.s3cfg"
    fi
  configure-gsutil: |
    # The following script is used to configure gsutil when creating backups
    # It provides inputs to the `gsutil config -e` prompt as follows:
    # 1) Path to service account JSON key file
    # 2) Do not set permissions for key file
    # 3) GCP Project ID
    # 4) Decline anonymous usage statistics
    printf "$GOOGLE_APPLICATION_CREDENTIALS\nN\n\nN\n" | gsutil config -e
---
# Source: gitlab/charts/gitlab/charts/webservice/templates/configmap.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-webservice
  namespace: {{ .Release.Namespace }}
  labels:
    app: webservice
    chart: webservice-7.6.0
    release: gitlab
    heritage: Helm
    
data:
  installation_type: |
    gitlab-helm-chart
  database.yml.erb: |
    
    production:
      main:
        adapter: postgresql
        encoding: unicode
        database: gitlabhq_production
        username: gitlab
        password: <%= File.read('/etc/gitlab/postgres/psql-password-main').strip.to_json %>
        host: "gitlab-postgresql.{{ .Release.Namespace }}.svc"
        port: 5432
        connect_timeout: 
        keepalives: 
        keepalives_idle: 
        keepalives_interval: 
        keepalives_count: 
        tcp_user_timeout: 
        application_name: 
        prepared_statements: false
        database_tasks: true
        
        
      ci:
        adapter: postgresql
        encoding: unicode
        database: gitlabhq_production
        username: gitlab
        password: <%= File.read('/etc/gitlab/postgres/psql-password-ci').strip.to_json %>
        host: "gitlab-postgresql.{{ .Release.Namespace }}.svc"
        port: 5432
        connect_timeout: 
        keepalives: 
        keepalives_idle: 
        keepalives_interval: 
        keepalives_count: 
        tcp_user_timeout: 
        application_name: 
        prepared_statements: false
        database_tasks: false
        
        
  krb5.conf: |
    
  smtp_settings.rb: |
    
  resque.yml.erb: |
    production:
      url: redis://:<%= ERB::Util::url_encode(File.read("/etc/gitlab/redis/redis-password").strip) %>@gitlab-redis-master.{{ .Release.Namespace }}.svc:6379
      
      id:
  
  
  
  
  cable.yml.erb: |
    production:
      url: redis://:<%= ERB::Util::url_encode(File.read("/etc/gitlab/redis/redis-password").strip) %>@gitlab-redis-master.{{ .Release.Namespace }}.svc:6379
      
      id:
      adapter: redis
  
  
  
  
  
  
  
  gitlab.yml.erb: |
    production: &base
      gitlab:
        host: {{ $gitlabDomain }}
        https: true
        max_request_duration_seconds: 57
        impersonation_enabled: 
        application_settings_cache_seconds: 60
        usage_ping_enabled: true
        seat_link_enabled: true
        username_changing_enabled: true
        issue_closing_pattern: 
        default_theme: 
        default_projects_features:
          issues: true
          merge_requests: true
          wiki: true
          snippets: true
          builds: true
          container_registry: true
        graphql_timeout: 
        webhook_timeout: 
        trusted_proxies:
        time_zone: "UTC"        
        email_from: "gitlab@{{ .Release.Namespace }}.snowinning.com"
        email_display_name: "GitLab"
        email_reply_to: "noreply@{{ .Release.Namespace }}.snowinning.com"
        email_subject_suffix: ""
      
      gravatar:
        plain_url: 
        ssl_url: 
      extra:
        
        
        
        
        
        
      artifacts:
        enabled: true
        object_store:
          enabled: true
          remote_directory: gitlab-artifacts
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            host: {{ $minioDomain }}
            endpoint: http://gitlab-minio-svc.{{ .Release.Namespace }}.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
      lfs:
        enabled: true
        object_store:
          enabled: true
          remote_directory: git-lfs
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            host: {{ $minioDomain }}
            endpoint: http://gitlab-minio-svc.{{ .Release.Namespace }}.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
      uploads:
        enabled: true
        object_store:
          enabled: true
          remote_directory: gitlab-uploads
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            host: {{ $minioDomain }}
            endpoint: http://gitlab-minio-svc.{{ .Release.Namespace }}.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
      packages:
        enabled: true
        object_store:
          enabled: true
          remote_directory: gitlab-packages
          proxy_download: true
          connection:
            provider: AWS
            region: us-east-1
            host: {{ $minioDomain }}
            endpoint: http://gitlab-minio-svc.{{ .Release.Namespace }}.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
      external_diffs:
        enabled: false
        when: 
        object_store:
          enabled: false
          remote_directory: gitlab-mr-diffs
          proxy_download: true
      terraform_state:
        enabled: false
        object_store:
          enabled: false
          remote_directory: gitlab-terraform-state
          proxy_download: true
      ci_secure_files:
        enabled: false
        object_store:
          enabled: false
          remote_directory: gitlab-ci-secure-files
          proxy_download: true
      dependency_proxy:
        enabled: false
        object_store:
          enabled: false
          remote_directory: gitlab-dependency-proxy
          proxy_download: true
      
      sentry:
        enabled: false
        dsn: 
        clientside_dsn: 
        environment: 
      gitlab_docs:
        enabled: false
        host: ""
      
      sidekiq:
        log_format: json
      pages:
        enabled: false
        access_control: false
        artifacts_server: true
        path: /srv/gitlab/shared/pages
        host: {{ $pagesDomain }}
        port: 443
        https: true
        secret_file: /etc/gitlab/pages/secret
        external_http: false
        external_https: false
        object_store:
          enabled: true
          remote_directory: gitlab-pages
          connection:
            provider: AWS
            region: us-east-1
            host: {{ $minioDomain }}
            endpoint: http://gitlab-minio-svc.{{ .Release.Namespace }}.svc:9000
            path_style: true
            aws_access_key_id: <%= File.read('/etc/gitlab/minio/accesskey').strip.to_json %>
            aws_secret_access_key: <%= File.read('/etc/gitlab/minio/secretkey').strip.to_json %>
        local_store:
          enabled: false
          path: 
      mattermost:
        enabled: false
      gitlab_ci:
      ldap:
        enabled: false
      
      omniauth:
        enabled: false
        sync_profile_from_provider: []
        sync_profile_attributes: ["email"]
        allow_single_sign_on: ["saml"]
        block_auto_created_users: true
        auto_link_ldap_user: false
        auto_link_saml_user: false
        external_providers: []
      kerberos:
        enabled: false
        keytab: /etc/krb5.keytab
        use_dedicated_port: false
        port: 8443
        https: true
        simple_ldap_linking_allowed_realms: []
      
      duo_auth:
        enabled: false
        hostname: 
        integration_key: 
        secret_key: 
      shared:
      gitaly:
        client_path: /home/git/gitaly/bin
        token: <%= File.read('/etc/gitlab/gitaly/gitaly_token').strip.to_json %>
      repositories:
        storages: # You must have at least a `default` storage path.
          default:
            path: /var/opt/gitlab/repo
            gitaly_address: tcp://gitlab-gitaly-0.gitlab-gitaly.{{ .Release.Namespace }}.svc:8075
          
      backup:
        path: "tmp/backups"   # Relative paths are relative to Rails.root (default: tmp/backups/)
      gitlab_kas:
        enabled: true
        secret_file: /etc/gitlab/kas/.gitlab_kas_secret
        external_url: "wss://{{ $kasDomain }}"
        internal_url: "grpc://gitlab-kas.{{ .Release.Namespace }}.svc:8153"
      suggested_reviewers:
        secret_file: /etc/gitlab/suggested_reviewers/.gitlab_suggested_reviewers_secret
      # Zoekt secrets are present, load them.
      zoekt:
        username_file: /etc/gitlab/zoekt/.gitlab_zoekt_username
        password_file: /etc/gitlab/zoekt/.gitlab_zoekt_password
      gitlab_shell:
        path: /home/git/gitlab-shell/
        hooks_path: /home/git/gitlab-shell/hooks/
        upload_pack: true
        receive_pack: true
        ssh_port: 22
        secret_file: /etc/gitlab/shell/.gitlab_shell_secret
      workhorse:
        secret_file: /etc/gitlab/gitlab-workhorse/secret
      git:
        bin_path: /usr/bin/git
      webpack:
      monitoring:
        ip_whitelist:
          - 0.0.0.0/0
        web_exporter:
          enabled: true
          address: 0.0.0.0
          port: 8083
        sidekiq_exporter:
      shutdown:
        blackout_seconds: <%= ENV["SHUTDOWN_BLACKOUT_SECONDS"] %>
      rack_attack:
        git_basic_auth:
      ## Registry Integration
      registry:
        enabled: true
        host: {{ $registryDomain }}
        api_url: http://gitlab-registry.{{ .Release.Namespace }}.svc:5000
        key: /etc/gitlab/registry/gitlab-registry.key
        issuer: gitlab-issuer
        notification_secret: <%= YAML.load_file("/etc/gitlab/registry/notificationSecret").flatten.first %>
      smartcard:
        enabled: false
        ca_file: '/etc/gitlab/rails-secrets/smartcard-ca.crt'
        client_certificate_required_host: {{ $smartcardDomain }}
        client_certificate_required_port: 443
        san_extensions: false
        required_for_git_access: false
  configure: |
    # BEGIN gitlab.scripts.configure.secrets
    set -e
    config_dir="/init-config"
    secret_dir="/init-secrets"
    # required
    for secret in shell gitaly registry rails-secrets gitlab-workhorse ; do
      mkdir -p "${secret_dir}/${secret}"
      cp -f -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
    done
    # optional
    for secret in redis minio objectstorage postgres ldap duo omniauth smtp kas pages oauth-secrets mailroom gitlab-exporter microsoft_graph_mailer suggested_reviewers zoekt clickhouse ; do
      if [ -e "${config_dir}/${secret}" ]; then
        mkdir -p "${secret_dir}/${secret}"
        cp -f -v -r -L "${config_dir}/${secret}/." "${secret_dir}/${secret}/"
      fi
    done
    # END gitlab.scripts.configure.secrets
---
# Source: gitlab/charts/gitlab/charts/webservice/templates/configmap.yml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-workhorse-default
  namespace: {{ .Release.Namespace }}
  labels:
    app: webservice
    chart: webservice-7.6.0
    release: gitlab
    heritage: Helm
    
data:
  installation_type: |
    gitlab-helm-chart
  workhorse-config.toml.tpl: |
    shutdown_timeout = "61s"
    [redis]
    URL = "redis://gitlab-redis-master.{{ .Release.Namespace }}.svc:6379"
    Password = {% file.Read "/etc/gitlab/redis/redis-password" | strings.TrimSpace | data.ToJSON %}
    {%- $supported_providers := slice "AWS" "AzureRM" "Google" -%}
    {%- $connection := coll.Dict "provider" "" -%}
    {%- if file.Exists "/etc/gitlab/minio/accesskey" %}
      {%- $aws_access_key_id := file.Read "/etc/gitlab/minio/accesskey" | strings.TrimSpace -%}
      {%- $aws_secret_access_key := file.Read "/etc/gitlab/minio/secretkey" | strings.TrimSpace -%}
      {%- $connection = coll.Dict "provider" "AWS" "aws_access_key_id" $aws_access_key_id "aws_secret_access_key" $aws_secret_access_key -%}
    {%- end %}
    {%- if file.Exists "/etc/gitlab/objectstorage/object_store" %}
      {%- $connection = file.Read "/etc/gitlab/objectstorage/object_store" | strings.TrimSpace | data.YAML -%}
    {%- end %}
    {%- if has $supported_providers $connection.provider %}
    [object_storage]
    provider = "{% $connection.provider %}"
    {%-   if eq $connection.provider "AWS" %}
    {%-     $connection = coll.Merge $connection (coll.Dict "aws_access_key_id" "" "aws_secret_access_key" "" ) %}
    # AWS / S3 object storage configuration.
    [object_storage.s3]
    # access/secret can be blank!
    aws_access_key_id = {% $connection.aws_access_key_id | strings.TrimSpace | data.ToJSON %}
    aws_secret_access_key = {% $connection.aws_secret_access_key | strings.TrimSpace | data.ToJSON %}
    {%-   else if eq $connection.provider "AzureRM" %}
    {%- $connection = coll.Merge $connection (coll.Dict "azure_storage_account_name" "" "azure_storage_account_name" "" ) %}
    # Azure Blob storage configuration.
    [object_storage.azurerm]
    azure_storage_account_name = {% $connection.azure_storage_account_name | strings.TrimSpace | data.ToJSON %}
    azure_storage_access_key = {% $connection.azure_storage_access_key | strings.TrimSpace | data.ToJSON %}
    {%-   else if eq $connection.provider "Google" %}
    # Google storage configuration.
    [object_storage.google]
    {% $connection | coll.Omit "provider" | data.ToTOML %}
    {%-   end %}
    {%- end %}
    [image_resizer]
    max_scaler_procs = 2
    max_filesize = 250000
    [[listeners]]
    network = "tcp"
    addr = "0.0.0.0:8181"
  configure: |
      set -e
      mkdir -p /init-secrets-workhorse/gitlab-workhorse
      cp -v -r -L /init-config/gitlab-workhorse/secret /init-secrets-workhorse/gitlab-workhorse/secret
      mkdir -p /init-secrets-workhorse/redis
      cp -v -r -L /init-config/redis/redis-password /init-secrets-workhorse/redis/
      if [ -d /init-config/minio ]; then
        mkdir -p /init-secrets-workhorse/minio
        cp -v -r -L /init-config/minio/* /init-secrets-workhorse/minio/
      fi

# Leave this here - This line denotes end of block to the parser.
---
# Source: gitlab/charts/gitlab/charts/webservice/templates/tests/tests.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-webservice-tests
  namespace: {{ .Release.Namespace }}
  labels:
    app: webservice
    chart: webservice-7.6.0
    release: gitlab
    heritage: Helm
    
data:
  test_login: |
    set -e
    echo 'Start Test'
    endpoint="https://{{ $gitlabDomain }}"
    cookie_read="-c /tmp/test_login.cookie"
    cookie_readwrite="$cookie_read -b /tmp/test_login.cookie"

    signin_url="$endpoint/users/sign_in"
    echo "Login to create a session: $signin_url"
    csrf=$(curl -L $signin_url --fail -s $cookie_read | grep -Po '<meta.*name="csrf-token".*content="\K[a-zA-Z0-9\+=\-\/]*')
    curl -X POST $signin_url -s $cookie_readwrite -F "authenticity_token=$csrf" -F 'user[login]=root' -F "user[password]=$(cat /initial_root_password)"

    profile_url="$endpoint/-/profile"
    echo "Confirm session valid: $profile_url"
    profile_status=$(curl -L -s -o /tmp/profile_output -w "%{http_code}" $cookie_readwrite $profile_url)

    if [ "$profile_status" != "200" ]; then
      echo "Error: Session Invalid"
      cat /tmp/profile_output
      exit 1
    fi

    echo 'Test Passed'
    exit 0

# Leave this here - This line denotes end of block to the parser.
---
# Source: gitlab/charts/minio/templates/minioconfig_configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-minio-config-cm
  namespace: {{ .Release.Namespace }}
  labels:
    app: minio
    chart: minio-0.4.3
    release: gitlab
    heritage: Helm
    
data:
  initialize: |-
    #!/bin/sh
    # minio/mc container has Busybox Ash, be sure to be POSIX compliant and avoid Bash-isms
    set -e ; # Have script exit in the event of a failed command.
    
    # connectToMinio
    # Use a check-sleep-check loop to wait for Minio service to be available
    connectToMinio() {
      set -e ; # fail if we can't read the keys.
      ACCESS=$(cat /config/accesskey) ; SECRET=$(cat /config/secretkey) ;
      set +e ; # The connections to minio are allowed to fail.
      echo "Connecting to Minio server: http://$MINIO_ENDPOINT:$MINIO_PORT" ;
      MC_COMMAND="mc config host add myminio http://$MINIO_ENDPOINT:$MINIO_PORT $ACCESS $SECRET" ;
      $MC_COMMAND ;
      STATUS=$? ;
      until [ $STATUS -eq 0 ] ;
      do
        sleep 1 ; # 1 second intervals between attempts
        $MC_COMMAND ;
        STATUS=$? ;
      done ;
      set -e ; # reset `e` as active
      return 0
    }
    
    # checkBucketExists ($bucket)
    # Check if the bucket exists, by using the exit code of `mc ls`
    checkBucketExists() {
      BUCKET=$1
      CMD=$(/usr/bin/mc ls myminio/$BUCKET > /dev/null 2>&1)
      return $?
    }
    
    # createBucket ($bucket, $policy, $purge)
    # Ensure bucket exists, purging if asked to
    createBucket() {
      BUCKET=$1
      POLICY=$2
      PURGE=$3
    
    
      # Purge the bucket, if set & exists
      # Since PURGE is user input, check explicitly for `true`
      if [ $PURGE = true ]; then
        if checkBucketExists $BUCKET ; then
          echo "Purging bucket '$BUCKET'."
          set +e ; # don't exit if this fails
          /usr/bin/mc rm -r --force myminio/$BUCKET
          set -e ; # reset `e` as active
        else
          echo "Bucket '$BUCKET' does not exist, skipping purge."
        fi
      fi
    
      # Create the bucket if it does not exist
      if ! checkBucketExists $BUCKET ; then
        echo "Creating bucket '$BUCKET'"
        /usr/bin/mc mb myminio/$BUCKET
      else
        echo "Bucket '$BUCKET' already exists."
      fi
    
      # At this point, the bucket should exist, skip checking for existance
      # Set policy on the bucket
      echo "Setting policy of bucket '$BUCKET' to '$POLICY'."
      /usr/bin/mc policy $POLICY myminio/$BUCKET
    }
    
    connectToMinio
    createBucket registry none false
    createBucket git-lfs none false
    createBucket runner-cache none false
    createBucket gitlab-uploads none false
    createBucket gitlab-artifacts none false
    createBucket gitlab-backups none false
    createBucket gitlab-packages none false
    createBucket tmp none false
    createBucket gitlab-mr-diffs none false
    createBucket gitlab-terraform-state none false
    createBucket gitlab-ci-secure-files none false
    createBucket gitlab-dependency-proxy none false
    createBucket gitlab-pages none false
    
  configure: |-
    sed -e 's@ACCESS_KEY@'"$(cat /config/accesskey)"'@' -e 's@SECRET_KEY@'"$(cat /config/secretkey)"'@' /config/config.json > /minio/config.json
  config.json: |-
    {
      "version": "20",
      "credential": {
        "accessKey": "ACCESS_KEY",
        "secretKey": "SECRET_KEY"
      },
      "region": "us-east-1",
      "browser": "on",
      "domain": "",
      "logger": {
        "console": {
          "enable": true
        },
        "file": {
          "enable": false,
          "fileName": ""
        }
      },
      "notify": {
        "amqp": {
          "1": {
            "enable": false,
            "url": "",
            "exchange": "",
            "routingKey": "",
            "exchangeType": "",
            "deliveryMode": 0,
            "mandatory": false,
            "immediate": false,
            "durable": false,
            "internal": false,
            "noWait": false,
            "autoDeleted": false
          }
        },
        "nats": {
          "1": {
            "enable": false,
            "address": "",
            "subject": "",
            "username": "",
            "password": "",
            "token": "",
            "secure": false,
            "pingInterval": 0,
            "streaming": {
              "enable": false,
              "clusterID": "",
              "clientID": "",
              "async": false,
              "maxPubAcksInflight": 0
            }
          }
        },
        "elasticsearch": {
          "1": {
            "enable": false,
            "format": "namespace",
            "url": "",
            "index": ""
          }
        },
        "redis": {
          "1": {
            "enable": false,
            "format": "namespace",
            "address": "",
            "password": "",
            "key": ""
          }
        },
        "postgresql": {
          "1": {
            "enable": false,
            "format": "namespace",
            "connectionString": "",
            "table": "",
            "host": "",
            "port": "",
            "user": "",
            "password": "",
            "database": ""
          }
        },
        "kafka": {
          "1": {
            "enable": false,
            "brokers": null,
            "topic": ""
          }
        },
        "webhook": {
          "1": {
            "enable": false,
            "endpoint": ""
          }
        },
        "mysql": {
          "1": {
            "enable": false,
            "format": "namespace",
            "dsnString": "",
            "table": "",
            "host": "",
            "port": "",
            "user": "",
            "password": "",
            "database": ""
          }
        },
        "mqtt": {
          "1": {
            "enable": false,
            "broker": "",
            "topic": "",
            "qos": 0,
            "clientId": "",
            "username": "",
            "password": ""
          }
        }
      }
    }
# Blank line to signal end of Block
---
# Source: gitlab/charts/nginx-ingress/templates/controller-configmap-addheaders.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-4.0.6
    release: gitlab
    heritage: Helm
    
    component: "controller"
    helm.sh/chart: nginx-ingress-4.0.6
    app.kubernetes.io/version: "1.0.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: gitlab-nginx-ingress-custom-add-headers
  namespace: {{ .Release.Namespace }}
data: 
  Referrer-Policy: strict-origin-when-cross-origin
---
# Source: gitlab/charts/nginx-ingress/templates/controller-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-4.0.6
    release: gitlab
    heritage: Helm
    
    component: "controller"
    helm.sh/chart: nginx-ingress-4.0.6
    app.kubernetes.io/version: "1.0.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: gitlab-nginx-ingress-controller
  namespace: {{ .Release.Namespace }}
data:
  allow-snippet-annotations: "true"
  add-headers: {{ .Release.Namespace }}/gitlab-nginx-ingress-custom-add-headers
    
  annotation-value-word-blocklist: "load_module,lua_package,_by_lua,location,root,proxy_pass,serviceaccount,{,},',\""
    
  hsts: "true"
    
  hsts-include-subdomains: "false"
    
  hsts-max-age: "63072000"
    
  server-name-hash-bucket-size: "256"
    
  server-tokens: "false"
    
  ssl-ciphers: "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4"
    
  ssl-protocols: "TLSv1.3 TLSv1.2"
    
  upstream-keepalive-connections: "100"
    
  upstream-keepalive-requests: "1000"
    
  upstream-keepalive-time: "30s"
    
  upstream-keepalive-timeout: "5"

  use-forwarded-headers: "true"

  use-http2: "true"
---
# Source: gitlab/charts/prometheus/templates/server/cm.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    component: "server"
    app: prometheus
    release: gitlab
    chart: prometheus-15.18.0
    heritage: Helm
  name: gitlab-prometheus-server
  namespace: {{ .Release.Namespace }}
data:
  allow-snippet-annotations: "false"
  alerting_rules.yml: |
    {}
  alerts: |
    {}
  prometheus.yml: |
    global:
      evaluation_interval: 1m
      scrape_interval: 1m
      scrape_timeout: 10s
    rule_files:
    - /etc/config/recording_rules.yml
    - /etc/config/alerting_rules.yml
    - /etc/config/rules
    - /etc/config/alerts
    scrape_configs:
    - job_name: prometheus
      static_configs:
      - targets:
        - localhost:9090
    - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      job_name: kubernetes-apiservers
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - action: keep
        regex: default;kubernetes;https
        source_labels:
        - __meta_kubernetes_namespace
        - __meta_kubernetes_service_name
        - __meta_kubernetes_endpoint_port_name
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
    - job_name: kubernetes-pods
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_pod_annotation_gitlab_com_prometheus_scrape
      - action: replace
        regex: (https?)
        source_labels:
        - __meta_kubernetes_pod_annotation_gitlab_com_prometheus_scheme
        target_label: __scheme__
      - action: replace
        regex: (.+)
        source_labels:
        - __meta_kubernetes_pod_annotation_gitlab_com_prometheus_path
        target_label: __metrics_path__
      - action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_pod_annotation_gitlab_com_prometheus_port
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: kubernetes_namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_name
        target_label: kubernetes_pod_name
    - job_name: kubernetes-service-endpoints
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_service_annotation_gitlab_com_prometheus_scrape
      - action: replace
        regex: (https?)
        source_labels:
        - __meta_kubernetes_service_annotation_gitlab_com_prometheus_scheme
        target_label: __scheme__
      - action: replace
        regex: (.+)
        source_labels:
        - __meta_kubernetes_service_annotation_gitlab_com_prometheus_path
        target_label: __metrics_path__
      - action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_service_annotation_gitlab_com_prometheus_port
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: kubernetes_namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_service_name
        target_label: kubernetes_name
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_node_name
        target_label: kubernetes_node
    - job_name: kubernetes-services
      kubernetes_sd_configs:
      - role: service
      metrics_path: /probe
      params:
        module:
        - http_2xx
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_service_annotation_gitlab_com_prometheus_probe
      - source_labels:
        - __address__
        target_label: __param_target
      - replacement: blackbox
        target_label: __address__
      - source_labels:
        - __param_target
        target_label: instance
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels:
        - __meta_kubernetes_namespace
        target_label: kubernetes_namespace
      - source_labels:
        - __meta_kubernetes_service_name
        target_label: kubernetes_name
  recording_rules.yml: |
    {}
  rules: |
    {}
---
# Source: gitlab/charts/redis/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-redis-configuration
  namespace: "{{ .Release.Namespace }}"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.13.2
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/managed-by: Helm
data:
  redis.conf: |-
    # User-supplied common configuration:
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    # End of common configuration
  master.conf: |-
    dir /data
    # User-supplied master configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of master configuration
  replica.conf: |-
    dir /data
    # User-supplied replica configuration:
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    # End of replica configuration
---
# Source: gitlab/charts/redis/templates/health-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-redis-health
  namespace: "{{ .Release.Namespace }}"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.13.2
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/managed-by: Helm
data:
  ping_readiness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local.sh: |-
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ] && [ "$responseFirstWord" != "MASTERDOWN" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_master.sh: |-
    #!/bin/bash

    [[ -f $REDIS_MASTER_PASSWORD_FILE ]] && export REDIS_MASTER_PASSWORD="$(< "${REDIS_MASTER_PASSWORD_FILE}")"
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$?" -eq "124" ]; then
      echo "Timed out"
      exit 1
    fi
    responseFirstWord=$(echo $response | head -n1 | awk '{print $1;}')
    if [ "$response" != "PONG" ] && [ "$responseFirstWord" != "LOADING" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
---
# Source: gitlab/charts/redis/templates/scripts-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-redis-scripts
  namespace: "{{ .Release.Namespace }}"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.13.2
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/managed-by: Helm
data:
  start-master.sh: |
    #!/bin/bash

    [[ -f $REDIS_PASSWORD_FILE ]] && export REDIS_PASSWORD="$(< "${REDIS_PASSWORD_FILE}")"
    if [[ ! -f /opt/bitnami/redis/etc/master.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/master.conf /opt/bitnami/redis/etc/master.conf
    fi
    if [[ ! -f /opt/bitnami/redis/etc/redis.conf ]];then
        cp /opt/bitnami/redis/mounted-etc/redis.conf /opt/bitnami/redis/etc/redis.conf
    fi
    ARGS=("--port" "${REDIS_PORT}")
    ARGS+=("--requirepass" "${REDIS_PASSWORD}")
    ARGS+=("--masterauth" "${REDIS_PASSWORD}")
    ARGS+=("--include" "/opt/bitnami/redis/etc/redis.conf")
    ARGS+=("--include" "/opt/bitnami/redis/etc/master.conf")
    exec redis-server "${ARGS[@]}"
---
# Source: gitlab/charts/registry/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-registry
  namespace: {{ .Release.Namespace }}
  labels:
    app: registry
    chart: registry-0.7.0
    release: gitlab
    heritage: Helm
    
data:
  configure: |-
    if [ -e /config/accesskey ] ; then
      sed -e 's@ACCESS_KEY@'"$(cat /config/accesskey)"'@' -e 's@SECRET_KEY@'"$(cat /config/secretkey)"'@' /config/config.yml > /registry/config.yml
    else
      cp -v -r -L /config/config.yml  /registry/config.yml
    fi
    # Place the `http.secret` value from the kubernetes secret
    sed -i -e 's@HTTP_SECRET@'"$(cat /config/httpSecret)"'@' /registry/config.yml
    # Populate sensitive registry notification secrets in the config file
    if [ -d /config/notifications ]; then
      for i in /config/notifications/*; do
        filename=$(basename $i);
        sed -i -e 's@'"${filename}"'@'"$(cat $i)"'@' /registry/config.yml;
      done
    fi
    # Insert any provided `storage` block from kubernetes secret
    if [ -d /config/storage ]; then
      # Copy contents of storage secret(s)
      mkdir -p /registry/storage
      cp -v -r -L /config/storage/* /registry/storage/
      # Ensure there is a new line in the end
      echo '' >> /registry/storage/config
      # Default `delete.enabled: true` if not present.
      ## Note: busybox grep doesn't support multiline, so we chain `egrep`.
      if ! $(egrep -A1 '^delete:\s*$' /registry/storage/config | egrep -q '\s{2,4}enabled:') ; then
        echo 'delete:' >> /registry/storage/config
        echo '  enabled: true' >> /registry/storage/config
      fi
      # Indent /registry/storage/config 2 spaces before inserting into config.yml
      sed -i 's/^/  /' /registry/storage/config
      # Insert into /registry/config.yml after `storage:`
      sed -i '/^storage:/ r /registry/storage/config' /registry/config.yml
      # Remove the now extraneous `config` file
      rm /registry/storage/config
    fi
    # Copy any middleware.storage if present
    if [ -d /config/middleware.storage ]; then
      cp -v -r -L /config/middleware.storage  /registry/middleware.storage
    fi
    # Set to known path, to used ConfigMap
    cat /config/certificate.crt > /registry/certificate.crt
    # Copy the optional profiling keyfile to the expected location
    if [ -f /config/profiling-key.json ]; then
      cp /config/profiling-key.json /registry/profiling-key.json
    fi
    # Insert Database password, if enabled
    if [ -f /config/database_password ] ; then
      sed -i -e 's@DB_PASSWORD_FILE@'"$(cat /config/database_password)"'@' /registry/config.yml
    fi
    # Insert Redis password, if enabled
    if [ -f /config/registry/redis-password ] ; then
      sed -i -e 's@REDIS_CACHE_PASSWORD@'"$(cat /config/registry/redis-password)"'@' /registry/config.yml
    fi
    # Copy the database TLS connection files to the expected location and set permissions
    if [ -d /config/ssl ]; then
      cp -r /config/ssl/ /registry/ssl
      chmod 700 /registry/ssl
      chmod 600 /registry/ssl/*.pem
    fi
    # Copy TLS certificates if present
    if [ -d /config/tls ]; then
      cp -r /config/tls/ /registry/tls
      chmod 700 /registry/tls
      chmod 600 /registry/tls/*
    fi
  config.yml: |
    version: 0.1
    log:
      fields:
        service: registry
      level: info
    http:
      addr: :5000
      # `host` is not configurable
      # `prefix` is not configurable
      debug:
        addr: :5001
        prometheus:
          enabled: false
          path: /metrics
      draintimeout: 0
      headers:
        X-Content-Type-Options: [nosniff]
      secret: "HTTP_SECRET"
      relativeurls: false
    health:
      storagedriver:
        enabled: false
        interval: 10s
        threshold: 3
    auth:
      token:
        realm: https://{{ $gitlabDomain }}/jwt/auth
        service: container_registry
        issuer: gitlab-issuer
        # This is provided from the initContainer execution, at a known path.
        rootcertbundle: /etc/docker/registry/certificate.crt
        autoredirect: false
    validation:
      disabled: true
      manifests:
        referencelimit: 0
        payloadsizelimit: 0
        urls:
          allow:
          deny:
    
    notifications:
    reporting:
    profiling:
    storage:
      maintenance:
        readonly:
          enabled: false
        uploadpurging:
          enabled: true
          age: 168h
          interval: 24h
          dryrun: false
      s3:
        accesskey: "ACCESS_KEY"
        secretkey: "SECRET_KEY"
        region: us-east-1
        regionendpoint: http://gitlab-minio-svc.{{ .Release.Namespace }}.svc:9000
        bucket: registry
        secure: true
        v4auth: true
        rootdirectory: /
      cache:
        blobdescriptor: 'inmemory'
      delete:
        enabled: true
      redirect:
        disable: true
    middleware:
    
    gc:
      disabled: false
    redis:
      cache:
        enabled: false
        addr: "gitlab-redis-master.{{ .Release.Namespace }}.svc:6379"

  # minimal configuration, in order to do database migrations
  migrations-config.yml: |
    version: 0.1
    log:
      fields:
        service: registry
      level: info
---
# Source: gitlab/templates/chart-info.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-gitlab-chart-info
  namespace: {{ .Release.Namespace }}
  labels:
    app: gitlab
    chart: gitlab-7.6.0
    release: gitlab
    heritage: Helm
    
data:
  gitlabVersion: "16.6.0"
  gitlabChartVersion: "7.6.0"
---
# Source: gitlab/templates/initdb-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: gitlab-postgresql-init-db
  namespace: {{ .Release.Namespace }}
  labels:
    app: gitlab
    chart: gitlab-7.6.0
    release: gitlab
    heritage: Helm
    
data:
  init_revision.sh: |
    if [[ ! -f "$POSTGRESQL_VOLUME_DIR/.gitlab_1_scripts_initialized" ]] ; then
      rm -f "$POSTGRESQL_VOLUME_DIR/.user_scripts_initialized"
      touch "$POSTGRESQL_VOLUME_DIR/.gitlab_1_scripts_initialized"
    fi
  enable_extensions.sh: |
    [[ -n "${POSTGRES_POSTGRES_PASSWORD_FILE:-}" ]] && POSTGRES_POSTGRES_PASSWORD=$(cat ${POSTGRES_POSTGRES_PASSWORD_FILE})
    PGPASSWORD=${POSTGRES_POSTGRES_PASSWORD} psql -d gitlabhq_production -U postgres -c 'CREATE EXTENSION IF NOT EXISTS pg_trgm; CREATE EXTENSION IF NOT EXISTS btree_gist;'
# Leave this here - This line denotes end of block to the parser.
---
# Source: gitlab/charts/minio/templates/minio_pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: gitlab-minio
  namespace: {{ .Release.Namespace }}
  labels:
    app: minio
    chart: minio-0.4.3
    release: gitlab
    heritage: Helm
    
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "10Gi"
  selector:
---
# Source: gitlab/charts/prometheus/templates/server/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    component: "server"
    app: prometheus
    release: gitlab
    chart: prometheus-15.18.0
    heritage: Helm
  name: gitlab-prometheus-server
  namespace: {{ .Release.Namespace }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: "8Gi"
---
# Source: gitlab/charts/certmanager/templates/crds.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: certificaterequests.cert-manager.io
  labels:
    app: 'certmanager'
    app.kubernetes.io/name: 'certmanager'
    app.kubernetes.io/instance: 'gitlab'
    # Generated labels
    app.kubernetes.io/version: "v1.12.6"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: certmanager-v1.12.6
spec:
  group: cert-manager.io
  names:
    kind: CertificateRequest
    listKind: CertificateRequestList
    plural: certificaterequests
    shortNames:
      - cr
      - crs
    singular: certificaterequest
    categories:
      - cert-manager
  scope: Namespaced
  versions:
    - name: v1
      subresources:
        status: {}
      additionalPrinterColumns:
        - jsonPath: .status.conditions[?(@.type=="Approved")].status
          name: Approved
          type: string
        - jsonPath: .status.conditions[?(@.type=="Denied")].status
          name: Denied
          type: string
        - jsonPath: .status.conditions[?(@.type=="Ready")].status
          name: Ready
          type: string
        - jsonPath: .spec.issuerRef.name
          name: Issuer
          type: string
        - jsonPath: .spec.username
          name: Requestor
          type: string
        - jsonPath: .status.conditions[?(@.type=="Ready")].message
          name: Status
          priority: 1
          type: string
        - jsonPath: .metadata.creationTimestamp
          description: CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
          name: Age
          type: date
      schema:
        openAPIV3Schema:
          description: "A CertificateRequest is used to request a signed certificate from one of the configured issuers. \n All fields within the CertificateRequest's `spec` are immutable after creation. A CertificateRequest will either succeed or fail, as denoted by its `status.state` field. \n A CertificateRequest is a one-shot resource, meaning it represents a single point in time request for a certificate and cannot be re-used."
          type: object
          required:
            - spec
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: Desired state of the CertificateRequest resource.
              type: object
              required:
                - issuerRef
                - request
              properties:
                duration:
                  description: The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types.
                  type: string
                extra:
                  description: Extra contains extra attributes of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.
                  type: object
                  additionalProperties:
                    type: array
                    items:
                      type: string
                groups:
                  description: Groups contains group membership of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.
                  type: array
                  items:
                    type: string
                  x-kubernetes-list-type: atomic
                isCA:
                  description: IsCA will request to mark the certificate as valid for certificate signing when submitting to the issuer. This will automatically add the `cert sign` usage to the list of `usages`.
                  type: boolean
                issuerRef:
                  description: IssuerRef is a reference to the issuer for this CertificateRequest.  If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the CertificateRequest will be used.  If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times. The group field refers to the API group of the issuer which defaults to `cert-manager.io` if empty.
                  type: object
                  required:
                    - name
                  properties:
                    group:
                      description: Group of the resource being referred to.
                      type: string
                    kind:
                      description: Kind of the resource being referred to.
                      type: string
                    name:
                      description: Name of the resource being referred to.
                      type: string
                request:
                  description: The PEM-encoded x509 certificate signing request to be submitted to the CA for signing.
                  type: string
                  format: byte
                uid:
                  description: UID contains the uid of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.
                  type: string
                usages:
                  description: Usages is the set of x509 usages that are requested for the certificate. If usages are set they SHOULD be encoded inside the CSR spec Defaults to `digital signature` and `key encipherment` if not specified.
                  type: array
                  items:
                    description: "KeyUsage specifies valid usage contexts for keys. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3 https://tools.ietf.org/html/rfc5280#section-4.2.1.12 \n Valid KeyUsage values are as follows: \"signing\", \"digital signature\", \"content commitment\", \"key encipherment\", \"key agreement\", \"data encipherment\", \"cert sign\", \"crl sign\", \"encipher only\", \"decipher only\", \"any\", \"server auth\", \"client auth\", \"code signing\", \"email protection\", \"s/mime\", \"ipsec end system\", \"ipsec tunnel\", \"ipsec user\", \"timestamping\", \"ocsp signing\", \"microsoft sgc\", \"netscape sgc\""
                    type: string
                    enum:
                      - signing
                      - digital signature
                      - content commitment
                      - key encipherment
                      - key agreement
                      - data encipherment
                      - cert sign
                      - crl sign
                      - encipher only
                      - decipher only
                      - any
                      - server auth
                      - client auth
                      - code signing
                      - email protection
                      - s/mime
                      - ipsec end system
                      - ipsec tunnel
                      - ipsec user
                      - timestamping
                      - ocsp signing
                      - microsoft sgc
                      - netscape sgc
                username:
                  description: Username contains the name of the user that created the CertificateRequest. Populated by the cert-manager webhook on creation and immutable.
                  type: string
            status:
              description: Status of the CertificateRequest. This is set and managed automatically.
              type: object
              properties:
                ca:
                  description: The PEM encoded x509 certificate of the signer, also known as the CA (Certificate Authority). This is set on a best-effort basis by different issuers. If not set, the CA is assumed to be unknown/not available.
                  type: string
                  format: byte
                certificate:
                  description: The PEM encoded x509 certificate resulting from the certificate signing request. If not set, the CertificateRequest has either not been completed or has failed. More information on failure can be found by checking the `conditions` field.
                  type: string
                  format: byte
                conditions:
                  description: List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready` and `InvalidRequest`.
                  type: array
                  items:
                    description: CertificateRequestCondition contains condition information for a CertificateRequest.
                    type: object
                    required:
                      - status
                      - type
                    properties:
                      lastTransitionTime:
                        description: LastTransitionTime is the timestamp corresponding to the last status change of this condition.
                        type: string
                        format: date-time
                      message:
                        description: Message is a human readable description of the details of the last transition, complementing reason.
                        type: string
                      reason:
                        description: Reason is a brief machine readable explanation for the condition's last transition.
                        type: string
                      status:
                        description: Status of the condition, one of (`True`, `False`, `Unknown`).
                        type: string
                        enum:
                          - "True"
                          - "False"
                          - Unknown
                      type:
                        description: Type of the condition, known values are (`Ready`, `InvalidRequest`, `Approved`, `Denied`).
                        type: string
                  x-kubernetes-list-map-keys:
                    - type
                  x-kubernetes-list-type: map
                failureTime:
                  description: FailureTime stores the time that this CertificateRequest failed. This is used to influence garbage collection and back-off.
                  type: string
                  format: date-time
      served: true
      storage: true
---
# Source: gitlab/charts/certmanager/templates/crds.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: certificates.cert-manager.io
  labels:
    app: 'certmanager'
    app.kubernetes.io/name: 'certmanager'
    app.kubernetes.io/instance: 'gitlab'
    # Generated labels
    app.kubernetes.io/version: "v1.12.6"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: certmanager-v1.12.6
spec:
  group: cert-manager.io
  names:
    kind: Certificate
    listKind: CertificateList
    plural: certificates
    shortNames:
      - cert
      - certs
    singular: certificate
    categories:
      - cert-manager
  scope: Namespaced
  versions:
    - name: v1
      subresources:
        status: {}
      additionalPrinterColumns:
        - jsonPath: .status.conditions[?(@.type=="Ready")].status
          name: Ready
          type: string
        - jsonPath: .spec.secretName
          name: Secret
          type: string
        - jsonPath: .spec.issuerRef.name
          name: Issuer
          priority: 1
          type: string
        - jsonPath: .status.conditions[?(@.type=="Ready")].message
          name: Status
          priority: 1
          type: string
        - jsonPath: .metadata.creationTimestamp
          description: CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
          name: Age
          type: date
      schema:
        openAPIV3Schema:
          description: "A Certificate resource should be created to ensure an up to date and signed x509 certificate is stored in the Kubernetes Secret resource named in `spec.secretName`. \n The stored certificate will be renewed before it expires (as configured by `spec.renewBefore`)."
          type: object
          required:
            - spec
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: Desired state of the Certificate resource.
              type: object
              required:
                - issuerRef
                - secretName
              properties:
                additionalOutputFormats:
                  description: AdditionalOutputFormats defines extra output formats of the private key and signed certificate chain to be written to this Certificate's target Secret. This is an Alpha Feature and is only enabled with the `--feature-gates=AdditionalCertificateOutputFormats=true` option on both the controller and webhook components.
                  type: array
                  items:
                    description: CertificateAdditionalOutputFormat defines an additional output format of a Certificate resource. These contain supplementary data formats of the signed certificate chain and paired private key.
                    type: object
                    required:
                      - type
                    properties:
                      type:
                        description: Type is the name of the format type that should be written to the Certificate's target Secret.
                        type: string
                        enum:
                          - DER
                          - CombinedPEM
                commonName:
                  description: 'CommonName is a common name to be used on the Certificate. The CommonName should have a length of 64 characters or fewer to avoid generating invalid CSRs. This value is ignored by TLS clients when any subject alt name is set. This is x509 behaviour: https://tools.ietf.org/html/rfc6125#section-6.4.4'
                  type: string
                dnsNames:
                  description: DNSNames is a list of DNS subjectAltNames to be set on the Certificate.
                  type: array
                  items:
                    type: string
                duration:
                  description: The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types. If unset this defaults to 90 days. Certificate will be renewed either 2/3 through its duration or `renewBefore` period before its expiry, whichever is later. Minimum accepted duration is 1 hour. Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration
                  type: string
                emailAddresses:
                  description: EmailAddresses is a list of email subjectAltNames to be set on the Certificate.
                  type: array
                  items:
                    type: string
                encodeUsagesInRequest:
                  description: EncodeUsagesInRequest controls whether key usages should be present in the CertificateRequest
                  type: boolean
                ipAddresses:
                  description: IPAddresses is a list of IP address subjectAltNames to be set on the Certificate.
                  type: array
                  items:
                    type: string
                isCA:
                  description: IsCA will mark this Certificate as valid for certificate signing. This will automatically add the `cert sign` usage to the list of `usages`.
                  type: boolean
                issuerRef:
                  description: IssuerRef is a reference to the issuer for this certificate. If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the Certificate will be used. If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times.
                  type: object
                  required:
                    - name
                  properties:
                    group:
                      description: Group of the resource being referred to.
                      type: string
                    kind:
                      description: Kind of the resource being referred to.
                      type: string
                    name:
                      description: Name of the resource being referred to.
                      type: string
                keystores:
                  description: Keystores configures additional keystore output formats stored in the `secretName` Secret resource.
                  type: object
                  properties:
                    jks:
                      description: JKS configures options for storing a JKS keystore in the `spec.secretName` Secret resource.
                      type: object
                      required:
                        - create
                        - passwordSecretRef
                      properties:
                        create:
                          description: Create enables JKS keystore creation for the Certificate. If true, a file named `keystore.jks` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will be updated immediately. If the issuer provided a CA certificate, a file named `truststore.jks` will also be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef` containing the issuing Certificate Authority
                          type: boolean
                        passwordSecretRef:
                          description: PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the JKS keystore.
                          type: object
                          required:
                            - name
                          properties:
                            key:
                              description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                              type: string
                            name:
                              description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                    pkcs12:
                      description: PKCS12 configures options for storing a PKCS12 keystore in the `spec.secretName` Secret resource.
                      type: object
                      required:
                        - create
                        - passwordSecretRef
                      properties:
                        create:
                          description: Create enables PKCS12 keystore creation for the Certificate. If true, a file named `keystore.p12` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will be updated immediately. If the issuer provided a CA certificate, a file named `truststore.p12` will also be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef` containing the issuing Certificate Authority
                          type: boolean
                        passwordSecretRef:
                          description: PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the PKCS12 keystore.
                          type: object
                          required:
                            - name
                          properties:
                            key:
                              description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                              type: string
                            name:
                              description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                literalSubject:
                  description: LiteralSubject is an LDAP formatted string that represents the [X.509 Subject field](https://datatracker.ietf.org/doc/html/rfc5280#section-4.1.2.6). Use this *instead* of the Subject field if you need to ensure the correct ordering of the RDN sequence, such as when issuing certs for LDAP authentication. See https://github.com/cert-manager/cert-manager/issues/3203, https://github.com/cert-manager/cert-manager/issues/4424. This field is alpha level and is only supported by cert-manager installations where LiteralCertificateSubject feature gate is enabled on both cert-manager controller and webhook.
                  type: string
                privateKey:
                  description: Options to control private keys used for the Certificate.
                  type: object
                  properties:
                    algorithm:
                      description: Algorithm is the private key algorithm of the corresponding private key for this certificate. If provided, allowed values are either `RSA`,`Ed25519` or `ECDSA` If `algorithm` is specified and `size` is not provided, key size of 256 will be used for `ECDSA` key algorithm and key size of 2048 will be used for `RSA` key algorithm. key size is ignored when using the `Ed25519` key algorithm.
                      type: string
                      enum:
                        - RSA
                        - ECDSA
                        - Ed25519
                    encoding:
                      description: The private key cryptography standards (PKCS) encoding for this certificate's private key to be encoded in. If provided, allowed values are `PKCS1` and `PKCS8` standing for PKCS#1 and PKCS#8, respectively. Defaults to `PKCS1` if not specified.
                      type: string
                      enum:
                        - PKCS1
                        - PKCS8
                    rotationPolicy:
                      description: RotationPolicy controls how private keys should be regenerated when a re-issuance is being processed. If set to Never, a private key will only be generated if one does not already exist in the target `spec.secretName`. If one does exists but it does not have the correct algorithm or size, a warning will be raised to await user intervention. If set to Always, a private key matching the specified requirements will be generated whenever a re-issuance occurs. Default is 'Never' for backward compatibility.
                      type: string
                      enum:
                        - Never
                        - Always
                    size:
                      description: Size is the key bit size of the corresponding private key for this certificate. If `algorithm` is set to `RSA`, valid values are `2048`, `4096` or `8192`, and will default to `2048` if not specified. If `algorithm` is set to `ECDSA`, valid values are `256`, `384` or `521`, and will default to `256` if not specified. If `algorithm` is set to `Ed25519`, Size is ignored. No other values are allowed.
                      type: integer
                renewBefore:
                  description: How long before the currently issued certificate's expiry cert-manager should renew the certificate. The default is 2/3 of the issued certificate's duration. Minimum accepted value is 5 minutes. Value must be in units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration
                  type: string
                revisionHistoryLimit:
                  description: revisionHistoryLimit is the maximum number of CertificateRequest revisions that are maintained in the Certificate's history. Each revision represents a single `CertificateRequest` created by this Certificate, either when it was created, renewed, or Spec was changed. Revisions will be removed by oldest first if the number of revisions exceeds this number. If set, revisionHistoryLimit must be a value of `1` or greater. If unset (`nil`), revisions will not be garbage collected. Default value is `nil`.
                  type: integer
                  format: int32
                secretName:
                  description: SecretName is the name of the secret resource that will be automatically created and managed by this Certificate resource. It will be populated with a private key and certificate, signed by the denoted issuer.
                  type: string
                secretTemplate:
                  description: SecretTemplate defines annotations and labels to be copied to the Certificate's Secret. Labels and annotations on the Secret will be changed as they appear on the SecretTemplate when added or removed. SecretTemplate annotations are added in conjunction with, and cannot overwrite, the base set of annotations cert-manager sets on the Certificate's Secret.
                  type: object
                  properties:
                    annotations:
                      description: Annotations is a key value map to be copied to the target Kubernetes Secret.
                      type: object
                      additionalProperties:
                        type: string
                    labels:
                      description: Labels is a key value map to be copied to the target Kubernetes Secret.
                      type: object
                      additionalProperties:
                        type: string
                subject:
                  description: Full X509 name specification (https://golang.org/pkg/crypto/x509/pkix/#Name).
                  type: object
                  properties:
                    countries:
                      description: Countries to be used on the Certificate.
                      type: array
                      items:
                        type: string
                    localities:
                      description: Cities to be used on the Certificate.
                      type: array
                      items:
                        type: string
                    organizationalUnits:
                      description: Organizational Units to be used on the Certificate.
                      type: array
                      items:
                        type: string
                    organizations:
                      description: Organizations to be used on the Certificate.
                      type: array
                      items:
                        type: string
                    postalCodes:
                      description: Postal codes to be used on the Certificate.
                      type: array
                      items:
                        type: string
                    provinces:
                      description: State/Provinces to be used on the Certificate.
                      type: array
                      items:
                        type: string
                    serialNumber:
                      description: Serial number to be used on the Certificate.
                      type: string
                    streetAddresses:
                      description: Street addresses to be used on the Certificate.
                      type: array
                      items:
                        type: string
                uris:
                  description: URIs is a list of URI subjectAltNames to be set on the Certificate.
                  type: array
                  items:
                    type: string
                usages:
                  description: Usages is the set of x509 usages that are requested for the certificate. Defaults to `digital signature` and `key encipherment` if not specified.
                  type: array
                  items:
                    description: "KeyUsage specifies valid usage contexts for keys. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3 https://tools.ietf.org/html/rfc5280#section-4.2.1.12 \n Valid KeyUsage values are as follows: \"signing\", \"digital signature\", \"content commitment\", \"key encipherment\", \"key agreement\", \"data encipherment\", \"cert sign\", \"crl sign\", \"encipher only\", \"decipher only\", \"any\", \"server auth\", \"client auth\", \"code signing\", \"email protection\", \"s/mime\", \"ipsec end system\", \"ipsec tunnel\", \"ipsec user\", \"timestamping\", \"ocsp signing\", \"microsoft sgc\", \"netscape sgc\""
                    type: string
                    enum:
                      - signing
                      - digital signature
                      - content commitment
                      - key encipherment
                      - key agreement
                      - data encipherment
                      - cert sign
                      - crl sign
                      - encipher only
                      - decipher only
                      - any
                      - server auth
                      - client auth
                      - code signing
                      - email protection
                      - s/mime
                      - ipsec end system
                      - ipsec tunnel
                      - ipsec user
                      - timestamping
                      - ocsp signing
                      - microsoft sgc
                      - netscape sgc
            status:
              description: Status of the Certificate. This is set and managed automatically.
              type: object
              properties:
                conditions:
                  description: List of status conditions to indicate the status of certificates. Known condition types are `Ready` and `Issuing`.
                  type: array
                  items:
                    description: CertificateCondition contains condition information for an Certificate.
                    type: object
                    required:
                      - status
                      - type
                    properties:
                      lastTransitionTime:
                        description: LastTransitionTime is the timestamp corresponding to the last status change of this condition.
                        type: string
                        format: date-time
                      message:
                        description: Message is a human readable description of the details of the last transition, complementing reason.
                        type: string
                      observedGeneration:
                        description: If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Certificate.
                        type: integer
                        format: int64
                      reason:
                        description: Reason is a brief machine readable explanation for the condition's last transition.
                        type: string
                      status:
                        description: Status of the condition, one of (`True`, `False`, `Unknown`).
                        type: string
                        enum:
                          - "True"
                          - "False"
                          - Unknown
                      type:
                        description: Type of the condition, known values are (`Ready`, `Issuing`).
                        type: string
                  x-kubernetes-list-map-keys:
                    - type
                  x-kubernetes-list-type: map
                failedIssuanceAttempts:
                  description: The number of continuous failed issuance attempts up till now. This field gets removed (if set) on a successful issuance and gets set to 1 if unset and an issuance has failed. If an issuance has failed, the delay till the next issuance will be calculated using formula time.Hour * 2 ^ (failedIssuanceAttempts - 1).
                  type: integer
                lastFailureTime:
                  description: LastFailureTime is set only if the lastest issuance for this Certificate failed and contains the time of the failure. If an issuance has failed, the delay till the next issuance will be calculated using formula time.Hour * 2 ^ (failedIssuanceAttempts - 1). If the latest issuance has succeeded this field will be unset.
                  type: string
                  format: date-time
                nextPrivateKeySecretName:
                  description: The name of the Secret resource containing the private key to be used for the next certificate iteration. The keymanager controller will automatically set this field if the `Issuing` condition is set to `True`. It will automatically unset this field when the Issuing condition is not set or False.
                  type: string
                notAfter:
                  description: The expiration time of the certificate stored in the secret named by this resource in `spec.secretName`.
                  type: string
                  format: date-time
                notBefore:
                  description: The time after which the certificate stored in the secret named by this resource in spec.secretName is valid.
                  type: string
                  format: date-time
                renewalTime:
                  description: RenewalTime is the time at which the certificate will be next renewed. If not set, no upcoming renewal is scheduled.
                  type: string
                  format: date-time
                revision:
                  description: "The current 'revision' of the certificate as issued. \n When a CertificateRequest resource is created, it will have the `cert-manager.io/certificate-revision` set to one greater than the current value of this field. \n Upon issuance, this field will be set to the value of the annotation on the CertificateRequest resource used to issue the certificate. \n Persisting the value on the CertificateRequest resource allows the certificates controller to know whether a request is part of an old issuance or if it is part of the ongoing revision's issuance by checking if the revision value in the annotation is greater than this field."
                  type: integer
      served: true
      storage: true
---
# Source: gitlab/charts/certmanager/templates/crds.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: challenges.acme.cert-manager.io
  labels:
    app: 'certmanager'
    app.kubernetes.io/name: 'certmanager'
    app.kubernetes.io/instance: 'gitlab'
    # Generated labels
    app.kubernetes.io/version: "v1.12.6"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: certmanager-v1.12.6
spec:
  group: acme.cert-manager.io
  names:
    kind: Challenge
    listKind: ChallengeList
    plural: challenges
    singular: challenge
    categories:
      - cert-manager
      - cert-manager-acme
  scope: Namespaced
  versions:
    - additionalPrinterColumns:
        - jsonPath: .status.state
          name: State
          type: string
        - jsonPath: .spec.dnsName
          name: Domain
          type: string
        - jsonPath: .status.reason
          name: Reason
          priority: 1
          type: string
        - description: CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
          jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
      name: v1
      schema:
        openAPIV3Schema:
          description: Challenge is a type to represent a Challenge request with an ACME server
          type: object
          required:
            - metadata
            - spec
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              type: object
              required:
                - authorizationURL
                - dnsName
                - issuerRef
                - key
                - solver
                - token
                - type
                - url
              properties:
                authorizationURL:
                  description: The URL to the ACME Authorization resource that this challenge is a part of.
                  type: string
                dnsName:
                  description: dnsName is the identifier that this challenge is for, e.g. example.com. If the requested DNSName is a 'wildcard', this field MUST be set to the non-wildcard domain, e.g. for `*.example.com`, it must be `example.com`.
                  type: string
                issuerRef:
                  description: References a properly configured ACME-type Issuer which should be used to create this Challenge. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Challenge will be marked as failed.
                  type: object
                  required:
                    - name
                  properties:
                    group:
                      description: Group of the resource being referred to.
                      type: string
                    kind:
                      description: Kind of the resource being referred to.
                      type: string
                    name:
                      description: Name of the resource being referred to.
                      type: string
                key:
                  description: 'The ACME challenge key for this challenge For HTTP01 challenges, this is the value that must be responded with to complete the HTTP01 challenge in the format: `<private key JWK thumbprint>.<key from acme server for challenge>`. For DNS01 challenges, this is the base64 encoded SHA256 sum of the `<private key JWK thumbprint>.<key from acme server for challenge>` text that must be set as the TXT record content.'
                  type: string
                solver:
                  description: Contains the domain solving configuration that should be used to solve this challenge resource.
                  type: object
                  properties:
                    dns01:
                      description: Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
                      type: object
                      properties:
                        acmeDNS:
                          description: Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
                          type: object
                          required:
                            - accountSecretRef
                            - host
                          properties:
                            accountSecretRef:
                              description: A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
                              type: object
                              required:
                                - name
                              properties:
                                key:
                                  description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                                  type: string
                                name:
                                  description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                            host:
                              type: string
                        akamai:
                          description: Use the Akamai DNS zone management API to manage DNS01 challenge records.
                          type: object
                          required:
                            - accessTokenSecretRef
                            - clientSecretSecretRef
                            - clientTokenSecretRef
                            - serviceConsumerDomain
                          properties:
                            accessTokenSecretRef:
                              description: A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
                              type: object
                              required:
                                - name
                              properties:
                                key:
                                  description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                                  type: string
                                name:
                                  description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                            clientSecretSecretRef:
                              description: A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
                              type: object
                              required:
                                - name
                              properties:
                                key:
                                  description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                                  type: string
                                name:
                                  description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                            clientTokenSecretRef:
                              description: A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
                              type: object
                              required:
                                - name
                              properties:
                                key:
                                  description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                                  type: string
                                name:
                                  description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                            serviceConsumerDomain:
                              type: string
                        azureDNS:
                          description: Use the Microsoft Azure DNS API to manage DNS01 challenge records.
                          type: object
                          required:
                            - resourceGroupName
                            - subscriptionID
                          properties:
                            clientID:
                              description: if both this and ClientSecret are left unset MSI will be used
                              type: string
                            clientSecretSecretRef:
                              description: if both this and ClientID are left unset MSI will be used
                              type: object
                              required:
                                - name
                              properties:
                                key:
                                  description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                                  type: string
                                name:
                                  description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                            environment:
                              description: name of the Azure environment (default AzurePublicCloud)
                              type: string
                              enum:
                                - AzurePublicCloud
                                - AzureChinaCloud
                                - AzureGermanCloud
                                - AzureUSGovernmentCloud
                            hostedZoneName:
                              description: name of the DNS zone that should be used
                              type: string
                            managedIdentity:
                              description: managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
                              type: object
                              properties:
                                clientID:
                                  description: client ID of the managed identity, can not be used at the same time as resourceID
                                  type: string
                                resourceID:
                                  description: resource ID of the managed identity, can not be used at the same time as clientID
                                  type: string
                            resourceGroupName:
                              description: resource group the DNS zone is located in
                              type: string
                            subscriptionID:
                              description: ID of the Azure subscription
                              type: string
                            tenantID:
                              description: when specifying ClientID and ClientSecret then this field is also needed
                              type: string
                        cloudDNS:
                          description: Use the Google Cloud DNS API to manage DNS01 challenge records.
                          type: object
                          required:
                            - project
                          properties:
                            hostedZoneName:
                              description: HostedZoneName is an optional field that tells cert-manager in which Cloud DNS zone the challenge record has to be created. If left empty cert-manager will automatically choose a zone.
                              type: string
                            project:
                              type: string
                            serviceAccountSecretRef:
                              description: A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
                              type: object
                              required:
                                - name
                              properties:
                                key:
                                  description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                                  type: string
                                name:
                                  description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                        cloudflare:
                          description: Use the Cloudflare API to manage DNS01 challenge records.
                          type: object
                          properties:
                            apiKeySecretRef:
                              description: 'API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.'
                              type: object
                              required:
                                - name
                              properties:
                                key:
                                  description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                                  type: string
                                name:
                                  description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                            apiTokenSecretRef:
                              description: API token used to authenticate with Cloudflare.
                              type: object
                              required:
                                - name
                              properties:
                                key:
                                  description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                                  type: string
                                name:
                                  description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                            email:
                              description: Email of the account, only required when using API key based authentication.
                              type: string
                        cnameStrategy:
                          description: CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones.
                          type: string
                          enum:
                            - None
                            - Follow
                        digitalocean:
                          description: Use the DigitalOcean DNS API to manage DNS01 challenge records.
                          type: object
                          required:
                            - tokenSecretRef
                          properties:
                            tokenSecretRef:
                              description: A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
                              type: object
                              required:
                                - name
                              properties:
                                key:
                                  description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                                  type: string
                                name:
                                  description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                        rfc2136:
                          description: Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
                          type: object
                          required:
                            - nameserver
                          properties:
                            nameserver:
                              description: The IP address or hostname of an authoritative DNS server supporting RFC2136 in the form host:port. If the host is an IPv6 address it must be enclosed in square brackets (e.g [2001:db8::1]) ; port is optional. This field is required.
                              type: string
                            tsigAlgorithm:
                              description: 'The TSIG Algorithm configured in the DNS supporting RFC2136. Used only when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined. Supported values are (case-insensitive): ``HMACMD5`` (default), ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.'
                              type: string
                            tsigKeyName:
                              description: The TSIG Key name configured in the DNS. If ``tsigSecretSecretRef`` is defined, this field is required.
                              type: string
                            tsigSecretSecretRef:
                              description: The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
                              type: object
                              required:
                                - name
                              properties:
                                key:
                                  description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                                  type: string
                                name:
                                  description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                        route53:
                          description: Use the AWS Route53 API to manage DNS01 challenge records.
                          type: object
                          required:
                            - region
                          properties:
                            accessKeyID:
                              description: 'The AccessKeyID is used for authentication. Cannot be set when SecretAccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials'
                              type: string
                            accessKeyIDSecretRef:
                              description: 'The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials'
                              type: object
                              required:
                                - name
                              properties:
                                key:
                                  description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                                  type: string
                                name:
                                  description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                            hostedZoneID:
                              description: If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.
                              type: string
                            region:
                              description: Always set the region when using AccessKeyID and SecretAccessKey
                              type: string
                            role:
                              description: Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
                              type: string
                            secretAccessKeySecretRef:
                              description: 'The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials'
                              type: object
                              required:
                                - name
                              properties:
                                key:
                                  description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                                  type: string
                                name:
                                  description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                        webhook:
                          description: Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
                          type: object
                          required:
                            - groupName
                            - solverName
                          properties:
                            config:
                              description: Additional configuration that should be passed to the webhook apiserver when challenges are processed. This can contain arbitrary JSON data. Secret values should not be specified in this stanza. If secret values are needed (e.g. credentials for a DNS service), you should use a SecretKeySelector to reference a Secret resource. For details on the schema of this field, consult the webhook provider implementation's documentation.
                              x-kubernetes-preserve-unknown-fields: true
                            groupName:
                              description: The API group name that should be used when POSTing ChallengePayload resources to the webhook apiserver. This should be the same as the GroupName specified in the webhook provider implementation.
                              type: string
                            solverName:
                              description: The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. 'cloudflare'.
                              type: string
                    http01:
                      description: Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
                      type: object
                      properties:
                        gatewayHTTPRoute:
                          description: The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
                          type: object
                          properties:
                            labels:
                              description: Custom labels that will be applied to HTTPRoutes created by cert-manager while solving HTTP-01 challenges.
                              type: object
                              additionalProperties:
                                type: string
                            parentRefs:
                              description: 'When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute. cert-manager needs to know which parentRefs should be used when creating the HTTPRoute. Usually, the parentRef references a Gateway. See: https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways'
                              type: array
                              items:
                                description: "ParentReference identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). The only kind of parent resource with \"Core\" support is Gateway. This API may be extended in the future to support additional kinds of parent resources, such as HTTPRoute. \n The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid."
                                type: object
                                required:
                                  - name
                                properties:
                                  group:
                                    description: "Group is the group of the referent. When unspecified, \"gateway.networking.k8s.io\" is inferred. To set the core API group (such as for a \"Service\" kind referent), Group must be explicitly set to \"\" (empty string). \n Support: Core"
                                    type: string
                                    default: gateway.networking.k8s.io
                                    maxLength: 253
                                    pattern: ^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
                                  kind:
                                    description: "Kind is kind of the referent. \n Support: Core (Gateway) \n Support: Implementation-specific (Other Resources)"
                                    type: string
                                    default: Gateway
                                    maxLength: 63
                                    minLength: 1
                                    pattern: ^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$
                                  name:
                                    description: "Name is the name of the referent. \n Support: Core"
                                    type: string
                                    maxLength: 253
                                    minLength: 1
                                  namespace:
                                    description: "Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. \n Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. \n Support: Core"
                                    type: string
                                    maxLength: 63
                                    minLength: 1
                                    pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$
                                  port:
                                    description: "Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. \n When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. \n Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. \n For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. \n Support: Extended \n <gateway:experimental>"
                                    type: integer
                                    format: int32
                                    maximum: 65535
                                    minimum: 1
                                  sectionName:
                                    description: "SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: \n * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. \n Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. \n When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. \n Support: Core"
                                    type: string
                                    maxLength: 253
                                    minLength: 1
                                    pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
                            serviceType:
                              description: Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
                              type: string
                        ingress:
                          description: The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
                          type: object
                          properties:
                            class:
                              description: This field configures the annotation `kubernetes.io/ingress.class` when creating Ingress resources to solve ACME challenges that use this challenge solver. Only one of `class`, `name` or `ingressClassName` may be specified.
                              type: string
                            ingressClassName:
                              description: This field configures the field `ingressClassName` on the created Ingress resources used to solve ACME challenges that use this challenge solver. This is the recommended way of configuring the ingress class. Only one of `class`, `name` or `ingressClassName` may be specified.
                              type: string
                            ingressTemplate:
                              description: Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
                              type: object
                              properties:
                                metadata:
                                  description: ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
                                  type: object
                                  properties:
                                    annotations:
                                      description: Annotations that should be added to the created ACME HTTP01 solver ingress.
                                      type: object
                                      additionalProperties:
                                        type: string
                                    labels:
                                      description: Labels that should be added to the created ACME HTTP01 solver ingress.
                                      type: object
                                      additionalProperties:
                                        type: string
                            name:
                              description: The name of the ingress resource that should have ACME challenge solving routes inserted into it in order to solve HTTP01 challenges. This is typically used in conjunction with ingress controllers like ingress-gce, which maintains a 1:1 mapping between external IPs and ingress resources. Only one of `class`, `name` or `ingressClassName` may be specified.
                              type: string
                            podTemplate:
                              description: Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
                              type: object
                              properties:
                                metadata:
                                  description: ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
                                  type: object
                                  properties:
                                    annotations:
                                      description: Annotations that should be added to the create ACME HTTP01 solver pods.
                                      type: object
                                      additionalProperties:
                                        type: string
                                    labels:
                                      description: Labels that should be added to the created ACME HTTP01 solver pods.
                                      type: object
                                      additionalProperties:
                                        type: string
                                spec:
                                  description: PodSpec defines overrides for the HTTP01 challenge solver pod. Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields. All other fields will be ignored.
                                  type: object
                                  properties:
                                    affinity:
                                      description: If specified, the pod's scheduling constraints
                                      type: object
                                      properties:
                                        nodeAffinity:
                                          description: Describes node affinity scheduling rules for the pod.
                                          type: object
                                          properties:
                                            preferredDuringSchedulingIgnoredDuringExecution:
                                              description: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
                                              type: array
                                              items:
                                                description: An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
                                                type: object
                                                required:
                                                  - preference
                                                  - weight
                                                properties:
                                                  preference:
                                                    description: A node selector term, associated with the corresponding weight.
                                                    type: object
                                                    properties:
                                                      matchExpressions:
                                                        description: A list of node selector requirements by node's labels.
                                                        type: array
                                                        items:
                                                          description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                          type: object
                                                          required:
                                                            - key
                                                            - operator
                                                          properties:
                                                            key:
                                                              description: The label key that the selector applies to.
                                                              type: string
                                                            operator:
                                                              description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                                              type: string
                                                            values:
                                                              description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                                              type: array
                                                              items:
                                                                type: string
                                                      matchFields:
                                                        description: A list of node selector requirements by node's fields.
                                                        type: array
                                                        items:
                                                          description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                          type: object
                                                          required:
                                                            - key
                                                            - operator
                                                          properties:
                                                            key:
                                                              description: The label key that the selector applies to.
                                                              type: string
                                                            operator:
                                                              description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                                              type: string
                                                            values:
                                                              description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                                              type: array
                                                              items:
                                                                type: string
                                                    x-kubernetes-map-type: atomic
                                                  weight:
                                                    description: Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
                                                    type: integer
                                                    format: int32
                                            requiredDuringSchedulingIgnoredDuringExecution:
                                              description: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
                                              type: object
                                              required:
                                                - nodeSelectorTerms
                                              properties:
                                                nodeSelectorTerms:
                                                  description: Required. A list of node selector terms. The terms are ORed.
                                                  type: array
                                                  items:
                                                    description: A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
                                                    type: object
                                                    properties:
                                                      matchExpressions:
                                                        description: A list of node selector requirements by node's labels.
                                                        type: array
                                                        items:
                                                          description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                          type: object
                                                          required:
                                                            - key
                                                            - operator
                                                          properties:
                                                            key:
                                                              description: The label key that the selector applies to.
                                                              type: string
                                                            operator:
                                                              description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                                              type: string
                                                            values:
                                                              description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                                              type: array
                                                              items:
                                                                type: string
                                                      matchFields:
                                                        description: A list of node selector requirements by node's fields.
                                                        type: array
                                                        items:
                                                          description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                          type: object
                                                          required:
                                                            - key
                                                            - operator
                                                          properties:
                                                            key:
                                                              description: The label key that the selector applies to.
                                                              type: string
                                                            operator:
                                                              description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                                              type: string
                                                            values:
                                                              description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                                              type: array
                                                              items:
                                                                type: string
                                                    x-kubernetes-map-type: atomic
                                              x-kubernetes-map-type: atomic
                                        podAffinity:
                                          description: Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
                                          type: object
                                          properties:
                                            preferredDuringSchedulingIgnoredDuringExecution:
                                              description: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
                                              type: array
                                              items:
                                                description: The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
                                                type: object
                                                required:
                                                  - podAffinityTerm
                                                  - weight
                                                properties:
                                                  podAffinityTerm:
                                                    description: Required. A pod affinity term, associated with the corresponding weight.
                                                    type: object
                                                    required:
                                                      - topologyKey
                                                    properties:
                                                      labelSelector:
                                                        description: A label query over a set of resources, in this case pods.
                                                        type: object
                                                        properties:
                                                          matchExpressions:
                                                            description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                                            type: array
                                                            items:
                                                              description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                              type: object
                                                              required:
                                                                - key
                                                                - operator
                                                              properties:
                                                                key:
                                                                  description: key is the label key that the selector applies to.
                                                                  type: string
                                                                operator:
                                                                  description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                                  type: string
                                                                values:
                                                                  description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                                  type: array
                                                                  items:
                                                                    type: string
                                                          matchLabels:
                                                            description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                                            type: object
                                                            additionalProperties:
                                                              type: string
                                                        x-kubernetes-map-type: atomic
                                                      namespaceSelector:
                                                        description: A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
                                                        type: object
                                                        properties:
                                                          matchExpressions:
                                                            description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                                            type: array
                                                            items:
                                                              description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                              type: object
                                                              required:
                                                                - key
                                                                - operator
                                                              properties:
                                                                key:
                                                                  description: key is the label key that the selector applies to.
                                                                  type: string
                                                                operator:
                                                                  description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                                  type: string
                                                                values:
                                                                  description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                                  type: array
                                                                  items:
                                                                    type: string
                                                          matchLabels:
                                                            description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                                            type: object
                                                            additionalProperties:
                                                              type: string
                                                        x-kubernetes-map-type: atomic
                                                      namespaces:
                                                        description: namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                                        type: array
                                                        items:
                                                          type: string
                                                      topologyKey:
                                                        description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                                                        type: string
                                                  weight:
                                                    description: weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
                                                    type: integer
                                                    format: int32
                                            requiredDuringSchedulingIgnoredDuringExecution:
                                              description: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
                                              type: array
                                              items:
                                                description: Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
                                                type: object
                                                required:
                                                  - topologyKey
                                                properties:
                                                  labelSelector:
                                                    description: A label query over a set of resources, in this case pods.
                                                    type: object
                                                    properties:
                                                      matchExpressions:
                                                        description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                                        type: array
                                                        items:
                                                          description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                          type: object
                                                          required:
                                                            - key
                                                            - operator
                                                          properties:
                                                            key:
                                                              description: key is the label key that the selector applies to.
                                                              type: string
                                                            operator:
                                                              description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                              type: string
                                                            values:
                                                              description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                              type: array
                                                              items:
                                                                type: string
                                                      matchLabels:
                                                        description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                                        type: object
                                                        additionalProperties:
                                                          type: string
                                                    x-kubernetes-map-type: atomic
                                                  namespaceSelector:
                                                    description: A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
                                                    type: object
                                                    properties:
                                                      matchExpressions:
                                                        description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                                        type: array
                                                        items:
                                                          description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                          type: object
                                                          required:
                                                            - key
                                                            - operator
                                                          properties:
                                                            key:
                                                              description: key is the label key that the selector applies to.
                                                              type: string
                                                            operator:
                                                              description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                              type: string
                                                            values:
                                                              description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                              type: array
                                                              items:
                                                                type: string
                                                      matchLabels:
                                                        description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                                        type: object
                                                        additionalProperties:
                                                          type: string
                                                    x-kubernetes-map-type: atomic
                                                  namespaces:
                                                    description: namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                                    type: array
                                                    items:
                                                      type: string
                                                  topologyKey:
                                                    description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                                                    type: string
                                        podAntiAffinity:
                                          description: Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
                                          type: object
                                          properties:
                                            preferredDuringSchedulingIgnoredDuringExecution:
                                              description: The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
                                              type: array
                                              items:
                                                description: The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
                                                type: object
                                                required:
                                                  - podAffinityTerm
                                                  - weight
                                                properties:
                                                  podAffinityTerm:
                                                    description: Required. A pod affinity term, associated with the corresponding weight.
                                                    type: object
                                                    required:
                                                      - topologyKey
                                                    properties:
                                                      labelSelector:
                                                        description: A label query over a set of resources, in this case pods.
                                                        type: object
                                                        properties:
                                                          matchExpressions:
                                                            description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                                            type: array
                                                            items:
                                                              description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                              type: object
                                                              required:
                                                                - key
                                                                - operator
                                                              properties:
                                                                key:
                                                                  description: key is the label key that the selector applies to.
                                                                  type: string
                                                                operator:
                                                                  description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                                  type: string
                                                                values:
                                                                  description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                                  type: array
                                                                  items:
                                                                    type: string
                                                          matchLabels:
                                                            description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                                            type: object
                                                            additionalProperties:
                                                              type: string
                                                        x-kubernetes-map-type: atomic
                                                      namespaceSelector:
                                                        description: A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
                                                        type: object
                                                        properties:
                                                          matchExpressions:
                                                            description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                                            type: array
                                                            items:
                                                              description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                              type: object
                                                              required:
                                                                - key
                                                                - operator
                                                              properties:
                                                                key:
                                                                  description: key is the label key that the selector applies to.
                                                                  type: string
                                                                operator:
                                                                  description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                                  type: string
                                                                values:
                                                                  description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                                  type: array
                                                                  items:
                                                                    type: string
                                                          matchLabels:
                                                            description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                                            type: object
                                                            additionalProperties:
                                                              type: string
                                                        x-kubernetes-map-type: atomic
                                                      namespaces:
                                                        description: namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                                        type: array
                                                        items:
                                                          type: string
                                                      topologyKey:
                                                        description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                                                        type: string
                                                  weight:
                                                    description: weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
                                                    type: integer
                                                    format: int32
                                            requiredDuringSchedulingIgnoredDuringExecution:
                                              description: If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
                                              type: array
                                              items:
                                                description: Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
                                                type: object
                                                required:
                                                  - topologyKey
                                                properties:
                                                  labelSelector:
                                                    description: A label query over a set of resources, in this case pods.
                                                    type: object
                                                    properties:
                                                      matchExpressions:
                                                        description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                                        type: array
                                                        items:
                                                          description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                          type: object
                                                          required:
                                                            - key
                                                            - operator
                                                          properties:
                                                            key:
                                                              description: key is the label key that the selector applies to.
                                                              type: string
                                                            operator:
                                                              description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                              type: string
                                                            values:
                                                              description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                              type: array
                                                              items:
                                                                type: string
                                                      matchLabels:
                                                        description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                                        type: object
                                                        additionalProperties:
                                                          type: string
                                                    x-kubernetes-map-type: atomic
                                                  namespaceSelector:
                                                    description: A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
                                                    type: object
                                                    properties:
                                                      matchExpressions:
                                                        description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                                        type: array
                                                        items:
                                                          description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                          type: object
                                                          required:
                                                            - key
                                                            - operator
                                                          properties:
                                                            key:
                                                              description: key is the label key that the selector applies to.
                                                              type: string
                                                            operator:
                                                              description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                              type: string
                                                            values:
                                                              description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                              type: array
                                                              items:
                                                                type: string
                                                      matchLabels:
                                                        description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                                        type: object
                                                        additionalProperties:
                                                          type: string
                                                    x-kubernetes-map-type: atomic
                                                  namespaces:
                                                    description: namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                                    type: array
                                                    items:
                                                      type: string
                                                  topologyKey:
                                                    description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                                                    type: string
                                    imagePullSecrets:
                                      description: If specified, the pod's imagePullSecrets
                                      type: array
                                      items:
                                        description: LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
                                        type: object
                                        properties:
                                          name:
                                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                                            type: string
                                        x-kubernetes-map-type: atomic
                                    nodeSelector:
                                      description: 'NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node''s labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/'
                                      type: object
                                      additionalProperties:
                                        type: string
                                    priorityClassName:
                                      description: If specified, the pod's priorityClassName.
                                      type: string
                                    serviceAccountName:
                                      description: If specified, the pod's service account
                                      type: string
                                    tolerations:
                                      description: If specified, the pod's tolerations.
                                      type: array
                                      items:
                                        description: The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
                                        type: object
                                        properties:
                                          effect:
                                            description: Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
                                            type: string
                                          key:
                                            description: Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
                                            type: string
                                          operator:
                                            description: Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
                                            type: string
                                          tolerationSeconds:
                                            description: TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
                                            type: integer
                                            format: int64
                                          value:
                                            description: Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
                                            type: string
                            serviceType:
                              description: Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
                              type: string
                    selector:
                      description: Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
                      type: object
                      properties:
                        dnsNames:
                          description: List of DNSNames that this solver will be used to solve. If specified and a match is found, a dnsNames selector will take precedence over a dnsZones selector. If multiple solvers match with the same dnsNames value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
                          type: array
                          items:
                            type: string
                        dnsZones:
                          description: List of DNSZones that this solver will be used to solve. The most specific DNS zone match specified here will take precedence over other DNS zone matches, so a solver specifying sys.example.com will be selected over one specifying example.com for the domain www.sys.example.com. If multiple solvers match with the same dnsZones value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
                          type: array
                          items:
                            type: string
                        matchLabels:
                          description: A label selector that is used to refine the set of certificate's that this challenge solver will apply to.
                          type: object
                          additionalProperties:
                            type: string
                token:
                  description: The ACME challenge token for this challenge. This is the raw value returned from the ACME server.
                  type: string
                type:
                  description: The type of ACME challenge this resource represents. One of "HTTP-01" or "DNS-01".
                  type: string
                  enum:
                    - HTTP-01
                    - DNS-01
                url:
                  description: The URL of the ACME Challenge resource for this challenge. This can be used to lookup details about the status of this challenge.
                  type: string
                wildcard:
                  description: wildcard will be true if this challenge is for a wildcard identifier, for example '*.example.com'.
                  type: boolean
            status:
              type: object
              properties:
                presented:
                  description: presented will be set to true if the challenge values for this challenge are currently 'presented'. This *does not* imply the self check is passing. Only that the values have been 'submitted' for the appropriate challenge mechanism (i.e. the DNS01 TXT record has been presented, or the HTTP01 configuration has been configured).
                  type: boolean
                processing:
                  description: Used to denote whether this challenge should be processed or not. This field will only be set to true by the 'scheduling' component. It will only be set to false by the 'challenges' controller, after the challenge has reached a final state or timed out. If this field is set to false, the challenge controller will not take any more action.
                  type: boolean
                reason:
                  description: Contains human readable information on why the Challenge is in the current state.
                  type: string
                state:
                  description: Contains the current 'state' of the challenge. If not set, the state of the challenge is unknown.
                  type: string
                  enum:
                    - valid
                    - ready
                    - pending
                    - processing
                    - invalid
                    - expired
                    - errored
      served: true
      storage: true
      subresources:
        status: {}
---
# Source: gitlab/charts/certmanager/templates/crds.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: clusterissuers.cert-manager.io
  labels:
    app: 'certmanager'
    app.kubernetes.io/name: 'certmanager'
    app.kubernetes.io/instance: "gitlab"
    # Generated labels
    app.kubernetes.io/version: "v1.12.6"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: certmanager-v1.12.6
spec:
  group: cert-manager.io
  names:
    kind: ClusterIssuer
    listKind: ClusterIssuerList
    plural: clusterissuers
    singular: clusterissuer
    categories:
      - cert-manager
  scope: Namespaced
  versions:
    - name: v1
      subresources:
        status: {}
      additionalPrinterColumns:
        - jsonPath: .status.conditions[?(@.type=="Ready")].status
          name: Ready
          type: string
        - jsonPath: .status.conditions[?(@.type=="Ready")].message
          name: Status
          priority: 1
          type: string
        - jsonPath: .metadata.creationTimestamp
          description: CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
          name: Age
          type: date
      schema:
        openAPIV3Schema:
          description: A ClusterIssuer represents a certificate issuing authority which can be referenced as part of `issuerRef` fields. It is similar to an Issuer, however it is cluster-scoped and therefore can be referenced by resources that exist in *any* namespace, not just the same namespace as the referent.
          type: object
          required:
            - spec
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: Desired state of the ClusterIssuer resource.
              type: object
              properties:
                acme:
                  description: ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
                  type: object
                  required:
                    - privateKeySecretRef
                    - server
                  properties:
                    caBundle:
                      description: Base64-encoded bundle of PEM CAs which can be used to validate the certificate chain presented by the ACME server. Mutually exclusive with SkipTLSVerify; prefer using CABundle to prevent various kinds of security vulnerabilities. If CABundle and SkipTLSVerify are unset, the system certificate bundle inside the container is used to validate the TLS connection.
                      type: string
                      format: byte
                    disableAccountKeyGeneration:
                      description: Enables or disables generating a new ACME account key. If true, the Issuer resource will *not* request a new account but will expect the account key to be supplied via an existing secret. If false, the cert-manager system will generate a new ACME account key for the Issuer. Defaults to false.
                      type: boolean
                    email:
                      description: Email is the email address to be associated with the ACME account. This field is optional, but it is strongly recommended to be set. It will be used to contact you in case of issues with your account or certificates, including expiry notification emails. This field may be updated after the account is initially registered.
                      type: string
                    enableDurationFeature:
                      description: Enables requesting a Not After date on certificates that matches the duration of the certificate. This is not supported by all ACME servers like Let's Encrypt. If set to true when the ACME server does not support it it will create an error on the Order. Defaults to false.
                      type: boolean
                    externalAccountBinding:
                      description: ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.
                      type: object
                      required:
                        - keyID
                        - keySecretRef
                      properties:
                        keyAlgorithm:
                          description: 'Deprecated: keyAlgorithm field exists for historical compatibility reasons and should not be used. The algorithm is now hardcoded to HS256 in golang/x/crypto/acme.'
                          type: string
                          enum:
                            - HS256
                            - HS384
                            - HS512
                        keyID:
                          description: keyID is the ID of the CA key that the External Account is bound to.
                          type: string
                        keySecretRef:
                          description: keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.
                          type: object
                          required:
                            - name
                          properties:
                            key:
                              description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                              type: string
                            name:
                              description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                    preferredChain:
                      description: 'PreferredChain is the chain to use if the ACME server outputs multiple. PreferredChain is no guarantee that this one gets delivered by the ACME endpoint. For example, for Let''s Encrypt''s DST crosssign you would use: "DST Root CA X3" or "ISRG Root X1" for the newer Let''s Encrypt root CA. This value picks the first certificate bundle in the ACME alternative chains that has a certificate with this value as its issuer''s CN'
                      type: string
                      maxLength: 64
                    privateKeySecretRef:
                      description: PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.
                      type: object
                      required:
                        - name
                      properties:
                        key:
                          description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                          type: string
                        name:
                          description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                    server:
                      description: 'Server is the URL used to access the ACME server''s ''directory'' endpoint. For example, for Let''s Encrypt''s staging endpoint, you would use: "https://acme-staging-v02.api.letsencrypt.org/directory". Only ACME v2 endpoints (i.e. RFC 8555) are supported.'
                      type: string
                    skipTLSVerify:
                      description: 'INSECURE: Enables or disables validation of the ACME server TLS certificate. If true, requests to the ACME server will not have the TLS certificate chain validated. Mutually exclusive with CABundle; prefer using CABundle to prevent various kinds of security vulnerabilities. Only enable this option in development environments. If CABundle and SkipTLSVerify are unset, the system certificate bundle inside the container is used to validate the TLS connection. Defaults to false.'
                      type: boolean
                    solvers:
                      description: 'Solvers is a list of challenge solvers that will be used to solve ACME challenges for the matching domains. Solver configurations must be provided in order to obtain certificates from an ACME server. For more information, see: https://cert-manager.io/docs/configuration/acme/'
                      type: array
                      items:
                        description: An ACMEChallengeSolver describes how to solve ACME challenges for the issuer it is part of. A selector may be provided to use different solving strategies for different DNS names. Only one of HTTP01 or DNS01 must be provided.
                        type: object
                        properties:
                          dns01:
                            description: Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
                            type: object
                            properties:
                              acmeDNS:
                                description: Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
                                type: object
                                required:
                                  - accountSecretRef
                                  - host
                                properties:
                                  accountSecretRef:
                                    description: A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
                                    type: object
                                    required:
                                      - name
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                  host:
                                    type: string
                              akamai:
                                description: Use the Akamai DNS zone management API to manage DNS01 challenge records.
                                type: object
                                required:
                                  - accessTokenSecretRef
                                  - clientSecretSecretRef
                                  - clientTokenSecretRef
                                  - serviceConsumerDomain
                                properties:
                                  accessTokenSecretRef:
                                    description: A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
                                    type: object
                                    required:
                                      - name
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                  clientSecretSecretRef:
                                    description: A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
                                    type: object
                                    required:
                                      - name
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                  clientTokenSecretRef:
                                    description: A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
                                    type: object
                                    required:
                                      - name
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                  serviceConsumerDomain:
                                    type: string
                              azureDNS:
                                description: Use the Microsoft Azure DNS API to manage DNS01 challenge records.
                                type: object
                                required:
                                  - resourceGroupName
                                  - subscriptionID
                                properties:
                                  clientID:
                                    description: if both this and ClientSecret are left unset MSI will be used
                                    type: string
                                  clientSecretSecretRef:
                                    description: if both this and ClientID are left unset MSI will be used
                                    type: object
                                    required:
                                      - name
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                  environment:
                                    description: name of the Azure environment (default AzurePublicCloud)
                                    type: string
                                    enum:
                                      - AzurePublicCloud
                                      - AzureChinaCloud
                                      - AzureGermanCloud
                                      - AzureUSGovernmentCloud
                                  hostedZoneName:
                                    description: name of the DNS zone that should be used
                                    type: string
                                  managedIdentity:
                                    description: managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
                                    type: object
                                    properties:
                                      clientID:
                                        description: client ID of the managed identity, can not be used at the same time as resourceID
                                        type: string
                                      resourceID:
                                        description: resource ID of the managed identity, can not be used at the same time as clientID
                                        type: string
                                  resourceGroupName:
                                    description: resource group the DNS zone is located in
                                    type: string
                                  subscriptionID:
                                    description: ID of the Azure subscription
                                    type: string
                                  tenantID:
                                    description: when specifying ClientID and ClientSecret then this field is also needed
                                    type: string
                              cloudDNS:
                                description: Use the Google Cloud DNS API to manage DNS01 challenge records.
                                type: object
                                required:
                                  - project
                                properties:
                                  hostedZoneName:
                                    description: HostedZoneName is an optional field that tells cert-manager in which Cloud DNS zone the challenge record has to be created. If left empty cert-manager will automatically choose a zone.
                                    type: string
                                  project:
                                    type: string
                                  serviceAccountSecretRef:
                                    description: A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
                                    type: object
                                    required:
                                      - name
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                              cloudflare:
                                description: Use the Cloudflare API to manage DNS01 challenge records.
                                type: object
                                properties:
                                  apiKeySecretRef:
                                    description: 'API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.'
                                    type: object
                                    required:
                                      - name
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                  apiTokenSecretRef:
                                    description: API token used to authenticate with Cloudflare.
                                    type: object
                                    required:
                                      - name
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                  email:
                                    description: Email of the account, only required when using API key based authentication.
                                    type: string
                              cnameStrategy:
                                description: CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones.
                                type: string
                                enum:
                                  - None
                                  - Follow
                              digitalocean:
                                description: Use the DigitalOcean DNS API to manage DNS01 challenge records.
                                type: object
                                required:
                                  - tokenSecretRef
                                properties:
                                  tokenSecretRef:
                                    description: A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
                                    type: object
                                    required:
                                      - name
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                              rfc2136:
                                description: Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
                                type: object
                                required:
                                  - nameserver
                                properties:
                                  nameserver:
                                    description: The IP address or hostname of an authoritative DNS server supporting RFC2136 in the form host:port. If the host is an IPv6 address it must be enclosed in square brackets (e.g [2001:db8::1]) ; port is optional. This field is required.
                                    type: string
                                  tsigAlgorithm:
                                    description: 'The TSIG Algorithm configured in the DNS supporting RFC2136. Used only when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined. Supported values are (case-insensitive): ``HMACMD5`` (default), ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.'
                                    type: string
                                  tsigKeyName:
                                    description: The TSIG Key name configured in the DNS. If ``tsigSecretSecretRef`` is defined, this field is required.
                                    type: string
                                  tsigSecretSecretRef:
                                    description: The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
                                    type: object
                                    required:
                                      - name
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                              route53:
                                description: Use the AWS Route53 API to manage DNS01 challenge records.
                                type: object
                                required:
                                  - region
                                properties:
                                  accessKeyID:
                                    description: 'The AccessKeyID is used for authentication. Cannot be set when SecretAccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials'
                                    type: string
                                  accessKeyIDSecretRef:
                                    description: 'The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials'
                                    type: object
                                    required:
                                      - name
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                  hostedZoneID:
                                    description: If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.
                                    type: string
                                  region:
                                    description: Always set the region when using AccessKeyID and SecretAccessKey
                                    type: string
                                  role:
                                    description: Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
                                    type: string
                                  secretAccessKeySecretRef:
                                    description: 'The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials'
                                    type: object
                                    required:
                                      - name
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                              webhook:
                                description: Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
                                type: object
                                required:
                                  - groupName
                                  - solverName
                                properties:
                                  config:
                                    description: Additional configuration that should be passed to the webhook apiserver when challenges are processed. This can contain arbitrary JSON data. Secret values should not be specified in this stanza. If secret values are needed (e.g. credentials for a DNS service), you should use a SecretKeySelector to reference a Secret resource. For details on the schema of this field, consult the webhook provider implementation's documentation.
                                    x-kubernetes-preserve-unknown-fields: true
                                  groupName:
                                    description: The API group name that should be used when POSTing ChallengePayload resources to the webhook apiserver. This should be the same as the GroupName specified in the webhook provider implementation.
                                    type: string
                                  solverName:
                                    description: The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. 'cloudflare'.
                                    type: string
                          http01:
                            description: Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
                            type: object
                            properties:
                              gatewayHTTPRoute:
                                description: The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
                                type: object
                                properties:
                                  labels:
                                    description: Custom labels that will be applied to HTTPRoutes created by cert-manager while solving HTTP-01 challenges.
                                    type: object
                                    additionalProperties:
                                      type: string
                                  parentRefs:
                                    description: 'When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute. cert-manager needs to know which parentRefs should be used when creating the HTTPRoute. Usually, the parentRef references a Gateway. See: https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways'
                                    type: array
                                    items:
                                      description: "ParentReference identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). The only kind of parent resource with \"Core\" support is Gateway. This API may be extended in the future to support additional kinds of parent resources, such as HTTPRoute. \n The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid."
                                      type: object
                                      required:
                                        - name
                                      properties:
                                        group:
                                          description: "Group is the group of the referent. When unspecified, \"gateway.networking.k8s.io\" is inferred. To set the core API group (such as for a \"Service\" kind referent), Group must be explicitly set to \"\" (empty string). \n Support: Core"
                                          type: string
                                          default: gateway.networking.k8s.io
                                          maxLength: 253
                                          pattern: ^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
                                        kind:
                                          description: "Kind is kind of the referent. \n Support: Core (Gateway) \n Support: Implementation-specific (Other Resources)"
                                          type: string
                                          default: Gateway
                                          maxLength: 63
                                          minLength: 1
                                          pattern: ^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$
                                        name:
                                          description: "Name is the name of the referent. \n Support: Core"
                                          type: string
                                          maxLength: 253
                                          minLength: 1
                                        namespace:
                                          description: "Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. \n Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. \n Support: Core"
                                          type: string
                                          maxLength: 63
                                          minLength: 1
                                          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$
                                        port:
                                          description: "Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. \n When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. \n Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. \n For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. \n Support: Extended \n <gateway:experimental>"
                                          type: integer
                                          format: int32
                                          maximum: 65535
                                          minimum: 1
                                        sectionName:
                                          description: "SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: \n * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. \n Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. \n When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. \n Support: Core"
                                          type: string
                                          maxLength: 253
                                          minLength: 1
                                          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
                                  serviceType:
                                    description: Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
                                    type: string
                              ingress:
                                description: The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
                                type: object
                                properties:
                                  class:
                                    description: This field configures the annotation `kubernetes.io/ingress.class` when creating Ingress resources to solve ACME challenges that use this challenge solver. Only one of `class`, `name` or `ingressClassName` may be specified.
                                    type: string
                                  ingressClassName:
                                    description: This field configures the field `ingressClassName` on the created Ingress resources used to solve ACME challenges that use this challenge solver. This is the recommended way of configuring the ingress class. Only one of `class`, `name` or `ingressClassName` may be specified.
                                    type: string
                                  ingressTemplate:
                                    description: Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
                                    type: object
                                    properties:
                                      metadata:
                                        description: ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
                                        type: object
                                        properties:
                                          annotations:
                                            description: Annotations that should be added to the created ACME HTTP01 solver ingress.
                                            type: object
                                            additionalProperties:
                                              type: string
                                          labels:
                                            description: Labels that should be added to the created ACME HTTP01 solver ingress.
                                            type: object
                                            additionalProperties:
                                              type: string
                                  name:
                                    description: The name of the ingress resource that should have ACME challenge solving routes inserted into it in order to solve HTTP01 challenges. This is typically used in conjunction with ingress controllers like ingress-gce, which maintains a 1:1 mapping between external IPs and ingress resources. Only one of `class`, `name` or `ingressClassName` may be specified.
                                    type: string
                                  podTemplate:
                                    description: Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
                                    type: object
                                    properties:
                                      metadata:
                                        description: ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
                                        type: object
                                        properties:
                                          annotations:
                                            description: Annotations that should be added to the create ACME HTTP01 solver pods.
                                            type: object
                                            additionalProperties:
                                              type: string
                                          labels:
                                            description: Labels that should be added to the created ACME HTTP01 solver pods.
                                            type: object
                                            additionalProperties:
                                              type: string
                                      spec:
                                        description: PodSpec defines overrides for the HTTP01 challenge solver pod. Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields. All other fields will be ignored.
                                        type: object
                                        properties:
                                          affinity:
                                            description: If specified, the pod's scheduling constraints
                                            type: object
                                            properties:
                                              nodeAffinity:
                                                description: Describes node affinity scheduling rules for the pod.
                                                type: object
                                                properties:
                                                  preferredDuringSchedulingIgnoredDuringExecution:
                                                    description: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
                                                    type: array
                                                    items:
                                                      description: An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
                                                      type: object
                                                      required:
                                                        - preference
                                                        - weight
                                                      properties:
                                                        preference:
                                                          description: A node selector term, associated with the corresponding weight.
                                                          type: object
                                                          properties:
                                                            matchExpressions:
                                                              description: A list of node selector requirements by node's labels.
                                                              type: array
                                                              items:
                                                                description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                                type: object
                                                                required:
                                                                  - key
                                                                  - operator
                                                                properties:
                                                                  key:
                                                                    description: The label key that the selector applies to.
                                                                    type: string
                                                                  operator:
                                                                    description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                                                    type: string
                                                                  values:
                                                                    description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                                                    type: array
                                                                    items:
                                                                      type: string
                                                            matchFields:
                                                              description: A list of node selector requirements by node's fields.
                                                              type: array
                                                              items:
                                                                description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                                type: object
                                                                required:
                                                                  - key
                                                                  - operator
                                                                properties:
                                                                  key:
                                                                    description: The label key that the selector applies to.
                                                                    type: string
                                                                  operator:
                                                                    description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                                                    type: string
                                                                  values:
                                                                    description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                                                    type: array
                                                                    items:
                                                                      type: string
                                                          x-kubernetes-map-type: atomic
                                                        weight:
                                                          description: Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
                                                          type: integer
                                                          format: int32
                                                  requiredDuringSchedulingIgnoredDuringExecution:
                                                    description: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
                                                    type: object
                                                    required:
                                                      - nodeSelectorTerms
                                                    properties:
                                                      nodeSelectorTerms:
                                                        description: Required. A list of node selector terms. The terms are ORed.
                                                        type: array
                                                        items:
                                                          description: A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
                                                          type: object
                                                          properties:
                                                            matchExpressions:
                                                              description: A list of node selector requirements by node's labels.
                                                              type: array
                                                              items:
                                                                description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                                type: object
                                                                required:
                                                                  - key
                                                                  - operator
                                                                properties:
                                                                  key:
                                                                    description: The label key that the selector applies to.
                                                                    type: string
                                                                  operator:
                                                                    description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                                                    type: string
                                                                  values:
                                                                    description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                                                    type: array
                                                                    items:
                                                                      type: string
                                                            matchFields:
                                                              description: A list of node selector requirements by node's fields.
                                                              type: array
                                                              items:
                                                                description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                                type: object
                                                                required:
                                                                  - key
                                                                  - operator
                                                                properties:
                                                                  key:
                                                                    description: The label key that the selector applies to.
                                                                    type: string
                                                                  operator:
                                                                    description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                                                    type: string
                                                                  values:
                                                                    description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                                                    type: array
                                                                    items:
                                                                      type: string
                                                          x-kubernetes-map-type: atomic
                                                    x-kubernetes-map-type: atomic
                                              podAffinity:
                                                description: Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
                                                type: object
                                                properties:
                                                  preferredDuringSchedulingIgnoredDuringExecution:
                                                    description: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
                                                    type: array
                                                    items:
                                                      description: The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
                                                      type: object
                                                      required:
                                                        - podAffinityTerm
                                                        - weight
                                                      properties:
                                                        podAffinityTerm:
                                                          description: Required. A pod affinity term, associated with the corresponding weight.
                                                          type: object
                                                          required:
                                                            - topologyKey
                                                          properties:
                                                            labelSelector:
                                                              description: A label query over a set of resources, in this case pods.
                                                              type: object
                                                              properties:
                                                                matchExpressions:
                                                                  description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                                                  type: array
                                                                  items:
                                                                    description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                                    type: object
                                                                    required:
                                                                      - key
                                                                      - operator
                                                                    properties:
                                                                      key:
                                                                        description: key is the label key that the selector applies to.
                                                                        type: string
                                                                      operator:
                                                                        description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                                        type: string
                                                                      values:
                                                                        description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                                        type: array
                                                                        items:
                                                                          type: string
                                                                matchLabels:
                                                                  description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                                                  type: object
                                                                  additionalProperties:
                                                                    type: string
                                                              x-kubernetes-map-type: atomic
                                                            namespaceSelector:
                                                              description: A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
                                                              type: object
                                                              properties:
                                                                matchExpressions:
                                                                  description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                                                  type: array
                                                                  items:
                                                                    description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                                    type: object
                                                                    required:
                                                                      - key
                                                                      - operator
                                                                    properties:
                                                                      key:
                                                                        description: key is the label key that the selector applies to.
                                                                        type: string
                                                                      operator:
                                                                        description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                                        type: string
                                                                      values:
                                                                        description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                                        type: array
                                                                        items:
                                                                          type: string
                                                                matchLabels:
                                                                  description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                                                  type: object
                                                                  additionalProperties:
                                                                    type: string
                                                              x-kubernetes-map-type: atomic
                                                            namespaces:
                                                              description: namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                                              type: array
                                                              items:
                                                                type: string
                                                            topologyKey:
                                                              description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                                                              type: string
                                                        weight:
                                                          description: weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
                                                          type: integer
                                                          format: int32
                                                  requiredDuringSchedulingIgnoredDuringExecution:
                                                    description: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
                                                    type: array
                                                    items:
                                                      description: Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
                                                      type: object
                                                      required:
                                                        - topologyKey
                                                      properties:
                                                        labelSelector:
                                                          description: A label query over a set of resources, in this case pods.
                                                          type: object
                                                          properties:
                                                            matchExpressions:
                                                              description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                                              type: array
                                                              items:
                                                                description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                                type: object
                                                                required:
                                                                  - key
                                                                  - operator
                                                                properties:
                                                                  key:
                                                                    description: key is the label key that the selector applies to.
                                                                    type: string
                                                                  operator:
                                                                    description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                                    type: string
                                                                  values:
                                                                    description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                                    type: array
                                                                    items:
                                                                      type: string
                                                            matchLabels:
                                                              description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                                              type: object
                                                              additionalProperties:
                                                                type: string
                                                          x-kubernetes-map-type: atomic
                                                        namespaceSelector:
                                                          description: A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
                                                          type: object
                                                          properties:
                                                            matchExpressions:
                                                              description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                                              type: array
                                                              items:
                                                                description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                                type: object
                                                                required:
                                                                  - key
                                                                  - operator
                                                                properties:
                                                                  key:
                                                                    description: key is the label key that the selector applies to.
                                                                    type: string
                                                                  operator:
                                                                    description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                                    type: string
                                                                  values:
                                                                    description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                                    type: array
                                                                    items:
                                                                      type: string
                                                            matchLabels:
                                                              description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                                              type: object
                                                              additionalProperties:
                                                                type: string
                                                          x-kubernetes-map-type: atomic
                                                        namespaces:
                                                          description: namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                                          type: array
                                                          items:
                                                            type: string
                                                        topologyKey:
                                                          description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                                                          type: string
                                              podAntiAffinity:
                                                description: Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
                                                type: object
                                                properties:
                                                  preferredDuringSchedulingIgnoredDuringExecution:
                                                    description: The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
                                                    type: array
                                                    items:
                                                      description: The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
                                                      type: object
                                                      required:
                                                        - podAffinityTerm
                                                        - weight
                                                      properties:
                                                        podAffinityTerm:
                                                          description: Required. A pod affinity term, associated with the corresponding weight.
                                                          type: object
                                                          required:
                                                            - topologyKey
                                                          properties:
                                                            labelSelector:
                                                              description: A label query over a set of resources, in this case pods.
                                                              type: object
                                                              properties:
                                                                matchExpressions:
                                                                  description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                                                  type: array
                                                                  items:
                                                                    description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                                    type: object
                                                                    required:
                                                                      - key
                                                                      - operator
                                                                    properties:
                                                                      key:
                                                                        description: key is the label key that the selector applies to.
                                                                        type: string
                                                                      operator:
                                                                        description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                                        type: string
                                                                      values:
                                                                        description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                                        type: array
                                                                        items:
                                                                          type: string
                                                                matchLabels:
                                                                  description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                                                  type: object
                                                                  additionalProperties:
                                                                    type: string
                                                              x-kubernetes-map-type: atomic
                                                            namespaceSelector:
                                                              description: A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
                                                              type: object
                                                              properties:
                                                                matchExpressions:
                                                                  description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                                                  type: array
                                                                  items:
                                                                    description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                                    type: object
                                                                    required:
                                                                      - key
                                                                      - operator
                                                                    properties:
                                                                      key:
                                                                        description: key is the label key that the selector applies to.
                                                                        type: string
                                                                      operator:
                                                                        description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                                        type: string
                                                                      values:
                                                                        description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                                        type: array
                                                                        items:
                                                                          type: string
                                                                matchLabels:
                                                                  description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                                                  type: object
                                                                  additionalProperties:
                                                                    type: string
                                                              x-kubernetes-map-type: atomic
                                                            namespaces:
                                                              description: namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                                              type: array
                                                              items:
                                                                type: string
                                                            topologyKey:
                                                              description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                                                              type: string
                                                        weight:
                                                          description: weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
                                                          type: integer
                                                          format: int32
                                                  requiredDuringSchedulingIgnoredDuringExecution:
                                                    description: If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
                                                    type: array
                                                    items:
                                                      description: Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
                                                      type: object
                                                      required:
                                                        - topologyKey
                                                      properties:
                                                        labelSelector:
                                                          description: A label query over a set of resources, in this case pods.
                                                          type: object
                                                          properties:
                                                            matchExpressions:
                                                              description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                                              type: array
                                                              items:
                                                                description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                                type: object
                                                                required:
                                                                  - key
                                                                  - operator
                                                                properties:
                                                                  key:
                                                                    description: key is the label key that the selector applies to.
                                                                    type: string
                                                                  operator:
                                                                    description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                                    type: string
                                                                  values:
                                                                    description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                                    type: array
                                                                    items:
                                                                      type: string
                                                            matchLabels:
                                                              description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                                              type: object
                                                              additionalProperties:
                                                                type: string
                                                          x-kubernetes-map-type: atomic
                                                        namespaceSelector:
                                                          description: A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
                                                          type: object
                                                          properties:
                                                            matchExpressions:
                                                              description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                                              type: array
                                                              items:
                                                                description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                                type: object
                                                                required:
                                                                  - key
                                                                  - operator
                                                                properties:
                                                                  key:
                                                                    description: key is the label key that the selector applies to.
                                                                    type: string
                                                                  operator:
                                                                    description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                                    type: string
                                                                  values:
                                                                    description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                                    type: array
                                                                    items:
                                                                      type: string
                                                            matchLabels:
                                                              description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                                              type: object
                                                              additionalProperties:
                                                                type: string
                                                          x-kubernetes-map-type: atomic
                                                        namespaces:
                                                          description: namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                                          type: array
                                                          items:
                                                            type: string
                                                        topologyKey:
                                                          description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                                                          type: string
                                          imagePullSecrets:
                                            description: If specified, the pod's imagePullSecrets
                                            type: array
                                            items:
                                              description: LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
                                              type: object
                                              properties:
                                                name:
                                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                                                  type: string
                                              x-kubernetes-map-type: atomic
                                          nodeSelector:
                                            description: 'NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node''s labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/'
                                            type: object
                                            additionalProperties:
                                              type: string
                                          priorityClassName:
                                            description: If specified, the pod's priorityClassName.
                                            type: string
                                          serviceAccountName:
                                            description: If specified, the pod's service account
                                            type: string
                                          tolerations:
                                            description: If specified, the pod's tolerations.
                                            type: array
                                            items:
                                              description: The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
                                              type: object
                                              properties:
                                                effect:
                                                  description: Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
                                                  type: string
                                                key:
                                                  description: Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
                                                  type: string
                                                operator:
                                                  description: Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
                                                  type: string
                                                tolerationSeconds:
                                                  description: TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
                                                  type: integer
                                                  format: int64
                                                value:
                                                  description: Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
                                                  type: string
                                  serviceType:
                                    description: Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
                                    type: string
                          selector:
                            description: Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
                            type: object
                            properties:
                              dnsNames:
                                description: List of DNSNames that this solver will be used to solve. If specified and a match is found, a dnsNames selector will take precedence over a dnsZones selector. If multiple solvers match with the same dnsNames value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
                                type: array
                                items:
                                  type: string
                              dnsZones:
                                description: List of DNSZones that this solver will be used to solve. The most specific DNS zone match specified here will take precedence over other DNS zone matches, so a solver specifying sys.example.com will be selected over one specifying example.com for the domain www.sys.example.com. If multiple solvers match with the same dnsZones value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
                                type: array
                                items:
                                  type: string
                              matchLabels:
                                description: A label selector that is used to refine the set of certificate's that this challenge solver will apply to.
                                type: object
                                additionalProperties:
                                  type: string
                ca:
                  description: CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.
                  type: object
                  required:
                    - secretName
                  properties:
                    crlDistributionPoints:
                      description: The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set, certificates will be issued without distribution points set.
                      type: array
                      items:
                        type: string
                    ocspServers:
                      description: The OCSP server list is an X.509 v3 extension that defines a list of URLs of OCSP responders. The OCSP responders can be queried for the revocation status of an issued certificate. If not set, the certificate will be issued with no OCSP servers set. For example, an OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
                      type: array
                      items:
                        type: string
                    secretName:
                      description: SecretName is the name of the secret used to sign Certificates issued by this Issuer.
                      type: string
                selfSigned:
                  description: SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.
                  type: object
                  properties:
                    crlDistributionPoints:
                      description: The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set certificate will be issued without CDP. Values are strings.
                      type: array
                      items:
                        type: string
                vault:
                  description: Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
                  type: object
                  required:
                    - auth
                    - path
                    - server
                  properties:
                    auth:
                      description: Auth configures how cert-manager authenticates with the Vault server.
                      type: object
                      properties:
                        appRole:
                          description: AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.
                          type: object
                          required:
                            - path
                            - roleId
                            - secretRef
                          properties:
                            path:
                              description: 'Path where the App Role authentication backend is mounted in Vault, e.g: "approle"'
                              type: string
                            roleId:
                              description: RoleID configured in the App Role authentication backend when setting up the authentication backend in Vault.
                              type: string
                            secretRef:
                              description: Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.
                              type: object
                              required:
                                - name
                              properties:
                                key:
                                  description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                                  type: string
                                name:
                                  description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                        kubernetes:
                          description: Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.
                          type: object
                          required:
                            - role
                          properties:
                            mountPath:
                              description: The Vault mountPath here is the mount path to use when authenticating with Vault. For example, setting a value to `/v1/auth/foo`, will use the path `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the default value "/v1/auth/kubernetes" will be used.
                              type: string
                            role:
                              description: A required field containing the Vault Role to assume. A Role binds a Kubernetes ServiceAccount with a set of Vault policies.
                              type: string
                            secretRef:
                              description: The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.
                              type: object
                              required:
                                - name
                              properties:
                                key:
                                  description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                                  type: string
                                name:
                                  description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                            serviceAccountRef:
                              description: A reference to a service account that will be used to request a bound token (also known as "projected token"). Compared to using "secretRef", using this field means that you don't rely on statically bound tokens. To use this field, you must configure an RBAC rule to let cert-manager request a token.
                              type: object
                              required:
                                - name
                              properties:
                                name:
                                  description: Name of the ServiceAccount used to request a token.
                                  type: string
                        tokenSecretRef:
                          description: TokenSecretRef authenticates with Vault by presenting a token.
                          type: object
                          required:
                            - name
                          properties:
                            key:
                              description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                              type: string
                            name:
                              description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                    caBundle:
                      description: Base64-encoded bundle of PEM CAs which will be used to validate the certificate chain presented by Vault. Only used if using HTTPS to connect to Vault and ignored for HTTP connections. Mutually exclusive with CABundleSecretRef. If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in the cert-manager controller container is used to validate the TLS connection.
                      type: string
                      format: byte
                    caBundleSecretRef:
                      description: Reference to a Secret containing a bundle of PEM-encoded CAs to use when verifying the certificate chain presented by Vault when using HTTPS. Mutually exclusive with CABundle. If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in the cert-manager controller container is used to validate the TLS connection. If no key for the Secret is specified, cert-manager will default to 'ca.crt'.
                      type: object
                      required:
                        - name
                      properties:
                        key:
                          description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                          type: string
                        name:
                          description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                    namespace:
                      description: 'Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: "ns1" More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces'
                      type: string
                    path:
                      description: 'Path is the mount path of the Vault PKI backend''s `sign` endpoint, e.g: "my_pki_mount/sign/my-role-name".'
                      type: string
                    server:
                      description: 'Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".'
                      type: string
                venafi:
                  description: Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
                  type: object
                  required:
                    - zone
                  properties:
                    cloud:
                      description: Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.
                      type: object
                      required:
                        - apiTokenSecretRef
                      properties:
                        apiTokenSecretRef:
                          description: APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
                          type: object
                          required:
                            - name
                          properties:
                            key:
                              description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                              type: string
                            name:
                              description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                        url:
                          description: URL is the base URL for Venafi Cloud. Defaults to "https://api.venafi.cloud/v1".
                          type: string
                    tpp:
                      description: TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.
                      type: object
                      required:
                        - credentialsRef
                        - url
                      properties:
                        caBundle:
                          description: Base64-encoded bundle of PEM CAs which will be used to validate the certificate chain presented by the TPP server. Only used if using HTTPS; ignored for HTTP. If undefined, the certificate bundle in the cert-manager controller container is used to validate the chain.
                          type: string
                          format: byte
                        credentialsRef:
                          description: CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.
                          type: object
                          required:
                            - name
                          properties:
                            name:
                              description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                        url:
                          description: 'URL is the base URL for the vedsdk endpoint of the Venafi TPP instance, for example: "https://tpp.example.com/vedsdk".'
                          type: string
                    zone:
                      description: Zone is the Venafi Policy Zone to use for this issuer. All requests made to the Venafi platform will be restricted by the named zone policy. This field is required.
                      type: string
            status:
              description: Status of the ClusterIssuer. This is set and managed automatically.
              type: object
              properties:
                acme:
                  description: ACME specific status options. This field should only be set if the Issuer is configured to use an ACME server to issue certificates.
                  type: object
                  properties:
                    lastPrivateKeyHash:
                      description: LastPrivateKeyHash is a hash of the private key associated with the latest registered ACME account, in order to track changes made to registered account associated with the Issuer
                      type: string
                    lastRegisteredEmail:
                      description: LastRegisteredEmail is the email associated with the latest registered ACME account, in order to track changes made to registered account associated with the  Issuer
                      type: string
                    uri:
                      description: URI is the unique account identifier, which can also be used to retrieve account details from the CA
                      type: string
                conditions:
                  description: List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready`.
                  type: array
                  items:
                    description: IssuerCondition contains condition information for an Issuer.
                    type: object
                    required:
                      - status
                      - type
                    properties:
                      lastTransitionTime:
                        description: LastTransitionTime is the timestamp corresponding to the last status change of this condition.
                        type: string
                        format: date-time
                      message:
                        description: Message is a human readable description of the details of the last transition, complementing reason.
                        type: string
                      observedGeneration:
                        description: If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Issuer.
                        type: integer
                        format: int64
                      reason:
                        description: Reason is a brief machine readable explanation for the condition's last transition.
                        type: string
                      status:
                        description: Status of the condition, one of (`True`, `False`, `Unknown`).
                        type: string
                        enum:
                          - "True"
                          - "False"
                          - Unknown
                      type:
                        description: Type of the condition, known values are (`Ready`).
                        type: string
                  x-kubernetes-list-map-keys:
                    - type
                  x-kubernetes-list-type: map
      served: true
      storage: true
---
# Source: gitlab/charts/certmanager/templates/crds.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: issuers.cert-manager.io
  labels:
    app: 'certmanager'
    app.kubernetes.io/name: 'certmanager'
    app.kubernetes.io/instance: "gitlab"
    # Generated labels
    app.kubernetes.io/version: "v1.12.6"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: certmanager-v1.12.6
spec:
  group: cert-manager.io
  names:
    kind: Issuer
    listKind: IssuerList
    plural: issuers
    singular: issuer
    categories:
      - cert-manager
  scope: Namespaced
  versions:
    - name: v1
      subresources:
        status: {}
      additionalPrinterColumns:
        - jsonPath: .status.conditions[?(@.type=="Ready")].status
          name: Ready
          type: string
        - jsonPath: .status.conditions[?(@.type=="Ready")].message
          name: Status
          priority: 1
          type: string
        - jsonPath: .metadata.creationTimestamp
          description: CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
          name: Age
          type: date
      schema:
        openAPIV3Schema:
          description: An Issuer represents a certificate issuing authority which can be referenced as part of `issuerRef` fields. It is scoped to a single namespace and can therefore only be referenced by resources within the same namespace.
          type: object
          required:
            - spec
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              description: Desired state of the Issuer resource.
              type: object
              properties:
                acme:
                  description: ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
                  type: object
                  required:
                    - privateKeySecretRef
                    - server
                  properties:
                    caBundle:
                      description: Base64-encoded bundle of PEM CAs which can be used to validate the certificate chain presented by the ACME server. Mutually exclusive with SkipTLSVerify; prefer using CABundle to prevent various kinds of security vulnerabilities. If CABundle and SkipTLSVerify are unset, the system certificate bundle inside the container is used to validate the TLS connection.
                      type: string
                      format: byte
                    disableAccountKeyGeneration:
                      description: Enables or disables generating a new ACME account key. If true, the Issuer resource will *not* request a new account but will expect the account key to be supplied via an existing secret. If false, the cert-manager system will generate a new ACME account key for the Issuer. Defaults to false.
                      type: boolean
                    email:
                      description: Email is the email address to be associated with the ACME account. This field is optional, but it is strongly recommended to be set. It will be used to contact you in case of issues with your account or certificates, including expiry notification emails. This field may be updated after the account is initially registered.
                      type: string
                    enableDurationFeature:
                      description: Enables requesting a Not After date on certificates that matches the duration of the certificate. This is not supported by all ACME servers like Let's Encrypt. If set to true when the ACME server does not support it it will create an error on the Order. Defaults to false.
                      type: boolean
                    externalAccountBinding:
                      description: ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.
                      type: object
                      required:
                        - keyID
                        - keySecretRef
                      properties:
                        keyAlgorithm:
                          description: 'Deprecated: keyAlgorithm field exists for historical compatibility reasons and should not be used. The algorithm is now hardcoded to HS256 in golang/x/crypto/acme.'
                          type: string
                          enum:
                            - HS256
                            - HS384
                            - HS512
                        keyID:
                          description: keyID is the ID of the CA key that the External Account is bound to.
                          type: string
                        keySecretRef:
                          description: keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.
                          type: object
                          required:
                            - name
                          properties:
                            key:
                              description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                              type: string
                            name:
                              description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                    preferredChain:
                      description: 'PreferredChain is the chain to use if the ACME server outputs multiple. PreferredChain is no guarantee that this one gets delivered by the ACME endpoint. For example, for Let''s Encrypt''s DST crosssign you would use: "DST Root CA X3" or "ISRG Root X1" for the newer Let''s Encrypt root CA. This value picks the first certificate bundle in the ACME alternative chains that has a certificate with this value as its issuer''s CN'
                      type: string
                      maxLength: 64
                    privateKeySecretRef:
                      description: PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.
                      type: object
                      required:
                        - name
                      properties:
                        key:
                          description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                          type: string
                        name:
                          description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                    server:
                      description: 'Server is the URL used to access the ACME server''s ''directory'' endpoint. For example, for Let''s Encrypt''s staging endpoint, you would use: "https://acme-staging-v02.api.letsencrypt.org/directory". Only ACME v2 endpoints (i.e. RFC 8555) are supported.'
                      type: string
                    skipTLSVerify:
                      description: 'INSECURE: Enables or disables validation of the ACME server TLS certificate. If true, requests to the ACME server will not have the TLS certificate chain validated. Mutually exclusive with CABundle; prefer using CABundle to prevent various kinds of security vulnerabilities. Only enable this option in development environments. If CABundle and SkipTLSVerify are unset, the system certificate bundle inside the container is used to validate the TLS connection. Defaults to false.'
                      type: boolean
                    solvers:
                      description: 'Solvers is a list of challenge solvers that will be used to solve ACME challenges for the matching domains. Solver configurations must be provided in order to obtain certificates from an ACME server. For more information, see: https://cert-manager.io/docs/configuration/acme/'
                      type: array
                      items:
                        description: An ACMEChallengeSolver describes how to solve ACME challenges for the issuer it is part of. A selector may be provided to use different solving strategies for different DNS names. Only one of HTTP01 or DNS01 must be provided.
                        type: object
                        properties:
                          dns01:
                            description: Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
                            type: object
                            properties:
                              acmeDNS:
                                description: Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
                                type: object
                                required:
                                  - accountSecretRef
                                  - host
                                properties:
                                  accountSecretRef:
                                    description: A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
                                    type: object
                                    required:
                                      - name
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                  host:
                                    type: string
                              akamai:
                                description: Use the Akamai DNS zone management API to manage DNS01 challenge records.
                                type: object
                                required:
                                  - accessTokenSecretRef
                                  - clientSecretSecretRef
                                  - clientTokenSecretRef
                                  - serviceConsumerDomain
                                properties:
                                  accessTokenSecretRef:
                                    description: A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
                                    type: object
                                    required:
                                      - name
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                  clientSecretSecretRef:
                                    description: A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
                                    type: object
                                    required:
                                      - name
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                  clientTokenSecretRef:
                                    description: A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
                                    type: object
                                    required:
                                      - name
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                  serviceConsumerDomain:
                                    type: string
                              azureDNS:
                                description: Use the Microsoft Azure DNS API to manage DNS01 challenge records.
                                type: object
                                required:
                                  - resourceGroupName
                                  - subscriptionID
                                properties:
                                  clientID:
                                    description: if both this and ClientSecret are left unset MSI will be used
                                    type: string
                                  clientSecretSecretRef:
                                    description: if both this and ClientID are left unset MSI will be used
                                    type: object
                                    required:
                                      - name
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                  environment:
                                    description: name of the Azure environment (default AzurePublicCloud)
                                    type: string
                                    enum:
                                      - AzurePublicCloud
                                      - AzureChinaCloud
                                      - AzureGermanCloud
                                      - AzureUSGovernmentCloud
                                  hostedZoneName:
                                    description: name of the DNS zone that should be used
                                    type: string
                                  managedIdentity:
                                    description: managed identity configuration, can not be used at the same time as clientID, clientSecretSecretRef or tenantID
                                    type: object
                                    properties:
                                      clientID:
                                        description: client ID of the managed identity, can not be used at the same time as resourceID
                                        type: string
                                      resourceID:
                                        description: resource ID of the managed identity, can not be used at the same time as clientID
                                        type: string
                                  resourceGroupName:
                                    description: resource group the DNS zone is located in
                                    type: string
                                  subscriptionID:
                                    description: ID of the Azure subscription
                                    type: string
                                  tenantID:
                                    description: when specifying ClientID and ClientSecret then this field is also needed
                                    type: string
                              cloudDNS:
                                description: Use the Google Cloud DNS API to manage DNS01 challenge records.
                                type: object
                                required:
                                  - project
                                properties:
                                  hostedZoneName:
                                    description: HostedZoneName is an optional field that tells cert-manager in which Cloud DNS zone the challenge record has to be created. If left empty cert-manager will automatically choose a zone.
                                    type: string
                                  project:
                                    type: string
                                  serviceAccountSecretRef:
                                    description: A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
                                    type: object
                                    required:
                                      - name
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                              cloudflare:
                                description: Use the Cloudflare API to manage DNS01 challenge records.
                                type: object
                                properties:
                                  apiKeySecretRef:
                                    description: 'API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.'
                                    type: object
                                    required:
                                      - name
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                  apiTokenSecretRef:
                                    description: API token used to authenticate with Cloudflare.
                                    type: object
                                    required:
                                      - name
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                  email:
                                    description: Email of the account, only required when using API key based authentication.
                                    type: string
                              cnameStrategy:
                                description: CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones.
                                type: string
                                enum:
                                  - None
                                  - Follow
                              digitalocean:
                                description: Use the DigitalOcean DNS API to manage DNS01 challenge records.
                                type: object
                                required:
                                  - tokenSecretRef
                                properties:
                                  tokenSecretRef:
                                    description: A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
                                    type: object
                                    required:
                                      - name
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                              rfc2136:
                                description: Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
                                type: object
                                required:
                                  - nameserver
                                properties:
                                  nameserver:
                                    description: The IP address or hostname of an authoritative DNS server supporting RFC2136 in the form host:port. If the host is an IPv6 address it must be enclosed in square brackets (e.g [2001:db8::1]) ; port is optional. This field is required.
                                    type: string
                                  tsigAlgorithm:
                                    description: 'The TSIG Algorithm configured in the DNS supporting RFC2136. Used only when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined. Supported values are (case-insensitive): ``HMACMD5`` (default), ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.'
                                    type: string
                                  tsigKeyName:
                                    description: The TSIG Key name configured in the DNS. If ``tsigSecretSecretRef`` is defined, this field is required.
                                    type: string
                                  tsigSecretSecretRef:
                                    description: The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
                                    type: object
                                    required:
                                      - name
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                              route53:
                                description: Use the AWS Route53 API to manage DNS01 challenge records.
                                type: object
                                required:
                                  - region
                                properties:
                                  accessKeyID:
                                    description: 'The AccessKeyID is used for authentication. Cannot be set when SecretAccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials'
                                    type: string
                                  accessKeyIDSecretRef:
                                    description: 'The SecretAccessKey is used for authentication. If set, pull the AWS access key ID from a key within a Kubernetes Secret. Cannot be set when AccessKeyID is set. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials'
                                    type: object
                                    required:
                                      - name
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                                  hostedZoneID:
                                    description: If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.
                                    type: string
                                  region:
                                    description: Always set the region when using AccessKeyID and SecretAccessKey
                                    type: string
                                  role:
                                    description: Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
                                    type: string
                                  secretAccessKeySecretRef:
                                    description: 'The SecretAccessKey is used for authentication. If neither the Access Key nor Key ID are set, we fall-back to using env vars, shared credentials file or AWS Instance metadata, see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials'
                                    type: object
                                    required:
                                      - name
                                    properties:
                                      key:
                                        description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                                        type: string
                                      name:
                                        description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                        type: string
                              webhook:
                                description: Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
                                type: object
                                required:
                                  - groupName
                                  - solverName
                                properties:
                                  config:
                                    description: Additional configuration that should be passed to the webhook apiserver when challenges are processed. This can contain arbitrary JSON data. Secret values should not be specified in this stanza. If secret values are needed (e.g. credentials for a DNS service), you should use a SecretKeySelector to reference a Secret resource. For details on the schema of this field, consult the webhook provider implementation's documentation.
                                    x-kubernetes-preserve-unknown-fields: true
                                  groupName:
                                    description: The API group name that should be used when POSTing ChallengePayload resources to the webhook apiserver. This should be the same as the GroupName specified in the webhook provider implementation.
                                    type: string
                                  solverName:
                                    description: The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. 'cloudflare'.
                                    type: string
                          http01:
                            description: Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
                            type: object
                            properties:
                              gatewayHTTPRoute:
                                description: The Gateway API is a sig-network community API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/). The Gateway solver will create HTTPRoutes with the specified labels in the same namespace as the challenge. This solver is experimental, and fields / behaviour may change in the future.
                                type: object
                                properties:
                                  labels:
                                    description: Custom labels that will be applied to HTTPRoutes created by cert-manager while solving HTTP-01 challenges.
                                    type: object
                                    additionalProperties:
                                      type: string
                                  parentRefs:
                                    description: 'When solving an HTTP-01 challenge, cert-manager creates an HTTPRoute. cert-manager needs to know which parentRefs should be used when creating the HTTPRoute. Usually, the parentRef references a Gateway. See: https://gateway-api.sigs.k8s.io/api-types/httproute/#attaching-to-gateways'
                                    type: array
                                    items:
                                      description: "ParentReference identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). The only kind of parent resource with \"Core\" support is Gateway. This API may be extended in the future to support additional kinds of parent resources, such as HTTPRoute. \n The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid."
                                      type: object
                                      required:
                                        - name
                                      properties:
                                        group:
                                          description: "Group is the group of the referent. When unspecified, \"gateway.networking.k8s.io\" is inferred. To set the core API group (such as for a \"Service\" kind referent), Group must be explicitly set to \"\" (empty string). \n Support: Core"
                                          type: string
                                          default: gateway.networking.k8s.io
                                          maxLength: 253
                                          pattern: ^$|^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
                                        kind:
                                          description: "Kind is kind of the referent. \n Support: Core (Gateway) \n Support: Implementation-specific (Other Resources)"
                                          type: string
                                          default: Gateway
                                          maxLength: 63
                                          minLength: 1
                                          pattern: ^[a-zA-Z]([-a-zA-Z0-9]*[a-zA-Z0-9])?$
                                        name:
                                          description: "Name is the name of the referent. \n Support: Core"
                                          type: string
                                          maxLength: 253
                                          minLength: 1
                                        namespace:
                                          description: "Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route. \n Note that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference. \n Support: Core"
                                          type: string
                                          maxLength: 63
                                          minLength: 1
                                          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?$
                                        port:
                                          description: "Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource. \n When the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values. \n Implementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted. \n For the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. \n Support: Extended \n <gateway:experimental>"
                                          type: integer
                                          format: int32
                                          maximum: 65535
                                          minimum: 1
                                        sectionName:
                                          description: "SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following: \n * Gateway: Listener Name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. \n Implementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted. \n When unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway. \n Support: Core"
                                          type: string
                                          maxLength: 253
                                          minLength: 1
                                          pattern: ^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$
                                  serviceType:
                                    description: Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
                                    type: string
                              ingress:
                                description: The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
                                type: object
                                properties:
                                  class:
                                    description: This field configures the annotation `kubernetes.io/ingress.class` when creating Ingress resources to solve ACME challenges that use this challenge solver. Only one of `class`, `name` or `ingressClassName` may be specified.
                                    type: string
                                  ingressClassName:
                                    description: This field configures the field `ingressClassName` on the created Ingress resources used to solve ACME challenges that use this challenge solver. This is the recommended way of configuring the ingress class. Only one of `class`, `name` or `ingressClassName` may be specified.
                                    type: string
                                  ingressTemplate:
                                    description: Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges.
                                    type: object
                                    properties:
                                      metadata:
                                        description: ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
                                        type: object
                                        properties:
                                          annotations:
                                            description: Annotations that should be added to the created ACME HTTP01 solver ingress.
                                            type: object
                                            additionalProperties:
                                              type: string
                                          labels:
                                            description: Labels that should be added to the created ACME HTTP01 solver ingress.
                                            type: object
                                            additionalProperties:
                                              type: string
                                  name:
                                    description: The name of the ingress resource that should have ACME challenge solving routes inserted into it in order to solve HTTP01 challenges. This is typically used in conjunction with ingress controllers like ingress-gce, which maintains a 1:1 mapping between external IPs and ingress resources. Only one of `class`, `name` or `ingressClassName` may be specified.
                                    type: string
                                  podTemplate:
                                    description: Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges.
                                    type: object
                                    properties:
                                      metadata:
                                        description: ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
                                        type: object
                                        properties:
                                          annotations:
                                            description: Annotations that should be added to the create ACME HTTP01 solver pods.
                                            type: object
                                            additionalProperties:
                                              type: string
                                          labels:
                                            description: Labels that should be added to the created ACME HTTP01 solver pods.
                                            type: object
                                            additionalProperties:
                                              type: string
                                      spec:
                                        description: PodSpec defines overrides for the HTTP01 challenge solver pod. Check ACMEChallengeSolverHTTP01IngressPodSpec to find out currently supported fields. All other fields will be ignored.
                                        type: object
                                        properties:
                                          affinity:
                                            description: If specified, the pod's scheduling constraints
                                            type: object
                                            properties:
                                              nodeAffinity:
                                                description: Describes node affinity scheduling rules for the pod.
                                                type: object
                                                properties:
                                                  preferredDuringSchedulingIgnoredDuringExecution:
                                                    description: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
                                                    type: array
                                                    items:
                                                      description: An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
                                                      type: object
                                                      required:
                                                        - preference
                                                        - weight
                                                      properties:
                                                        preference:
                                                          description: A node selector term, associated with the corresponding weight.
                                                          type: object
                                                          properties:
                                                            matchExpressions:
                                                              description: A list of node selector requirements by node's labels.
                                                              type: array
                                                              items:
                                                                description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                                type: object
                                                                required:
                                                                  - key
                                                                  - operator
                                                                properties:
                                                                  key:
                                                                    description: The label key that the selector applies to.
                                                                    type: string
                                                                  operator:
                                                                    description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                                                    type: string
                                                                  values:
                                                                    description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                                                    type: array
                                                                    items:
                                                                      type: string
                                                            matchFields:
                                                              description: A list of node selector requirements by node's fields.
                                                              type: array
                                                              items:
                                                                description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                                type: object
                                                                required:
                                                                  - key
                                                                  - operator
                                                                properties:
                                                                  key:
                                                                    description: The label key that the selector applies to.
                                                                    type: string
                                                                  operator:
                                                                    description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                                                    type: string
                                                                  values:
                                                                    description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                                                    type: array
                                                                    items:
                                                                      type: string
                                                          x-kubernetes-map-type: atomic
                                                        weight:
                                                          description: Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
                                                          type: integer
                                                          format: int32
                                                  requiredDuringSchedulingIgnoredDuringExecution:
                                                    description: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
                                                    type: object
                                                    required:
                                                      - nodeSelectorTerms
                                                    properties:
                                                      nodeSelectorTerms:
                                                        description: Required. A list of node selector terms. The terms are ORed.
                                                        type: array
                                                        items:
                                                          description: A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
                                                          type: object
                                                          properties:
                                                            matchExpressions:
                                                              description: A list of node selector requirements by node's labels.
                                                              type: array
                                                              items:
                                                                description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                                type: object
                                                                required:
                                                                  - key
                                                                  - operator
                                                                properties:
                                                                  key:
                                                                    description: The label key that the selector applies to.
                                                                    type: string
                                                                  operator:
                                                                    description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                                                    type: string
                                                                  values:
                                                                    description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                                                    type: array
                                                                    items:
                                                                      type: string
                                                            matchFields:
                                                              description: A list of node selector requirements by node's fields.
                                                              type: array
                                                              items:
                                                                description: A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                                type: object
                                                                required:
                                                                  - key
                                                                  - operator
                                                                properties:
                                                                  key:
                                                                    description: The label key that the selector applies to.
                                                                    type: string
                                                                  operator:
                                                                    description: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                                                    type: string
                                                                  values:
                                                                    description: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                                                    type: array
                                                                    items:
                                                                      type: string
                                                          x-kubernetes-map-type: atomic
                                                    x-kubernetes-map-type: atomic
                                              podAffinity:
                                                description: Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
                                                type: object
                                                properties:
                                                  preferredDuringSchedulingIgnoredDuringExecution:
                                                    description: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
                                                    type: array
                                                    items:
                                                      description: The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
                                                      type: object
                                                      required:
                                                        - podAffinityTerm
                                                        - weight
                                                      properties:
                                                        podAffinityTerm:
                                                          description: Required. A pod affinity term, associated with the corresponding weight.
                                                          type: object
                                                          required:
                                                            - topologyKey
                                                          properties:
                                                            labelSelector:
                                                              description: A label query over a set of resources, in this case pods.
                                                              type: object
                                                              properties:
                                                                matchExpressions:
                                                                  description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                                                  type: array
                                                                  items:
                                                                    description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                                    type: object
                                                                    required:
                                                                      - key
                                                                      - operator
                                                                    properties:
                                                                      key:
                                                                        description: key is the label key that the selector applies to.
                                                                        type: string
                                                                      operator:
                                                                        description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                                        type: string
                                                                      values:
                                                                        description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                                        type: array
                                                                        items:
                                                                          type: string
                                                                matchLabels:
                                                                  description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                                                  type: object
                                                                  additionalProperties:
                                                                    type: string
                                                              x-kubernetes-map-type: atomic
                                                            namespaceSelector:
                                                              description: A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
                                                              type: object
                                                              properties:
                                                                matchExpressions:
                                                                  description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                                                  type: array
                                                                  items:
                                                                    description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                                    type: object
                                                                    required:
                                                                      - key
                                                                      - operator
                                                                    properties:
                                                                      key:
                                                                        description: key is the label key that the selector applies to.
                                                                        type: string
                                                                      operator:
                                                                        description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                                        type: string
                                                                      values:
                                                                        description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                                        type: array
                                                                        items:
                                                                          type: string
                                                                matchLabels:
                                                                  description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                                                  type: object
                                                                  additionalProperties:
                                                                    type: string
                                                              x-kubernetes-map-type: atomic
                                                            namespaces:
                                                              description: namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                                              type: array
                                                              items:
                                                                type: string
                                                            topologyKey:
                                                              description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                                                              type: string
                                                        weight:
                                                          description: weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
                                                          type: integer
                                                          format: int32
                                                  requiredDuringSchedulingIgnoredDuringExecution:
                                                    description: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
                                                    type: array
                                                    items:
                                                      description: Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
                                                      type: object
                                                      required:
                                                        - topologyKey
                                                      properties:
                                                        labelSelector:
                                                          description: A label query over a set of resources, in this case pods.
                                                          type: object
                                                          properties:
                                                            matchExpressions:
                                                              description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                                              type: array
                                                              items:
                                                                description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                                type: object
                                                                required:
                                                                  - key
                                                                  - operator
                                                                properties:
                                                                  key:
                                                                    description: key is the label key that the selector applies to.
                                                                    type: string
                                                                  operator:
                                                                    description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                                    type: string
                                                                  values:
                                                                    description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                                    type: array
                                                                    items:
                                                                      type: string
                                                            matchLabels:
                                                              description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                                              type: object
                                                              additionalProperties:
                                                                type: string
                                                          x-kubernetes-map-type: atomic
                                                        namespaceSelector:
                                                          description: A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
                                                          type: object
                                                          properties:
                                                            matchExpressions:
                                                              description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                                              type: array
                                                              items:
                                                                description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                                type: object
                                                                required:
                                                                  - key
                                                                  - operator
                                                                properties:
                                                                  key:
                                                                    description: key is the label key that the selector applies to.
                                                                    type: string
                                                                  operator:
                                                                    description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                                    type: string
                                                                  values:
                                                                    description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                                    type: array
                                                                    items:
                                                                      type: string
                                                            matchLabels:
                                                              description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                                              type: object
                                                              additionalProperties:
                                                                type: string
                                                          x-kubernetes-map-type: atomic
                                                        namespaces:
                                                          description: namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                                          type: array
                                                          items:
                                                            type: string
                                                        topologyKey:
                                                          description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                                                          type: string
                                              podAntiAffinity:
                                                description: Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
                                                type: object
                                                properties:
                                                  preferredDuringSchedulingIgnoredDuringExecution:
                                                    description: The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
                                                    type: array
                                                    items:
                                                      description: The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
                                                      type: object
                                                      required:
                                                        - podAffinityTerm
                                                        - weight
                                                      properties:
                                                        podAffinityTerm:
                                                          description: Required. A pod affinity term, associated with the corresponding weight.
                                                          type: object
                                                          required:
                                                            - topologyKey
                                                          properties:
                                                            labelSelector:
                                                              description: A label query over a set of resources, in this case pods.
                                                              type: object
                                                              properties:
                                                                matchExpressions:
                                                                  description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                                                  type: array
                                                                  items:
                                                                    description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                                    type: object
                                                                    required:
                                                                      - key
                                                                      - operator
                                                                    properties:
                                                                      key:
                                                                        description: key is the label key that the selector applies to.
                                                                        type: string
                                                                      operator:
                                                                        description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                                        type: string
                                                                      values:
                                                                        description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                                        type: array
                                                                        items:
                                                                          type: string
                                                                matchLabels:
                                                                  description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                                                  type: object
                                                                  additionalProperties:
                                                                    type: string
                                                              x-kubernetes-map-type: atomic
                                                            namespaceSelector:
                                                              description: A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
                                                              type: object
                                                              properties:
                                                                matchExpressions:
                                                                  description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                                                  type: array
                                                                  items:
                                                                    description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                                    type: object
                                                                    required:
                                                                      - key
                                                                      - operator
                                                                    properties:
                                                                      key:
                                                                        description: key is the label key that the selector applies to.
                                                                        type: string
                                                                      operator:
                                                                        description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                                        type: string
                                                                      values:
                                                                        description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                                        type: array
                                                                        items:
                                                                          type: string
                                                                matchLabels:
                                                                  description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                                                  type: object
                                                                  additionalProperties:
                                                                    type: string
                                                              x-kubernetes-map-type: atomic
                                                            namespaces:
                                                              description: namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                                              type: array
                                                              items:
                                                                type: string
                                                            topologyKey:
                                                              description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                                                              type: string
                                                        weight:
                                                          description: weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
                                                          type: integer
                                                          format: int32
                                                  requiredDuringSchedulingIgnoredDuringExecution:
                                                    description: If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
                                                    type: array
                                                    items:
                                                      description: Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
                                                      type: object
                                                      required:
                                                        - topologyKey
                                                      properties:
                                                        labelSelector:
                                                          description: A label query over a set of resources, in this case pods.
                                                          type: object
                                                          properties:
                                                            matchExpressions:
                                                              description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                                              type: array
                                                              items:
                                                                description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                                type: object
                                                                required:
                                                                  - key
                                                                  - operator
                                                                properties:
                                                                  key:
                                                                    description: key is the label key that the selector applies to.
                                                                    type: string
                                                                  operator:
                                                                    description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                                    type: string
                                                                  values:
                                                                    description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                                    type: array
                                                                    items:
                                                                      type: string
                                                            matchLabels:
                                                              description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                                              type: object
                                                              additionalProperties:
                                                                type: string
                                                          x-kubernetes-map-type: atomic
                                                        namespaceSelector:
                                                          description: A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means "this pod's namespace". An empty selector ({}) matches all namespaces.
                                                          type: object
                                                          properties:
                                                            matchExpressions:
                                                              description: matchExpressions is a list of label selector requirements. The requirements are ANDed.
                                                              type: array
                                                              items:
                                                                description: A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                                                                type: object
                                                                required:
                                                                  - key
                                                                  - operator
                                                                properties:
                                                                  key:
                                                                    description: key is the label key that the selector applies to.
                                                                    type: string
                                                                  operator:
                                                                    description: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
                                                                    type: string
                                                                  values:
                                                                    description: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                                                                    type: array
                                                                    items:
                                                                      type: string
                                                            matchLabels:
                                                              description: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
                                                              type: object
                                                              additionalProperties:
                                                                type: string
                                                          x-kubernetes-map-type: atomic
                                                        namespaces:
                                                          description: namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means "this pod's namespace".
                                                          type: array
                                                          items:
                                                            type: string
                                                        topologyKey:
                                                          description: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                                                          type: string
                                          imagePullSecrets:
                                            description: If specified, the pod's imagePullSecrets
                                            type: array
                                            items:
                                              description: LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
                                              type: object
                                              properties:
                                                name:
                                                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?'
                                                  type: string
                                              x-kubernetes-map-type: atomic
                                          nodeSelector:
                                            description: 'NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node''s labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/'
                                            type: object
                                            additionalProperties:
                                              type: string
                                          priorityClassName:
                                            description: If specified, the pod's priorityClassName.
                                            type: string
                                          serviceAccountName:
                                            description: If specified, the pod's service account
                                            type: string
                                          tolerations:
                                            description: If specified, the pod's tolerations.
                                            type: array
                                            items:
                                              description: The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
                                              type: object
                                              properties:
                                                effect:
                                                  description: Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
                                                  type: string
                                                key:
                                                  description: Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
                                                  type: string
                                                operator:
                                                  description: Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
                                                  type: string
                                                tolerationSeconds:
                                                  description: TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
                                                  type: integer
                                                  format: int64
                                                value:
                                                  description: Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
                                                  type: string
                                  serviceType:
                                    description: Optional service type for Kubernetes solver service. Supported values are NodePort or ClusterIP. If unset, defaults to NodePort.
                                    type: string
                          selector:
                            description: Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
                            type: object
                            properties:
                              dnsNames:
                                description: List of DNSNames that this solver will be used to solve. If specified and a match is found, a dnsNames selector will take precedence over a dnsZones selector. If multiple solvers match with the same dnsNames value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
                                type: array
                                items:
                                  type: string
                              dnsZones:
                                description: List of DNSZones that this solver will be used to solve. The most specific DNS zone match specified here will take precedence over other DNS zone matches, so a solver specifying sys.example.com will be selected over one specifying example.com for the domain www.sys.example.com. If multiple solvers match with the same dnsZones value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
                                type: array
                                items:
                                  type: string
                              matchLabels:
                                description: A label selector that is used to refine the set of certificate's that this challenge solver will apply to.
                                type: object
                                additionalProperties:
                                  type: string
                ca:
                  description: CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.
                  type: object
                  required:
                    - secretName
                  properties:
                    crlDistributionPoints:
                      description: The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set, certificates will be issued without distribution points set.
                      type: array
                      items:
                        type: string
                    ocspServers:
                      description: The OCSP server list is an X.509 v3 extension that defines a list of URLs of OCSP responders. The OCSP responders can be queried for the revocation status of an issued certificate. If not set, the certificate will be issued with no OCSP servers set. For example, an OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
                      type: array
                      items:
                        type: string
                    secretName:
                      description: SecretName is the name of the secret used to sign Certificates issued by this Issuer.
                      type: string
                selfSigned:
                  description: SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.
                  type: object
                  properties:
                    crlDistributionPoints:
                      description: The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set certificate will be issued without CDP. Values are strings.
                      type: array
                      items:
                        type: string
                vault:
                  description: Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
                  type: object
                  required:
                    - auth
                    - path
                    - server
                  properties:
                    auth:
                      description: Auth configures how cert-manager authenticates with the Vault server.
                      type: object
                      properties:
                        appRole:
                          description: AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.
                          type: object
                          required:
                            - path
                            - roleId
                            - secretRef
                          properties:
                            path:
                              description: 'Path where the App Role authentication backend is mounted in Vault, e.g: "approle"'
                              type: string
                            roleId:
                              description: RoleID configured in the App Role authentication backend when setting up the authentication backend in Vault.
                              type: string
                            secretRef:
                              description: Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.
                              type: object
                              required:
                                - name
                              properties:
                                key:
                                  description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                                  type: string
                                name:
                                  description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                        kubernetes:
                          description: Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.
                          type: object
                          required:
                            - role
                          properties:
                            mountPath:
                              description: The Vault mountPath here is the mount path to use when authenticating with Vault. For example, setting a value to `/v1/auth/foo`, will use the path `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the default value "/v1/auth/kubernetes" will be used.
                              type: string
                            role:
                              description: A required field containing the Vault Role to assume. A Role binds a Kubernetes ServiceAccount with a set of Vault policies.
                              type: string
                            secretRef:
                              description: The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.
                              type: object
                              required:
                                - name
                              properties:
                                key:
                                  description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                                  type: string
                                name:
                                  description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                  type: string
                            serviceAccountRef:
                              description: A reference to a service account that will be used to request a bound token (also known as "projected token"). Compared to using "secretRef", using this field means that you don't rely on statically bound tokens. To use this field, you must configure an RBAC rule to let cert-manager request a token.
                              type: object
                              required:
                                - name
                              properties:
                                name:
                                  description: Name of the ServiceAccount used to request a token.
                                  type: string
                        tokenSecretRef:
                          description: TokenSecretRef authenticates with Vault by presenting a token.
                          type: object
                          required:
                            - name
                          properties:
                            key:
                              description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                              type: string
                            name:
                              description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                    caBundle:
                      description: Base64-encoded bundle of PEM CAs which will be used to validate the certificate chain presented by Vault. Only used if using HTTPS to connect to Vault and ignored for HTTP connections. Mutually exclusive with CABundleSecretRef. If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in the cert-manager controller container is used to validate the TLS connection.
                      type: string
                      format: byte
                    caBundleSecretRef:
                      description: Reference to a Secret containing a bundle of PEM-encoded CAs to use when verifying the certificate chain presented by Vault when using HTTPS. Mutually exclusive with CABundle. If neither CABundle nor CABundleSecretRef are defined, the certificate bundle in the cert-manager controller container is used to validate the TLS connection. If no key for the Secret is specified, cert-manager will default to 'ca.crt'.
                      type: object
                      required:
                        - name
                      properties:
                        key:
                          description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                          type: string
                        name:
                          description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                    namespace:
                      description: 'Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: "ns1" More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces'
                      type: string
                    path:
                      description: 'Path is the mount path of the Vault PKI backend''s `sign` endpoint, e.g: "my_pki_mount/sign/my-role-name".'
                      type: string
                    server:
                      description: 'Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".'
                      type: string
                venafi:
                  description: Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
                  type: object
                  required:
                    - zone
                  properties:
                    cloud:
                      description: Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.
                      type: object
                      required:
                        - apiTokenSecretRef
                      properties:
                        apiTokenSecretRef:
                          description: APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
                          type: object
                          required:
                            - name
                          properties:
                            key:
                              description: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
                              type: string
                            name:
                              description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                        url:
                          description: URL is the base URL for Venafi Cloud. Defaults to "https://api.venafi.cloud/v1".
                          type: string
                    tpp:
                      description: TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.
                      type: object
                      required:
                        - credentialsRef
                        - url
                      properties:
                        caBundle:
                          description: Base64-encoded bundle of PEM CAs which will be used to validate the certificate chain presented by the TPP server. Only used if using HTTPS; ignored for HTTP. If undefined, the certificate bundle in the cert-manager controller container is used to validate the chain.
                          type: string
                          format: byte
                        credentialsRef:
                          description: CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.
                          type: object
                          required:
                            - name
                          properties:
                            name:
                              description: 'Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                              type: string
                        url:
                          description: 'URL is the base URL for the vedsdk endpoint of the Venafi TPP instance, for example: "https://tpp.example.com/vedsdk".'
                          type: string
                    zone:
                      description: Zone is the Venafi Policy Zone to use for this issuer. All requests made to the Venafi platform will be restricted by the named zone policy. This field is required.
                      type: string
            status:
              description: Status of the Issuer. This is set and managed automatically.
              type: object
              properties:
                acme:
                  description: ACME specific status options. This field should only be set if the Issuer is configured to use an ACME server to issue certificates.
                  type: object
                  properties:
                    lastPrivateKeyHash:
                      description: LastPrivateKeyHash is a hash of the private key associated with the latest registered ACME account, in order to track changes made to registered account associated with the Issuer
                      type: string
                    lastRegisteredEmail:
                      description: LastRegisteredEmail is the email associated with the latest registered ACME account, in order to track changes made to registered account associated with the  Issuer
                      type: string
                    uri:
                      description: URI is the unique account identifier, which can also be used to retrieve account details from the CA
                      type: string
                conditions:
                  description: List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready`.
                  type: array
                  items:
                    description: IssuerCondition contains condition information for an Issuer.
                    type: object
                    required:
                      - status
                      - type
                    properties:
                      lastTransitionTime:
                        description: LastTransitionTime is the timestamp corresponding to the last status change of this condition.
                        type: string
                        format: date-time
                      message:
                        description: Message is a human readable description of the details of the last transition, complementing reason.
                        type: string
                      observedGeneration:
                        description: If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Issuer.
                        type: integer
                        format: int64
                      reason:
                        description: Reason is a brief machine readable explanation for the condition's last transition.
                        type: string
                      status:
                        description: Status of the condition, one of (`True`, `False`, `Unknown`).
                        type: string
                        enum:
                          - "True"
                          - "False"
                          - Unknown
                      type:
                        description: Type of the condition, known values are (`Ready`).
                        type: string
                  x-kubernetes-list-map-keys:
                    - type
                  x-kubernetes-list-type: map
      served: true
      storage: true
---
# Source: gitlab/charts/certmanager/templates/crds.yaml
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: orders.acme.cert-manager.io
  labels:
    app: 'certmanager'
    app.kubernetes.io/name: 'certmanager'
    app.kubernetes.io/instance: 'gitlab'
    # Generated labels
    app.kubernetes.io/version: "v1.12.6"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: certmanager-v1.12.6
spec:
  group: acme.cert-manager.io
  names:
    kind: Order
    listKind: OrderList
    plural: orders
    singular: order
    categories:
      - cert-manager
      - cert-manager-acme
  scope: Namespaced
  versions:
    - name: v1
      subresources:
        status: {}
      additionalPrinterColumns:
        - jsonPath: .status.state
          name: State
          type: string
        - jsonPath: .spec.issuerRef.name
          name: Issuer
          priority: 1
          type: string
        - jsonPath: .status.reason
          name: Reason
          priority: 1
          type: string
        - jsonPath: .metadata.creationTimestamp
          description: CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
          name: Age
          type: date
      schema:
        openAPIV3Schema:
          description: Order is a type to represent an Order with an ACME server
          type: object
          required:
            - metadata
            - spec
          properties:
            apiVersion:
              description: 'APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
              type: string
            kind:
              description: 'Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
              type: string
            metadata:
              type: object
            spec:
              type: object
              required:
                - issuerRef
                - request
              properties:
                commonName:
                  description: CommonName is the common name as specified on the DER encoded CSR. If specified, this value must also be present in `dnsNames` or `ipAddresses`. This field must match the corresponding field on the DER encoded CSR.
                  type: string
                dnsNames:
                  description: DNSNames is a list of DNS names that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.
                  type: array
                  items:
                    type: string
                duration:
                  description: Duration is the duration for the not after date for the requested certificate. this is set on order creation as pe the ACME spec.
                  type: string
                ipAddresses:
                  description: IPAddresses is a list of IP addresses that should be included as part of the Order validation process. This field must match the corresponding field on the DER encoded CSR.
                  type: array
                  items:
                    type: string
                issuerRef:
                  description: IssuerRef references a properly configured ACME-type Issuer which should be used to create this Order. If the Issuer does not exist, processing will be retried. If the Issuer is not an 'ACME' Issuer, an error will be returned and the Order will be marked as failed.
                  type: object
                  required:
                    - name
                  properties:
                    group:
                      description: Group of the resource being referred to.
                      type: string
                    kind:
                      description: Kind of the resource being referred to.
                      type: string
                    name:
                      description: Name of the resource being referred to.
                      type: string
                request:
                  description: Certificate signing request bytes in DER encoding. This will be used when finalizing the order. This field must be set on the order.
                  type: string
                  format: byte
            status:
              type: object
              properties:
                authorizations:
                  description: Authorizations contains data returned from the ACME server on what authorizations must be completed in order to validate the DNS names specified on the Order.
                  type: array
                  items:
                    description: ACMEAuthorization contains data returned from the ACME server on an authorization that must be completed in order validate a DNS name on an ACME Order resource.
                    type: object
                    required:
                      - url
                    properties:
                      challenges:
                        description: Challenges specifies the challenge types offered by the ACME server. One of these challenge types will be selected when validating the DNS name and an appropriate Challenge resource will be created to perform the ACME challenge process.
                        type: array
                        items:
                          description: Challenge specifies a challenge offered by the ACME server for an Order. An appropriate Challenge resource can be created to perform the ACME challenge process.
                          type: object
                          required:
                            - token
                            - type
                            - url
                          properties:
                            token:
                              description: Token is the token that must be presented for this challenge. This is used to compute the 'key' that must also be presented.
                              type: string
                            type:
                              description: Type is the type of challenge being offered, e.g. 'http-01', 'dns-01', 'tls-sni-01', etc. This is the raw value retrieved from the ACME server. Only 'http-01' and 'dns-01' are supported by cert-manager, other values will be ignored.
                              type: string
                            url:
                              description: URL is the URL of this challenge. It can be used to retrieve additional metadata about the Challenge from the ACME server.
                              type: string
                      identifier:
                        description: Identifier is the DNS name to be validated as part of this authorization
                        type: string
                      initialState:
                        description: InitialState is the initial state of the ACME authorization when first fetched from the ACME server. If an Authorization is already 'valid', the Order controller will not create a Challenge resource for the authorization. This will occur when working with an ACME server that enables 'authz reuse' (such as Let's Encrypt's production endpoint). If not set and 'identifier' is set, the state is assumed to be pending and a Challenge will be created.
                        type: string
                        enum:
                          - valid
                          - ready
                          - pending
                          - processing
                          - invalid
                          - expired
                          - errored
                      url:
                        description: URL is the URL of the Authorization that must be completed
                        type: string
                      wildcard:
                        description: Wildcard will be true if this authorization is for a wildcard DNS name. If this is true, the identifier will be the *non-wildcard* version of the DNS name. For example, if '*.example.com' is the DNS name being validated, this field will be 'true' and the 'identifier' field will be 'example.com'.
                        type: boolean
                certificate:
                  description: Certificate is a copy of the PEM encoded certificate for this Order. This field will be populated after the order has been successfully finalized with the ACME server, and the order has transitioned to the 'valid' state.
                  type: string
                  format: byte
                failureTime:
                  description: FailureTime stores the time that this order failed. This is used to influence garbage collection and back-off.
                  type: string
                  format: date-time
                finalizeURL:
                  description: FinalizeURL of the Order. This is used to obtain certificates for this order once it has been completed.
                  type: string
                reason:
                  description: Reason optionally provides more information about a why the order is in the current state.
                  type: string
                state:
                  description: State contains the current state of this Order resource. States 'success' and 'expired' are 'final'
                  type: string
                  enum:
                    - valid
                    - ready
                    - pending
                    - processing
                    - invalid
                    - expired
                    - errored
                url:
                  description: URL of the Order. This will initially be empty when the resource is first created. The Order controller will populate this field when the Order is first processed. This field will be immutable after it is initially set.
                  type: string
      served: true
      storage: true
---
# # Source: gitlab/charts/certmanager/templates/cainjector-rbac.yaml
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRole
# metadata:
#   name: gitlab-certmanager-cainjector
#   labels:
#     app: cainjector
#     app.kubernetes.io/name: cainjector
#     app.kubernetes.io/instance: gitlab
#     app.kubernetes.io/component: "cainjector"
#     app.kubernetes.io/version: "v1.12.6"
#     app.kubernetes.io/managed-by: Helm
#     helm.sh/chart: certmanager-v1.12.6
# rules:
#   - apiGroups: ["cert-manager.io"]
#     resources: ["certificates"]
#     verbs: ["get", "list", "watch"]
#   - apiGroups: [""]
#     resources: ["secrets"]
#     verbs: ["get", "list", "watch"]
#   - apiGroups: [""]
#     resources: ["events"]
#     verbs: ["get", "create", "update", "patch"]
#   - apiGroups: ["admissionregistration.k8s.io"]
#     resources: ["validatingwebhookconfigurations", "mutatingwebhookconfigurations"]
#     verbs: ["get", "list", "watch", "update", "patch"]
#   - apiGroups: ["apiregistration.k8s.io"]
#     resources: ["apiservices"]
#     verbs: ["get", "list", "watch", "update", "patch"]
#   - apiGroups: ["apiextensions.k8s.io"]
#     resources: ["customresourcedefinitions"]
#     verbs: ["get", "list", "watch", "update", "patch"]
# ---
# Source: gitlab/charts/certmanager/templates/rbac.yaml
# Issuer controller role
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: gitlab-certmanager-controller-issuers
  namespace: {{ .Release.Namespace }}
  labels:
    app: certmanager
    app.kubernetes.io/name: certmanager
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: "controller"
    app.kubernetes.io/version: "v1.12.6"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: certmanager-v1.12.6
rules:
  - apiGroups: ["cert-manager.io"]
    resources: ["issuers", "issuers/status"]
    verbs: ["update", "patch"]
  - apiGroups: ["cert-manager.io"]
    resources: ["issuers"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch", "create", "update", "delete"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]
---
# Source: gitlab/charts/certmanager/templates/rbac.yaml
# ClusterIssuer controller role
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: gitlab-certmanager-controller-clusterissuers
  namespace: {{ .Release.Namespace }}
  labels:
    app: certmanager
    app.kubernetes.io/name: certmanager
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: "controller"
    app.kubernetes.io/version: "v1.12.6"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: certmanager-v1.12.6
rules:
  - apiGroups: ["cert-manager.io"]
    resources: ["clusterissuers", "clusterissuers/status"]
    verbs: ["update", "patch"]
  - apiGroups: ["cert-manager.io"]
    resources: ["clusterissuers"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch", "create", "update", "delete"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]
---
# Source: gitlab/charts/certmanager/templates/rbac.yaml
# Certificates controller role
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: gitlab-certmanager-controller-certificates
  namespace: {{ .Release.Namespace }}
  labels:
    app: certmanager
    app.kubernetes.io/name: certmanager
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: "controller"
    app.kubernetes.io/version: "v1.12.6"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: certmanager-v1.12.6
rules:
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates", "certificates/status", "certificaterequests", "certificaterequests/status"]
    verbs: ["update", "patch"]
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates", "certificaterequests", "clusterissuers", "issuers"]
    verbs: ["get", "list", "watch"]
  # We require these rules to support users with the OwnerReferencesPermissionEnforcement
  # admission controller enabled:
  # https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#ownerreferencespermissionenforcement
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates/finalizers", "certificaterequests/finalizers"]
    verbs: ["update"]
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["orders"]
    verbs: ["create", "delete", "get", "list", "watch"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch", "create", "update", "delete", "patch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]
---
# Source: gitlab/charts/certmanager/templates/rbac.yaml
# Orders controller role
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: gitlab-certmanager-controller-orders
  namespace: {{ .Release.Namespace }}
  labels:
    app: certmanager
    app.kubernetes.io/name: certmanager
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: "controller"
    app.kubernetes.io/version: "v1.12.6"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: certmanager-v1.12.6
rules:
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["orders", "orders/status"]
    verbs: ["update", "patch"]
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["orders", "challenges"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["cert-manager.io"]
    resources: ["clusterissuers", "issuers"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["challenges"]
    verbs: ["create", "delete"]
  # We require these rules to support users with the OwnerReferencesPermissionEnforcement
  # admission controller enabled:
  # https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#ownerreferencespermissionenforcement
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["orders/finalizers"]
    verbs: ["update"]
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]
---
# Source: gitlab/charts/certmanager/templates/rbac.yaml
# Challenges controller role
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: gitlab-certmanager-controller-challenges
  namespace: {{ .Release.Namespace }}
  labels:
    app: certmanager
    app.kubernetes.io/name: certmanager
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: "controller"
    app.kubernetes.io/version: "v1.12.6"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: certmanager-v1.12.6
rules:
  # Use to update challenge resource status
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["challenges", "challenges/status"]
    verbs: ["update", "patch"]
  # Used to watch challenge resources
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["challenges"]
    verbs: ["get", "list", "watch"]
  # Used to watch challenges, issuer and clusterissuer resources
  - apiGroups: ["cert-manager.io"]
    resources: ["issuers", "clusterissuers"]
    verbs: ["get", "list", "watch"]
  # Need to be able to retrieve ACME account private key to complete challenges
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch"]
  # Used to create events
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]
  # HTTP01 rules
  - apiGroups: [""]
    resources: ["pods", "services"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: ["networking.k8s.io"]
    resources: ["ingresses"]
    verbs: ["get", "list", "watch", "create", "delete", "update"]
  - apiGroups: [ "gateway.networking.k8s.io" ]
    resources: [ "httproutes" ]
    verbs: ["get", "list", "watch", "create", "delete", "update"]
  # We require the ability to specify a custom hostname when we are creating
  # new ingress resources.
  # See: https://github.com/openshift/origin/blob/21f191775636f9acadb44fa42beeb4f75b255532/pkg/route/apiserver/admission/ingress_admission.go#L84-L148
  - apiGroups: ["route.openshift.io"]
    resources: ["routes/custom-host"]
    verbs: ["create"]
  # We require these rules to support users with the OwnerReferencesPermissionEnforcement
  # admission controller enabled:
  # https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#ownerreferencespermissionenforcement
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["challenges/finalizers"]
    verbs: ["update"]
  # DNS01 rules (duplicated above)
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list", "watch"]
---
# Source: gitlab/charts/certmanager/templates/rbac.yaml
# ingress-shim controller role
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: gitlab-certmanager-controller-ingress-shim
  namespace: {{ .Release.Namespace }}
  labels:
    app: certmanager
    app.kubernetes.io/name: certmanager
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: "controller"
    app.kubernetes.io/version: "v1.12.6"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: certmanager-v1.12.6
rules:
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates", "certificaterequests"]
    verbs: ["create", "update", "delete"]
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates", "certificaterequests", "issuers", "clusterissuers"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["networking.k8s.io"]
    resources: ["ingresses"]
    verbs: ["get", "list", "watch"]
  # We require these rules to support users with the OwnerReferencesPermissionEnforcement
  # admission controller enabled:
  # https://kubernetes.io/docs/reference/access-authn-authz/admission-controllers/#ownerreferencespermissionenforcement
  - apiGroups: ["networking.k8s.io"]
    resources: ["ingresses/finalizers"]
    verbs: ["update"]
  - apiGroups: ["gateway.networking.k8s.io"]
    resources: ["gateways", "httproutes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["gateway.networking.k8s.io"]
    resources: ["gateways/finalizers", "httproutes/finalizers"]
    verbs: ["update"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "patch"]
---
# Source: gitlab/charts/certmanager/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: gitlab-certmanager-view
  namespace: {{ .Release.Namespace }}
  labels:
    app: certmanager
    app.kubernetes.io/name: certmanager
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: "controller"
    app.kubernetes.io/version: "v1.12.6"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: certmanager-v1.12.6
    rbac.authorization.k8s.io/aggregate-to-view: "true"
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
rules:
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates", "certificaterequests", "issuers"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["challenges", "orders"]
    verbs: ["get", "list", "watch"]
---
# Source: gitlab/charts/certmanager/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: gitlab-certmanager-edit
  namespace: {{ .Release.Namespace }}
  labels:
    app: certmanager
    app.kubernetes.io/name: certmanager
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: "controller"
    app.kubernetes.io/version: "v1.12.6"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: certmanager-v1.12.6
    rbac.authorization.k8s.io/aggregate-to-edit: "true"
    rbac.authorization.k8s.io/aggregate-to-admin: "true"
rules:
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates", "certificaterequests", "issuers"]
    verbs: ["create", "delete", "deletecollection", "patch", "update"]
  - apiGroups: ["cert-manager.io"]
    resources: ["certificates/status"]
    verbs: ["update"]
  - apiGroups: ["acme.cert-manager.io"]
    resources: ["challenges", "orders"]
    verbs: ["create", "delete", "deletecollection", "patch", "update"]
---
# Source: gitlab/charts/certmanager/templates/rbac.yaml
# Permission to approve CertificateRequests referencing cert-manager.io Issuers and ClusterIssuers
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: gitlab-certmanager-controller-approve:cert-manager-io
  namespace: {{ .Release.Namespace }}
  labels:
    app: certmanager
    app.kubernetes.io/name: certmanager
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: "cert-manager"
    app.kubernetes.io/version: "v1.12.6"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: certmanager-v1.12.6
rules:
  - apiGroups: ["cert-manager.io"]
    resources: ["signers"]
    verbs: ["approve"]
    resourceNames: ["issuers.cert-manager.io/*", "clusterissuers.cert-manager.io/*"]
---
# Source: gitlab/charts/certmanager/templates/rbac.yaml
# Permission to:
# - Update and sign CertificatSigningeRequests referencing cert-manager.io Issuers and ClusterIssuers
# - Perform SubjectAccessReviews to test whether users are able to reference Namespaced Issuers
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: gitlab-certmanager-controller-certificatesigningrequests
  namespace: {{ .Release.Namespace }}
  labels:
    app: certmanager
    app.kubernetes.io/name: certmanager
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: "cert-manager"
    app.kubernetes.io/version: "v1.12.6"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: certmanager-v1.12.6
rules:
  - apiGroups: ["certificates.k8s.io"]
    resources: ["certificatesigningrequests"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["certificates.k8s.io"]
    resources: ["certificatesigningrequests/status"]
    verbs: ["update", "patch"]
  - apiGroups: ["certificates.k8s.io"]
    resources: ["signers"]
    resourceNames: ["issuers.cert-manager.io/*", "clusterissuers.cert-manager.io/*"]
    verbs: ["sign"]
  - apiGroups: ["authorization.k8s.io"]
    resources: ["subjectaccessreviews"]
    verbs: ["create"]
---
# Source: gitlab/charts/certmanager/templates/webhook-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: gitlab-certmanager-webhook:subjectaccessreviews
  namespace: {{ .Release.Namespace }}
  labels:
    app: webhook
    app.kubernetes.io/name: webhook
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: "webhook"
    app.kubernetes.io/version: "v1.12.6"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: certmanager-v1.12.6
rules:
- apiGroups: ["authorization.k8s.io"]
  resources: ["subjectaccessreviews"]
  verbs: ["create"]
---
# Source: gitlab/charts/nginx-ingress/templates/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-4.0.6
    release: gitlab
    heritage: Helm
    
    component: "controller"
    helm.sh/chart: nginx-ingress-4.0.6
    app.kubernetes.io/version: "1.0.4"
    app.kubernetes.io/managed-by: Helm
  name: gitlab-nginx-ingress-cluster
  namespace: {{ .Release.Namespace }}
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingressclasses
    verbs:
      - get
      - list
      - watch
---
# Source: gitlab/charts/prometheus/templates/server/clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    component: "server"
    app: prometheus
    release: gitlab
    chart: prometheus-15.18.0
    heritage: Helm
  name: gitlab-prometheus-server
  namespace: {{ .Release.Namespace }}
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
      - nodes/proxy
      - nodes/metrics
      - services
      - endpoints
      - pods
      - ingresses
      - configmaps
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
      - "networking.k8s.io"
    resources:
      - ingresses/status
      - ingresses
    verbs:
      - get
      - list
      - watch
  # - nonResourceURLs:
  #     - "/metrics"
  #   verbs:
  #     - get
# ---
# # Source: gitlab/charts/certmanager/templates/cainjector-rbac.yaml
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRoleBinding
# metadata:
#   name: gitlab-certmanager-cainjector
#   labels:
#     app: cainjector
#     app.kubernetes.io/name: cainjector
#     app.kubernetes.io/instance: gitlab
#     app.kubernetes.io/component: "cainjector"
#     app.kubernetes.io/version: "v1.12.6"
#     app.kubernetes.io/managed-by: Helm
#     helm.sh/chart: certmanager-v1.12.6
# roleRef:
#   apiGroup: rbac.authorization.k8s.io
#   kind: ClusterRole
#   name: gitlab-certmanager-cainjector
# subjects:
#   - name: gitlab-certmanager-cainjector
#     namespace: {{ .Release.Namespace }}
#     kind: ServiceAccount
---
# Source: gitlab/charts/certmanager/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: gitlab-certmanager-controller-issuers
  namespace: {{ .Release.Namespace }}
  labels:
    app: certmanager
    app.kubernetes.io/name: certmanager
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: "controller"
    app.kubernetes.io/version: "v1.12.6"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: certmanager-v1.12.6
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: gitlab-certmanager-controller-issuers
subjects:
  - name: gitlab-certmanager
    namespace: {{ .Release.Namespace }}
    kind: ServiceAccount
---
# Source: gitlab/charts/certmanager/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: gitlab-certmanager-controller-clusterissuers
  namespace: {{ .Release.Namespace }}
  labels:
    app: certmanager
    app.kubernetes.io/name: certmanager
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: "controller"
    app.kubernetes.io/version: "v1.12.6"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: certmanager-v1.12.6
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: gitlab-certmanager-controller-clusterissuers
subjects:
  - name: gitlab-certmanager
    namespace: {{ .Release.Namespace }}
    kind: ServiceAccount
---
# Source: gitlab/charts/certmanager/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: gitlab-certmanager-controller-certificates
  namespace: {{ .Release.Namespace }}
  labels:
    app: certmanager
    app.kubernetes.io/name: certmanager
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: "controller"
    app.kubernetes.io/version: "v1.12.6"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: certmanager-v1.12.6
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: gitlab-certmanager-controller-certificates
subjects:
  - name: gitlab-certmanager
    namespace: {{ .Release.Namespace }}
    kind: ServiceAccount
---
# Source: gitlab/charts/certmanager/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: gitlab-certmanager-controller-orders
  namespace: {{ .Release.Namespace }}
  labels:
    app: certmanager
    app.kubernetes.io/name: certmanager
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: "controller"
    app.kubernetes.io/version: "v1.12.6"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: certmanager-v1.12.6
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: gitlab-certmanager-controller-orders
subjects:
  - name: gitlab-certmanager
    namespace: {{ .Release.Namespace }}
    kind: ServiceAccount
---
# Source: gitlab/charts/certmanager/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: gitlab-certmanager-controller-challenges
  namespace: {{ .Release.Namespace }}
  labels:
    app: certmanager
    app.kubernetes.io/name: certmanager
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: "controller"
    app.kubernetes.io/version: "v1.12.6"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: certmanager-v1.12.6
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: gitlab-certmanager-controller-challenges
subjects:
  - name: gitlab-certmanager
    namespace: {{ .Release.Namespace }}
    kind: ServiceAccount
---
# Source: gitlab/charts/certmanager/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: gitlab-certmanager-controller-ingress-shim
  namespace: {{ .Release.Namespace }}
  labels:
    app: certmanager
    app.kubernetes.io/name: certmanager
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: "controller"
    app.kubernetes.io/version: "v1.12.6"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: certmanager-v1.12.6
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: gitlab-certmanager-controller-ingress-shim
subjects:
  - name: gitlab-certmanager
    namespace: {{ .Release.Namespace }}
    kind: ServiceAccount
---
# Source: gitlab/charts/certmanager/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: gitlab-certmanager-controller-approve:cert-manager-io
  namespace: {{ .Release.Namespace }}
  labels:
    app: certmanager
    app.kubernetes.io/name: certmanager
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: "cert-manager"
    app.kubernetes.io/version: "v1.12.6"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: certmanager-v1.12.6
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: gitlab-certmanager-controller-approve:cert-manager-io
subjects:
  - name: gitlab-certmanager
    namespace: {{ .Release.Namespace }}
    kind: ServiceAccount
---
# Source: gitlab/charts/certmanager/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: gitlab-certmanager-controller-certificatesigningrequests
  namespace: {{ .Release.Namespace }}
  labels:
    app: certmanager
    app.kubernetes.io/name: certmanager
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: "cert-manager"
    app.kubernetes.io/version: "v1.12.6"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: certmanager-v1.12.6
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: gitlab-certmanager-controller-certificatesigningrequests
subjects:
  - name: gitlab-certmanager
    namespace: {{ .Release.Namespace }}
    kind: ServiceAccount
---
# Source: gitlab/charts/certmanager/templates/webhook-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: gitlab-certmanager-webhook:subjectaccessreviews
  namespace: {{ .Release.Namespace }}
  labels:
    app: webhook
    app.kubernetes.io/name: webhook
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: "webhook"
    app.kubernetes.io/version: "v1.12.6"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: certmanager-v1.12.6
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: gitlab-certmanager-webhook:subjectaccessreviews
subjects:
- apiGroup: ""
  kind: ServiceAccount
  name: gitlab-certmanager-webhook
  namespace: {{ .Release.Namespace }}
---
# Source: gitlab/charts/nginx-ingress/templates/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-4.0.6
    release: gitlab
    heritage: Helm
    
    component: "controller"
    helm.sh/chart: nginx-ingress-4.0.6
    app.kubernetes.io/version: "1.0.4"
    app.kubernetes.io/managed-by: Helm
  name: gitlab-nginx-ingress-cluster
  namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: gitlab-nginx-ingress-cluster
subjects:
  - kind: ServiceAccount
    name: gitlab-nginx-ingress
    namespace: "{{ .Release.Namespace }}"
---
# Source: gitlab/charts/prometheus/templates/server/clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    component: "server"
    app: prometheus
    release: gitlab
    chart: prometheus-15.18.0
    heritage: Helm
  name: gitlab-prometheus-server
  namespace: {{ .Release.Namespace }}
subjects:
  - kind: ServiceAccount
    name: gitlab-prometheus-server
    namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: gitlab-prometheus-server
---
# Source: gitlab/charts/certmanager-issuer/templates/rbac-config.yaml
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: gitlab-certmanager-issuer
  namespace: {{ .Release.Namespace }}
rules:
- apiGroups: ["cert-manager.io"]
  resources: ["issuers"]
  verbs: ["get", "list", "update", "create", "patch"]
# ---
# # Source: gitlab/charts/certmanager/templates/cainjector-rbac.yaml
# # leader election rules
# apiVersion: rbac.authorization.k8s.io/v1
# kind: Role
# metadata:
#   name: gitlab-certmanager-cainjector:leaderelection
#   namespace: kube-system
#   labels:
#     app: cainjector
#     app.kubernetes.io/name: cainjector
#     app.kubernetes.io/instance: gitlab
#     app.kubernetes.io/component: "cainjector"
#     app.kubernetes.io/version: "v1.12.6"
#     app.kubernetes.io/managed-by: Helm
#     helm.sh/chart: certmanager-v1.12.6
# rules:
#   # Used for leader election by the controller
#   # cert-manager-cainjector-leader-election is used by the CertificateBased injector controller
#   #   see cmd/cainjector/start.go#L113
#   # cert-manager-cainjector-leader-election-core is used by the SecretBased injector controller
#   #   see cmd/cainjector/start.go#L137
#   - apiGroups: ["coordination.k8s.io"]
#     resources: ["leases"]
#     resourceNames: ["cert-manager-cainjector-leader-election", "cert-manager-cainjector-leader-election-core"]
#     verbs: ["get", "update", "patch"]
#   - apiGroups: ["coordination.k8s.io"]
#     resources: ["leases"]
#     verbs: ["create"]
---
# Source: gitlab/charts/certmanager/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: gitlab-certmanager:leaderelection
  namespace: {{ .Release.Namespace }}
  labels:
    app: certmanager
    app.kubernetes.io/name: certmanager
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: "controller"
    app.kubernetes.io/version: "v1.12.6"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: certmanager-v1.12.6
rules:
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    resourceNames: ["cert-manager-controller"]
    verbs: ["get", "update", "patch"]
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["create"]
---
# Source: gitlab/charts/certmanager/templates/webhook-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: gitlab-certmanager-webhook:dynamic-serving
  namespace: {{ .Release.Namespace }}
  labels:
    app: webhook
    app.kubernetes.io/name: webhook
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: "webhook"
    app.kubernetes.io/version: "v1.12.6"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: certmanager-v1.12.6
rules:
- apiGroups: [""]
  resources: ["secrets"]
  resourceNames:
  - 'gitlab-certmanager-webhook-ca'
  verbs: ["get", "list", "watch", "update"]
# It's not possible to grant CREATE permission on a single resourceName.
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["create"]
---
# Source: gitlab/charts/gitlab-runner/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: "Role"
metadata:
  name: gitlab-gitlab-runner
  labels:
    app: gitlab-gitlab-runner
    chart: gitlab-runner-0.58.2
    release: "gitlab"
    heritage: "Helm"
  namespace: "{{ .Release.Namespace }}"
rules:
- apiGroups: [""]
  resources: ["*"]
  verbs: ["*"]
---
# Source: gitlab/charts/nginx-ingress/templates/controller-role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-4.0.6
    release: gitlab
    heritage: Helm
    
    component: "controller"
    helm.sh/chart: nginx-ingress-4.0.6
    app.kubernetes.io/version: "1.0.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: gitlab-nginx-ingress
  namespace: {{ .Release.Namespace }}
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - endpoints
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingresses/status
    verbs:
      - update
  - apiGroups:
      - networking.k8s.io
    resources:
      - ingressclasses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      - ingress-controller-leader
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    resourceNames:
      - ingress-controller-leader
    verbs:
      - get
      - update
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
---
# Source: gitlab/charts/certmanager-issuer/templates/rbac-config.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: gitlab-certmanager-issuer
  namespace: {{ .Release.Namespace }}
  labels:
    app: certmanager-issuer
    chart: certmanager-issuer-0.1.0
    release: gitlab
    heritage: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: gitlab-certmanager-issuer
subjects:
  - kind: ServiceAccount
    name: gitlab-certmanager-issuer
    namespace: {{ .Release.Namespace }}
---
# # Source: gitlab/charts/certmanager/templates/cainjector-rbac.yaml
# # grant cert-manager permission to manage the leaderelection configmap in the
# # leader election namespace
# apiVersion: rbac.authorization.k8s.io/v1
# kind: RoleBinding
# metadata:
#   name: gitlab-certmanager-cainjector:leaderelection
#   namespace: kube-system
#   labels:
#     app: cainjector
#     app.kubernetes.io/name: cainjector
#     app.kubernetes.io/instance: gitlab
#     app.kubernetes.io/component: "cainjector"
#     app.kubernetes.io/version: "v1.12.6"
#     app.kubernetes.io/managed-by: Helm
#     helm.sh/chart: certmanager-v1.12.6
# roleRef:
#   apiGroup: rbac.authorization.k8s.io
#   kind: Role
#   name: gitlab-certmanager-cainjector:leaderelection
# subjects:
#   - kind: ServiceAccount
#     name: gitlab-certmanager-cainjector
#     namespace: {{ .Release.Namespace }}
# ---
# Source: gitlab/charts/certmanager/templates/rbac.yaml
# grant cert-manager permission to manage the leaderelection configmap in the
# leader election namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: gitlab-certmanager:leaderelection
  namespace: {{ .Release.Namespace }}
  labels:
    app: certmanager
    app.kubernetes.io/name: certmanager
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: "controller"
    app.kubernetes.io/version: "v1.12.6"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: certmanager-v1.12.6
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: gitlab-certmanager:leaderelection
subjects:
  - apiGroup: ""
    kind: ServiceAccount
    name: gitlab-certmanager
    namespace: {{ .Release.Namespace }}
---
# Source: gitlab/charts/certmanager/templates/webhook-rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: gitlab-certmanager-webhook:dynamic-serving
  namespace: {{ .Release.Namespace }}
  labels:
    app: webhook
    app.kubernetes.io/name: webhook
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: "webhook"
    app.kubernetes.io/version: "v1.12.6"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: certmanager-v1.12.6
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: gitlab-certmanager-webhook:dynamic-serving
subjects:
- apiGroup: ""
  kind: ServiceAccount
  name: gitlab-certmanager-webhook
  namespace: {{ .Release.Namespace }}
---
# Source: gitlab/charts/gitlab-runner/templates/role-binding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: "RoleBinding"
metadata:
  name: gitlab-gitlab-runner
  labels:
    app: gitlab-gitlab-runner
    chart: gitlab-runner-0.58.2
    release: "gitlab"
    heritage: "Helm"
  namespace: "{{ .Release.Namespace }}"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: "Role"
  name: gitlab-gitlab-runner
subjects:
- kind: ServiceAccount
  name: gitlab-gitlab-runner
  namespace: "{{ .Release.Namespace }}"
---
# Source: gitlab/charts/nginx-ingress/templates/controller-rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-4.0.6
    release: gitlab
    heritage: Helm
    
    component: "controller"
    helm.sh/chart: nginx-ingress-4.0.6
    app.kubernetes.io/version: "1.0.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: gitlab-nginx-ingress
  namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: gitlab-nginx-ingress
subjects:
  - kind: ServiceAccount
    name: gitlab-nginx-ingress
    namespace: "{{ .Release.Namespace }}"
---
# Source: gitlab/charts/certmanager/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitlab-certmanager
  namespace: {{ .Release.Namespace }}
  labels:
    app: certmanager
    app.kubernetes.io/name: certmanager
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: "controller"
    app.kubernetes.io/version: "v1.12.6"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: certmanager-v1.12.6
spec:
  type: ClusterIP
  ports:
  - protocol: TCP
    port: 9402
    name: tcp-prometheus-servicemonitor
    targetPort: 9402
  selector:
    app.kubernetes.io/name: certmanager
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: "controller"
---
# Source: gitlab/charts/certmanager/templates/webhook-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitlab-certmanager-webhook
  namespace: {{ .Release.Namespace }}
  labels:
    app: webhook
    app.kubernetes.io/name: webhook
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: "webhook"
    app.kubernetes.io/version: "v1.12.6"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: certmanager-v1.12.6
spec:
  type: ClusterIP
  ports:
  - name: https
    port: 443
    protocol: TCP
    targetPort: "https"
  selector:
    app.kubernetes.io/name: webhook
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: "webhook"
---
# Source: gitlab/charts/gitlab/charts/gitaly/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitlab-gitaly
  namespace: {{ .Release.Namespace }}
  labels:
    app: gitaly
    chart: gitaly-7.6.0
    release: gitlab
    heritage: Helm
    
    
  annotations:
    
spec:
  type: ClusterIP
  clusterIP: "None"
  ports:
    - port: 8075
      # This port is NOT prefixed with `grpc` due to
      # https://gitlab.com/gitlab-org/charts/gitlab/-/issues/3822
      name: tcp-gitaly
      targetPort: grpc-gitaly
    - port: 9236
      name: http-metrics
      targetPort: http-metrics
  selector:
    app: gitaly
    release: gitlab
---
# Source: gitlab/charts/gitlab/charts/gitlab-exporter/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitlab-gitlab-exporter
  namespace: {{ .Release.Namespace }}
  labels:
    app: gitlab-exporter
    chart: gitlab-exporter-7.6.0
    release: gitlab
    heritage: Helm
    
    
  annotations:
    
spec:
  type: ClusterIP
  ports:
    - port: 9168
      targetPort: http-metrics
      protocol: TCP
      name: http-metrics
  selector:
    app: gitlab-exporter
    release: gitlab
---
# Source: gitlab/charts/gitlab/charts/gitlab-shell/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitlab-gitlab-shell
  namespace: {{ .Release.Namespace }}
  labels:
    app: gitlab-shell
    chart: gitlab-shell-7.6.0
    release: gitlab
    heritage: Helm
    
    
  annotations:
    
spec:
  type: ClusterIP
  ports:
    - port: 22
      targetPort: 2222
      protocol: TCP
      name: ssh
  selector:
    app: gitlab-shell
    release: gitlab
---
# Source: gitlab/charts/gitlab/charts/kas/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitlab-kas
  namespace: {{ .Release.Namespace }}
  labels:
    app: kas
    chart: kas-7.6.0
    release: gitlab
    heritage: Helm
    
    
  annotations:
    
spec:
  type: "ClusterIP"
  ports:
    - port: 8150
      targetPort: 8150
      protocol: TCP
      name: tcp-kas-external-api
    - port: 8153
      targetPort: 8153
      protocol: TCP
      name: tcp-kas-internal-api
    - port: 8154
      targetPort: 8154
      protocol: TCP
      name: tcp-kas-k8s-api
    - port: 8151
      targetPort: http-metrics
      protocol: TCP
      name: http-metrics
  selector:
    app: kas
    release: gitlab
---
# Source: gitlab/charts/gitlab/charts/webservice/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitlab-webservice-default
  namespace: {{ .Release.Namespace }}
  labels:
    app: webservice
    chart: webservice-7.6.0
    release: gitlab
    heritage: Helm
    
    gitlab.com/webservice-name: default
    
  annotations:
    
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: http-webservice
      protocol: TCP
      name: http-webservice
    - port: 8181
      targetPort: http-workhorse
      protocol: TCP
      name: http-workhorse
    - port: 8083
      targetPort: http-metrics-ws
      protocol: TCP
      name: http-metrics-ws
  selector:
    app: webservice
    release: gitlab
    
    gitlab.com/webservice-name: default
---
# Source: gitlab/charts/minio/templates/minio_svc.yaml
kind: Service
apiVersion: v1
metadata:
  name: gitlab-minio-svc
  namespace: {{ .Release.Namespace }}
  labels:
    app: minio
    chart: minio-0.4.3
    release: gitlab
    heritage: Helm
    
  annotations:
    
spec:
  type: ClusterIP
  selector:
    app: minio
    release: gitlab
    component: app
  ports:
    - name: http
      port: 9000
      targetPort: 9000
      protocol: TCP
---
# Source: gitlab/charts/nginx-ingress/templates/controller-service-metrics.yaml
apiVersion: v1
kind: Service
metadata:
  annotations: 
    gitlab.com/prometheus_port: "10254"
    gitlab.com/prometheus_scrape: "true"
    prometheus.io/port: "10254"
    prometheus.io/scrape: "true"
  labels:
    app: nginx-ingress
    chart: nginx-ingress-4.0.6
    release: gitlab
    heritage: Helm
    
    component: "controller"
    helm.sh/chart: nginx-ingress-4.0.6
    app.kubernetes.io/version: "1.0.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: gitlab-nginx-ingress-controller-metrics
  namespace: {{ .Release.Namespace }}
spec:
  type: ClusterIP
  ports:
    - name: metrics
      port: 10254
      protocol: TCP
      targetPort: metrics
  selector:
    app: nginx-ingress
    release: gitlab
    component: "controller"
---
# Source: gitlab/charts/nginx-ingress/templates/controller-service.yaml
apiVersion: v1
kind: Service
metadata:
  annotations:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-4.0.6
    release: gitlab
    heritage: Helm
    
    component: "controller"
    helm.sh/chart: nginx-ingress-4.0.6
    app.kubernetes.io/version: "1.0.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: gitlab-nginx-ingress-controller
  namespace: {{ .Release.Namespace }}
spec:
  type: LoadBalancer
  
  externalTrafficPolicy: Local
  ipFamilyPolicy: SingleStack
  ipFamilies: 
    - IPv4
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
    - name: gitlab-shell
      port: 22
      protocol: TCP
      targetPort: gitlab-shell
  selector:
    app: nginx-ingress
    release: gitlab
    component: "controller"
---
# Source: gitlab/charts/postgresql/templates/primary/metrics-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitlab-postgresql-metrics
  namespace: "{{ .Release.Namespace }}"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.5.2
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
  annotations:
    gitlab.com/prometheus_port: "9187"
    gitlab.com/prometheus_scrape: "true"
    prometheus.io/port: "9187"
    prometheus.io/scrape: "true"
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http-metrics
      port: 9187
      targetPort: http-metrics
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: primary
---
# Source: gitlab/charts/postgresql/templates/primary/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitlab-postgresql-hl
  namespace: "{{ .Release.Namespace }}"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.5.2
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
    # Use this annotation in addition to the actual publishNotReadyAddresses
    # field below because the annotation will stop being respected soon but the
    # field is broken in some versions of Kubernetes:
    # https://github.com/kubernetes/kubernetes/issues/58662
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: ClusterIP
  clusterIP: None
  # We want all pods in the StatefulSet to have their addresses published for
  # the sake of the other Postgresql pods even before they're ready, since they
  # have to be able to talk to each other in order to become ready.
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: primary
---
# Source: gitlab/charts/postgresql/templates/primary/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitlab-postgresql
  namespace: "{{ .Release.Namespace }}"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.5.2
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
      nodePort: null
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: primary
---
# Source: gitlab/charts/prometheus/templates/server/service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    component: "server"
    app: prometheus
    release: gitlab
    chart: prometheus-15.18.0
    heritage: Helm
  name: gitlab-prometheus-server
  namespace: {{ .Release.Namespace }}
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 9090
  selector:
    component: "server"
    app: prometheus
    release: gitlab
  sessionAffinity: None
  type: "ClusterIP"
---
# Source: gitlab/charts/redis/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitlab-redis-headless
  namespace: "{{ .Release.Namespace }}"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.13.2
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/managed-by: Helm
  annotations:
    
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: gitlab
---
# Source: gitlab/charts/redis/templates/master/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitlab-redis-master
  namespace: "{{ .Release.Namespace }}"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.13.2
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  internalTrafficPolicy: Cluster
  sessionAffinity: None
  ports:
    - name: tcp-redis
      port: 6379
      targetPort: redis
      nodePort: null
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: master
---
# Source: gitlab/charts/redis/templates/metrics-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitlab-redis-metrics
  namespace: "{{ .Release.Namespace }}"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.13.2
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: metrics
spec:
  type: ClusterIP
  ports:
    - name: http-metrics
      port: 9121
      protocol: TCP
      targetPort: metrics
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: gitlab
---
# Source: gitlab/charts/registry/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: gitlab-registry
  namespace: {{ .Release.Namespace }}
  labels:
    app: registry
    chart: registry-0.7.0
    release: gitlab
    heritage: Helm
    
    
  annotations:
    
spec:
  type: ClusterIP
  ports:
  - port: 5000
    targetPort: http
    protocol: TCP
    name: http-registry
  selector:
    app: registry
    release: gitlab
---
# # Source: gitlab/charts/certmanager/templates/cainjector-deployment.yaml
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: gitlab-certmanager-cainjector
#   namespace: {{ .Release.Namespace }}
#   labels:
#     app: cainjector
#     app.kubernetes.io/name: cainjector
#     app.kubernetes.io/instance: gitlab
#     app.kubernetes.io/component: "cainjector"
#     app.kubernetes.io/version: "v1.12.6"
#     app.kubernetes.io/managed-by: Helm
#     helm.sh/chart: certmanager-v1.12.6
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app.kubernetes.io/name: cainjector
#       app.kubernetes.io/instance: gitlab
#       app.kubernetes.io/component: "cainjector"
#   template:
#     metadata:
#       labels:
#         app: cainjector
#         app.kubernetes.io/name: cainjector
#         app.kubernetes.io/instance: gitlab
#         app.kubernetes.io/component: "cainjector"
#         app.kubernetes.io/version: "v1.12.6"
#         app.kubernetes.io/managed-by: Helm
#         helm.sh/chart: certmanager-v1.12.6
#     spec:
#       serviceAccountName: gitlab-certmanager-cainjector
#       securityContext:
#         runAsNonRoot: true
#         seccompProfile:
#           type: RuntimeDefault
#       containers:
#         - name: certmanager-cainjector
#           image: "quay.io/jetstack/cert-manager-cainjector:v1.12.6"
#           imagePullPolicy: IfNotPresent
#           args:
#           - --v=2
#           - --leader-election-namespace=kube-system
#           env:
#           - name: POD_NAMESPACE
#             valueFrom:
#               fieldRef:
#                 fieldPath: metadata.namespace
#           securityContext:
#             allowPrivilegeEscalation: false
#             capabilities:
#               drop:
#               - ALL
#       nodeSelector:
#         kubernetes.io/os: linux
# ---
# Source: gitlab/charts/certmanager/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitlab-certmanager
  namespace: {{ .Release.Namespace }}
  labels:
    app: certmanager
    app.kubernetes.io/name: certmanager
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: "controller"
    app.kubernetes.io/version: "v1.12.6"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: certmanager-v1.12.6
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: certmanager
      app.kubernetes.io/instance: gitlab
      app.kubernetes.io/component: "controller"
  template:
    metadata:
      labels:
        app: certmanager
        app.kubernetes.io/name: certmanager
        app.kubernetes.io/instance: gitlab
        app.kubernetes.io/component: "controller"
        app.kubernetes.io/version: "v1.12.6"
        app.kubernetes.io/managed-by: Helm
        helm.sh/chart: certmanager-v1.12.6
      annotations:
        prometheus.io/path: "/metrics"
        prometheus.io/scrape: 'true'
        prometheus.io/port: '9402'
    spec:
      serviceAccountName: gitlab-certmanager
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: certmanager-controller
          image: "docker.io/aboveos/jetstack-cert-manager-controller:v1.12.6"
          imagePullPolicy: IfNotPresent
          args:
          - --v=2
          - --cluster-resource-namespace=$(POD_NAMESPACE)
          - --leader-election-namespace={{ .Release.Namespace }}
          - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.12.6
          - --max-concurrent-challenges=60
          ports:
          - containerPort: 9402
            name: http-metrics
            protocol: TCP
          - containerPort: 9403
            name: http-healthz
            protocol: TCP
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          resources:
            requests:
              cpu: 10m
              memory: 20Mi
            limits:
              cpu: 100m
              memory: 100Mi
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: gitlab/charts/certmanager/templates/webhook-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitlab-certmanager-webhook
  namespace: {{ .Release.Namespace }}
  labels:
    app: webhook
    app.kubernetes.io/name: webhook
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/component: "webhook"
    app.kubernetes.io/version: "v1.12.6"
    app.kubernetes.io/managed-by: Helm
    helm.sh/chart: certmanager-v1.12.6
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: webhook
      app.kubernetes.io/instance: gitlab
      app.kubernetes.io/component: "webhook"
  template:
    metadata:
      labels:
        app: webhook
        app.kubernetes.io/name: webhook
        app.kubernetes.io/instance: gitlab
        app.kubernetes.io/component: "webhook"
        app.kubernetes.io/version: "v1.12.6"
        app.kubernetes.io/managed-by: Helm
        helm.sh/chart: certmanager-v1.12.6
    spec:
      serviceAccountName: gitlab-certmanager-webhook
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: certmanager-webhook
          image: "docker.io/aboveos/jetstack-cert-manager-webhook:v1.12.6"
          imagePullPolicy: IfNotPresent
          args:
          - --v=2
          - --secure-port=10250
          - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
          - --dynamic-serving-ca-secret-name=gitlab-certmanager-webhook-ca
          - --dynamic-serving-dns-names=gitlab-certmanager-webhook
          - --dynamic-serving-dns-names=gitlab-certmanager-webhook.$(POD_NAMESPACE)
          - --dynamic-serving-dns-names=gitlab-certmanager-webhook.$(POD_NAMESPACE).svc
          
          ports:
          - name: https
            protocol: TCP
            containerPort: 10250
          - name: healthcheck
            protocol: TCP
            containerPort: 6080
          livenessProbe:
            httpGet:
              path: /livez
              port: 6080
              scheme: HTTP
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /healthz
              port: 6080
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          resources:
            requests:
              cpu: 10m
              memory: 50Mi
            limits:
              cpu: 100m
              memory: 100Mi
      nodeSelector:
        kubernetes.io/os: linux
---
# Source: gitlab/charts/gitlab-runner/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitlab-gitlab-runner
  namespace: "{{ .Release.Namespace }}"
  labels:
    app: gitlab-gitlab-runner
    chart: gitlab-runner-0.58.2
    release: "gitlab"
    heritage: "Helm"
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: gitlab-gitlab-runner
  template:
    metadata:
      labels:
        app: gitlab-gitlab-runner
        chart: gitlab-runner-0.58.2
        release: "gitlab"
        heritage: "Helm"
      annotations:
        checksum/configmap: 47dfc3c932d8c83061a73d18043290a88c26bfcb8e94058ec437807d48ec544d
        checksum/secrets: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        gitlab.com/prometheus_port: "9252"
        gitlab.com/prometheus_scrape: "true"
    spec:
      securityContext: 
        fsGroup: 65533
        runAsUser: 100
      terminationGracePeriodSeconds: 3600
      serviceAccountName: gitlab-gitlab-runner
      containers:
      - name: gitlab-gitlab-runner
        image: docker.io/aboveos/gitlab-org-gitlab-runner:alpine-v16.5.0
        imagePullPolicy: "IfNotPresent"
        securityContext: 
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
        
        command: ["/usr/bin/dumb-init", "--", "/bin/bash", "/configmaps/entrypoint"]
        env:
                
        - name: CI_SERVER_URL
          value: https://{{ $gitlabDomain }}
        - name: RUNNER_EXECUTOR
          value: "kubernetes"
        - name: REGISTER_LOCKED
          value: "false"
        - name: RUNNER_TAG_LIST
          value: ""
        - name: KUBERNETES_NAMESPACE
          value: "{{ .Release.Namespace }}"
        livenessProbe:
          exec:
            command: ["/bin/bash", "/configmaps/check-live"]
          initialDelaySeconds: 60
          timeoutSeconds: 3
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          exec:
            command: ["/usr/bin/pgrep","gitlab.*runner"]
          initialDelaySeconds: 10
          timeoutSeconds: 3
          periodSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        ports:
        - name: "metrics"
          containerPort: 9252
        volumeMounts:
        - name: projected-secrets
          mountPath: /secrets
        - name: etc-gitlab-runner
          mountPath: /home/gitlab-runner/.gitlab-runner
        - name: configmaps
          mountPath: /configmaps
        resources:
          requests:
            cpu: 10m
            memory: 50Mi
          limits:
            cpu: 100m
            memory: 256Mi
      volumes:
      - name: runner-secrets
        emptyDir:
          medium: "Memory"
      - name: etc-gitlab-runner
        emptyDir:
          medium: "Memory"
      - name: projected-secrets
        projected:
          sources:
            - secret:
                name: "gitlab-minio-secret"
            - secret:
                name: "gitlab-gitlab-runner-secret"
                items:
                  - key: runner-registration-token
                    path: runner-registration-token
                  - key: runner-token
                    path: runner-token
      - name: configmaps
        configMap:
          name: gitlab-gitlab-runner
---
# Source: gitlab/charts/gitlab/charts/gitlab-exporter/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitlab-gitlab-exporter
  namespace: {{ .Release.Namespace }}
  labels:
    app: gitlab-exporter
    chart: gitlab-exporter-7.6.0
    release: gitlab
    heritage: Helm
    
  annotations:
    
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gitlab-exporter
      release: gitlab
      
  template:
    metadata:
      labels:
        app: gitlab-exporter
        chart: gitlab-exporter-7.6.0
        release: gitlab
        heritage: Helm
        
        
      annotations:
        checksum/config: be52002f2b8ef55ffe50bfa5ea917fc15af60429521dc99ade00b3b3e38da9cf
        gitlab.com/prometheus_scrape: "true"
        gitlab.com/prometheus_port: "9168"
        gitlab.com/prometheus_path: /metrics
        prometheus.io/scrape: "true"
        prometheus.io/port: "9168"
        prometheus.io/path: /metrics

    spec:
      
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app: gitlab-exporter
                  release: gitlab
                  
      automountServiceAccountToken: false
      
      initContainers:
        
        - name: certificates
          image: docker.io/aboveos/gitlab-org-build-cng-certificates:v16.6.0    
          env:
          
          - name: MALLOC_CONF
            value: "dirty_decay_ms:0,muzzy_decay_ms:0"
          - name: RUBY_GC_HEAP_FREE_SLOTS_MAX_RATIO
            value: "0.111"
          - name: RUBY_GC_HEAP_FREE_SLOTS_MIN_RATIO
            value: "0.055"
          - name: RUBY_GC_HEAP_INIT_SLOTS
            value: "80000"
          
          volumeMounts:
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs
            readOnly: false
          - name: etc-pki-ca-trust-extracted-pem
            mountPath: /etc/pki/ca-trust/extracted/pem
            readOnly: false
          resources:
            requests:
              cpu: 50m
        - name: configure
          command: ['sh', '/config/configure']
          image: "docker.io/aboveos/gitlab-org-build-cng-gitlab-base:v16.6.0"                    
          env:
          
          - name: MALLOC_CONF
            value: "dirty_decay_ms:0,muzzy_decay_ms:0"
          - name: RUBY_GC_HEAP_FREE_SLOTS_MAX_RATIO
            value: "0.111"
          - name: RUBY_GC_HEAP_FREE_SLOTS_MIN_RATIO
            value: "0.055"
          - name: RUBY_GC_HEAP_INIT_SLOTS
            value: "80000"
          
          volumeMounts:
          
          
          - name: gitlab-exporter-config
            mountPath: /config
            readOnly: true
          - name: init-gitlab-exporter-secrets
            mountPath: /init-config
            readOnly: true
          - name: gitlab-exporter-secrets
            mountPath: /init-secrets
            readOnly: false
          resources:
            requests:
              cpu: 50m      
      containers:
        
        - name: gitlab-exporter
          image: "docker.io/aboveos/gitlab-org-build-cng-gitlab-exporter:13.4.1"                    
          securityContext:
            runAsUser: 1000
          env:
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/var/opt/gitlab-exporter/templates'
            - name: CONFIG_DIRECTORY
              value: '/etc/gitlab-exporter'
            
            - name: MALLOC_CONF
              value: "dirty_decay_ms:0,muzzy_decay_ms:0"
            - name: RUBY_GC_HEAP_FREE_SLOTS_MAX_RATIO
              value: "0.111"
            - name: RUBY_GC_HEAP_FREE_SLOTS_MIN_RATIO
              value: "0.055"
            - name: RUBY_GC_HEAP_INIT_SLOTS
              value: "80000"
            
          ports:
          - containerPort: 9168
            name: http-metrics
          volumeMounts:
            - name: gitlab-exporter-config
              mountPath: /var/opt/gitlab-exporter/templates/gitlab-exporter.yml.erb
              subPath: gitlab-exporter.yml.erb
            - name: gitlab-exporter-secrets
              mountPath: '/etc/gitlab'
              readOnly: true
            
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: true
            - name: etc-pki-ca-trust-extracted-pem
              mountPath: /etc/pki/ca-trust/extracted/pem
              readOnly: true
          livenessProbe:
            exec:
              command:
                - pgrep
                - -f
                - gitlab-exporter
          readinessProbe:
            exec:
              command:
                - pgrep
                - -f
                - gitlab-exporter
          lifecycle:
            preStop:
              exec:
                command: ["/bin/bash", "-c", "pkill -f 'gitlab-exporter'"]
          resources:
            requests:
              cpu: 75m
              memory: 100M
            limits:
              cpu: 500m
              memory: 256M
      volumes:
      
      
      - name: gitlab-exporter-config
        configMap:
          name: gitlab-gitlab-exporter
      - name: init-gitlab-exporter-secrets
        projected:
          defaultMode: 0400
          sources:
          - secret:
              name: "gitlab-postgresql-password"
              items:
                - key: "postgresql-password"
                  path: postgres/psql-password-ci
          - secret:
              name: "gitlab-postgresql-password"
              items:
                - key: "postgresql-password"
                  path: postgres/psql-password-main
          - secret:
              name: "gitlab-redis-secret"
              items:
                - key: "secret"
                  path: redis/redis-password
          

      - name: gitlab-exporter-secrets
        emptyDir:
          medium: "Memory"
      
      - name: etc-ssl-certs
        emptyDir:
          medium: "Memory"
      - name: etc-pki-ca-trust-extracted-pem
        emptyDir:
          medium: "Memory"
---
# Source: gitlab/charts/gitlab/charts/gitlab-shell/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitlab-gitlab-shell
  namespace: {{ .Release.Namespace }}
  labels:
    app: gitlab-shell
    chart: gitlab-shell-7.6.0
    release: gitlab
    heritage: Helm
    
  annotations:
    
spec:
  selector:
    matchLabels:
      app: gitlab-shell
      release: gitlab
      
  template:
    metadata:
      labels:
        app: gitlab-shell
        chart: gitlab-shell-7.6.0
        release: gitlab
        heritage: Helm
        
        
      annotations:
        checksum/config: 987c1456cf1d1370b54bd63b493b88f3b24de09e823cea438b6e95d3bdced41b
        checksum/config-sshd: 8894f2a6de5b3b98af0ee3ea441fca750d4f9c26d837ab72ae0eebfbccfc6b9e
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    spec:
      
      initContainers:
        
        - name: certificates
          image: docker.io/aboveos/gitlab-org-build-cng-certificates:v16.6.0    
          env:
          
          
          volumeMounts:
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs
            readOnly: false
          - name: etc-pki-ca-trust-extracted-pem
            mountPath: /etc/pki/ca-trust/extracted/pem
            readOnly: false
          resources:
            requests:
              cpu: 50m
              memory: 10Mi
            limits:
              cpu: 500m
              memory: 256Mi
        - name: configure
          command: ['sh', '/config/configure']
          image: "docker.io/aboveos/gitlab-org-build-cng-gitlab-base:v16.6.0"                    
          env:
          
          
          volumeMounts:
          
          - name: shell-config
            mountPath: /config
            readOnly: true
          - name: shell-init-secrets
            mountPath: /init-config
            readOnly: true
          - name: shell-secrets
            mountPath: /init-secrets
            readOnly: false
          resources:
            requests:
              cpu: 50m
              memory: 50Mi
            limits:
              cpu: 500m
              memory: 256Mi
      
      securityContext:
        runAsUser: 1000
        fsGroup: 1000      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app: gitlab-shell
                  release: gitlab
                  
      automountServiceAccountToken: false
      containers:
        
        - name: gitlab-shell
          image: "docker.io/aboveos/gitlab-org-build-cng-gitlab-shell:v14.30.0"                    
          securityContext:
            runAsUser: 1000
          ports:
            - containerPort: 2222
              name: ssh
          env:
            - name: GITALY_FEATURE_DEFAULT_ON
              value: "1"
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/etc/gitlab-shell'
            - name: CONFIG_DIRECTORY
              value: '/srv/gitlab-shell'
            - name: KEYS_DIRECTORY
              value: '/etc/gitlab-secrets/ssh'
            - name: SSH_DAEMON
              value: "openssh"
            
            
          volumeMounts:
            - name: shell-config
              mountPath: '/etc/gitlab-shell'
            - name: shell-secrets
              mountPath: '/etc/gitlab-secrets'
              readOnly: true
            - name: shell-config
              mountPath: '/etc/krb5.conf'
              subPath: krb5.conf
              readOnly: true
            - name: sshd-config
              mountPath: /etc/ssh/sshd_config
              subPath: sshd_config
              readOnly: true
            
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: true
            - name: etc-pki-ca-trust-extracted-pem
              mountPath: /etc/pki/ca-trust/extracted/pem
              readOnly: true
          livenessProbe:
            exec:
              command:
              - /scripts/healthcheck
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            tcpSocket:
              port: 2222
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 2
          resources:
            requests:
              cpu: 1m
              memory: 6Mi
            limits:
              cpu: 50m
              memory: 128Mi
      terminationGracePeriodSeconds: 30
      volumes:
      
      - name: shell-config
        configMap:
          name: gitlab-gitlab-shell
      - name: sshd-config
        configMap:
          name: gitlab-gitlab-shell-sshd
      - name: shell-init-secrets
        projected:
          defaultMode: 0440
          sources:
            - secret:
                name: "gitlab-gitlab-shell-host-keys"
            - secret:
                name: "gitlab-gitlab-shell-secret"
                items:
                  - key: "secret"
                    path: shell/.gitlab_shell_secret
      # Actual config dirs that will be used in the container
      - name: shell-secrets
        emptyDir:
          medium: "Memory"
      
      - name: etc-ssl-certs
        emptyDir:
          medium: "Memory"
      - name: etc-pki-ca-trust-extracted-pem
        emptyDir:
          medium: "Memory"
---
# Source: gitlab/charts/gitlab/charts/kas/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitlab-kas
  namespace: {{ .Release.Namespace }}
  labels:
    app: kas
    chart: kas-7.6.0
    release: gitlab
    heritage: Helm
    
  annotations:
    
spec:
  selector:
    matchLabels:
      app: kas
      release: gitlab
      
  template:
    metadata:
      labels:
        app: kas
        chart: kas-7.6.0
        release: gitlab
        heritage: Helm
        
        
      annotations:
        checksum/config: 39f533e4cd4bc539f2203201c4efb90b2de1e3a0a7944294206c126866439794
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        gitlab.com/prometheus_scrape: "true"
        gitlab.com/prometheus_port: "8151"
        gitlab.com/prometheus_path: /metrics
        prometheus.io/scrape: "true"
        prometheus.io/port: "8151"
        prometheus.io/path: /metrics
    spec:
      
      automountServiceAccountToken: false
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app: kas
                  release: gitlab
                  
      
      securityContext:
        runAsUser: 65532
        runAsGroup: 65532
        fsGroup: 65532      
      
      initContainers:
        - name: certificates
          image: docker.io/aboveos/gitlab-org-build-cng-certificates:v16.6.0    
          env:
          
          
          volumeMounts:
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs
            readOnly: false
          - name: etc-pki-ca-trust-extracted-pem
            mountPath: /etc/pki/ca-trust/extracted/pem
            readOnly: false
          resources:
            requests:
              cpu: 50m
              memory: 10Mi
            limits:
              cpu: 500m
              memory: 256Mi
      containers:
        
        - name: kas
          image: "docker.io/aboveos/gitlab-org-build-cng-gitlab-kas:v16.6.0"                    
          securityContext:
            runAsUser: 65532
          args:
            - "--configuration-file=/etc/kas/config.yaml"
          env:
            - name: OWN_PRIVATE_API_HOST
              value: gitlab-kas.{{ .Release.Namespace }}.svc
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: OWN_PRIVATE_API_URL
              value: "grpc://$(POD_IP):8155"
            
            
          ports:
            - containerPort: 8150
              name: kas
            - containerPort: 8154
              name: kas-k8s-api
            - containerPort: 8155
              name: kas-private-api
            - containerPort: 8151
              name: http-metrics
          readinessProbe:
            httpGet:
              path: /readiness
              port: 8151
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /liveness
              port: 8151
            initialDelaySeconds: 15
            periodSeconds: 20
          resources:
            requests:
              cpu: 100m
              memory: 100M
            limits:
              cpu: 500m
              memory: 256Mi
          volumeMounts:
            - name: init-etc-kas
              mountPath: /etc/kas
              readOnly: true
            
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: true
            - name: etc-pki-ca-trust-extracted-pem
              mountPath: /etc/pki/ca-trust/extracted/pem
              readOnly: true
      terminationGracePeriodSeconds: 300
      volumes:
      
      
      - name: etc-ssl-certs
        emptyDir:
          medium: "Memory"
      - name: etc-pki-ca-trust-extracted-pem
        emptyDir:
          medium: "Memory"
      - name: init-etc-kas
        projected:
          defaultMode: 0440
          sources:
            - configMap:
                name: gitlab-kas
            - secret:
                name: "gitlab-gitlab-kas-secret"
                items:
                  - key: "kas_shared_secret"
                    path: .gitlab_kas_secret
            - secret:
                name: "gitlab-kas-private-api"
                items:
                  - key: "kas_private_api_secret"
                    path: .gitlab_kas_private_api_secret
            
            
            
            
            - secret:
                name: "gitlab-redis-secret"
                items:
                  - key: "secret"
                    path: redis/redis-password
---
# Source: gitlab/charts/gitlab/charts/sidekiq/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitlab-sidekiq-all-in-1-v2
  namespace: {{ .Release.Namespace }}
  labels:
    app: sidekiq
    chart: sidekiq-7.6.0
    release: gitlab
    heritage: Helm
    
    queue-pod-name: all-in-1
  annotations:
    
spec:
  selector:
    matchLabels:
      app: sidekiq
      release: gitlab
      
      queue-pod-name: all-in-1
  template:
    metadata:
      labels:
        app: sidekiq
        chart: sidekiq-7.6.0
        release: gitlab
        heritage: Helm
        
        
        queue-pod-name: all-in-1
      annotations:
        checksum/configmap: d7c2b34def56ba8ed0b56be63ffef0d6014fa4b347abc040c778cc373e7ea72b
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        gitlab.com/prometheus_scrape: "true"
        gitlab.com/prometheus_port: "3807"
        gitlab.com/prometheus_path: /metrics
        prometheus.io/scrape: "true"
        prometheus.io/port: "3807"
        prometheus.io/path: /metrics
    spec:
      
      
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app: sidekiq
                  release: gitlab
                  
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 30
      initContainers:
        
        - name: certificates
          image: docker.io/aboveos/gitlab-org-build-cng-certificates:v16.6.0    
          env:
          
          
          volumeMounts:
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs
            readOnly: false
          - name: etc-pki-ca-trust-extracted-pem
            mountPath: /etc/pki/ca-trust/extracted/pem
            readOnly: false
          resources:
            requests:
              cpu: 50m
              memory: 1000Mi
            limits:
              cpu: 500m
              memory: 2000Mi
        - name: configure
          command: ['sh', '/config/configure']
          image: "docker.io/aboveos/gitlab-org-build-cng-gitlab-base:v16.6.0"                    
          env:
          
          
          volumeMounts:
          
          
          
          
          - name: sidekiq-config
            mountPath: /config
            readOnly: true
          - name: init-sidekiq-secrets
            mountPath: /init-config
            readOnly: true
          - name: sidekiq-secrets
            mountPath: /init-secrets
            readOnly: false
          resources:
            requests:
              cpu: 50m
        - name: dependencies
          image: "docker.io/aboveos/gitlab-org-build-cng-gitlab-sidekiq-ce:v16.6.0"                    
          args:
            - /scripts/wait-for-deps
          env:
            - name: GITALY_FEATURE_DEFAULT_ON
              value: "1"
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/var/opt/gitlab/templates'
            - name: CONFIG_DIRECTORY
              value: '/srv/gitlab/config'
            - name: SIDEKIQ_CONCURRENCY
              value: "20"
            - name: SIDEKIQ_TIMEOUT
              value: "25"
            - name: ENABLE_BOOTSNAP
              value: "1"
            
            
          volumeMounts:
          
          
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs/
            readOnly: true
          - name: etc-pki-ca-trust-extracted-pem
            mountPath: /etc/pki/ca-trust/extracted/pem
            readOnly: true
          - name: sidekiq-config
            mountPath: '/var/opt/gitlab/templates'
            readOnly: true
          - name: sidekiq-secrets
            mountPath: '/etc/gitlab'
            readOnly: true
          - name: sidekiq-secrets
            mountPath: /srv/gitlab/config/secrets.yml
            subPath: rails-secrets/secrets.yml
            readOnly: true
          resources:
            requests:
              cpu: 50m      
      containers:
        
        - name: sidekiq
          image: "docker.io/aboveos/gitlab-org-build-cng-gitlab-sidekiq-ce:v16.6.0"                    
          securityContext:
            runAsUser: 1000
          env:
            - name: prometheus_multiproc_dir
              value: /metrics
            - name: GITALY_FEATURE_DEFAULT_ON
              value: "1"
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/var/opt/gitlab/templates'
            - name: CONFIG_DIRECTORY
              value: '/srv/gitlab/config'
            - name: SIDEKIQ_QUEUE_SELECTOR
              value: ""
            - name: SIDEKIQ_CONCURRENCY
              value: "20"
            - name: SIDEKIQ_TIMEOUT
              value: "25"
            - name: SIDEKIQ_QUEUES
              value: 
            - name: SIDEKIQ_NEGATE_QUEUES
              value: 
            - name: SIDEKIQ_DAEMON_MEMORY_KILLER
              value: "1"
            - name: SIDEKIQ_MEMORY_KILLER_CHECK_INTERVAL
              value: "3"
            - name: SIDEKIQ_MEMORY_KILLER_MAX_RSS
              value: "2000000"
            - name: SIDEKIQ_MEMORY_KILLER_GRACE_TIME
              value: "900"
            - name: SIDEKIQ_MEMORY_KILLER_SHUTDOWN_WAIT
              value: "30"
            - name: ENABLE_BOOTSNAP
              value: "1"
            
            
            
          ports:
          - containerPort: 3807
            name: http-metrics
          volumeMounts:
          
          
          - name: sidekiq-metrics
            mountPath: '/metrics'
          - name: sidekiq-config
            mountPath: '/var/opt/gitlab/templates'
            readOnly: true
          - name: sidekiq-secrets
            mountPath: '/etc/gitlab'
            readOnly: true
          - name: sidekiq-secrets
            mountPath: /srv/gitlab/config/secrets.yml
            subPath: rails-secrets/secrets.yml
          - name: sidekiq-config
            mountPath: '/etc/krb5.conf'
            subPath: krb5.conf
          
          - name: sidekiq-config
            mountPath: '/srv/gitlab/config/initializers/smtp_settings.rb'
            subPath: smtp_settings.rb
          - name: sidekiq-config
            mountPath: '/srv/gitlab/INSTALLATION_TYPE'
            subPath: installation_type
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs/
            readOnly: true
          - name: etc-pki-ca-trust-extracted-pem
            mountPath: /etc/pki/ca-trust/extracted/pem
            readOnly: true
          livenessProbe:
            httpGet:
              path: /liveness
              port: 3808
            initialDelaySeconds: 20
            periodSeconds: 60
            timeoutSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /readiness
              port: 3808
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 3
          lifecycle:
            preStop:
              exec:
                command: ["/bin/bash", "-c", "pkill -f 'sidekiq'"]
          resources:
            requests:
              cpu: 900m
              memory: 2G
            limits:
              cpu: 1500m
              memory: 3G
      volumes:
      
      
      
      
      
      - name: sidekiq-metrics
        emptyDir:
          medium: "Memory"
      - name: sidekiq-config
        projected:
          sources:
            - configMap:
                name: gitlab-sidekiq
      - name: init-sidekiq-secrets
        projected:
          defaultMode: 0400
          sources:
          - secret:
              name: "gitlab-rails-secret"
              items:
                - key: secrets.yml
                  path: rails-secrets/secrets.yml
          - secret:
              name: "gitlab-gitaly-secret"
              items:
                - key: "token"
                  path: gitaly/gitaly_token
          
          
          
          
          - secret:
              name: "gitlab-redis-secret"
              items:
                - key: "secret"
                  path: redis/redis-password
          - secret:
              name: "gitlab-postgresql-password"
              items:
                - key: "postgresql-password"
                  path: postgres/psql-password-ci
          - secret:
              name: "gitlab-postgresql-password"
              items:
                - key: "postgresql-password"
                  path: postgres/psql-password-main
          - secret:
              name: "gitlab-registry-secret"
              items:
                - key: registry-auth.key
                  path: registry/gitlab-registry.key
          - secret:
              name: "gitlab-registry-notification"
              items:
                - key: "secret"
                  path: registry/notificationSecret
          
          # mount secret for kas
          - secret:
              name: "gitlab-gitlab-kas-secret"
              items:
                - key: "kas_shared_secret"
                  path: kas/.gitlab_kas_secret
          # mount secret for suggested reviewers
          - secret:
              name: "gitlab-gitlab-suggested-reviewers"
              items:
                - key: "suggested_reviewers_secret"
                  path: suggested_reviewers/.gitlab_suggested_reviewers_secret
          # mount secret for zoekt
          - secret:
              name: gitlab-zoekt-basicauth
              optional: true
              items:
                - key: gitlab_username
                  path: zoekt/.gitlab_zoekt_username
                - key: gitlab_password
                  path: zoekt/.gitlab_zoekt_password
          # mount secret for minio
          - secret:
              name: "gitlab-minio-secret"
              items:
                - key: accesskey
                  path: minio/accesskey
                - key: secretkey
                  path: minio/secretkey
          # mount secret for object_store
          # mount secret for lfs
          # mount secret for artifacts
          # mount secret for uploads
          # mount secret for packages
          # mount secret for external_diffs
          # mount secret for terraform_state
          # mount secret for ci_secure_files
          # mount secret for dependency_proxy
          # mount secret for pages
          # mount secrets for LDAP
          
          
          # mount secrets for microsoftGraphMailer
          # mount secrets for SMTP
      - name: sidekiq-secrets
        emptyDir:
          medium: "Memory"
      
      - name: etc-ssl-certs
        emptyDir:
          medium: "Memory"
      - name: etc-pki-ca-trust-extracted-pem
        emptyDir:
          medium: "Memory"
---
# Source: gitlab/charts/gitlab/charts/toolbox/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitlab-toolbox
  namespace: {{ .Release.Namespace }}
  labels:
    app: toolbox
    chart: toolbox-7.6.0
    release: gitlab
    heritage: Helm
    
  annotations:
    
spec:
  replicas: 1
  selector:
    matchLabels:
      app: toolbox
      release: gitlab
      
  strategy: 
    type: Recreate
  template:
    metadata:
      labels:
        app: toolbox
        chart: toolbox-7.6.0
        release: gitlab
        heritage: Helm
        
        
      annotations:
        checksum/config: 437f7a923095919ed57f4d80518dffe1c9dc572d0df404cae01929a717c47a31
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    spec:
      
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      automountServiceAccountToken: false
      
      initContainers:
        
        - name: certificates
          image: docker.io/aboveos/gitlab-org-build-cng-certificates:v16.6.0    
          env:
          
          
          volumeMounts:
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs
            readOnly: false
          - name: etc-pki-ca-trust-extracted-pem
            mountPath: /etc/pki/ca-trust/extracted/pem
            readOnly: false
          resources:
            requests:
              cpu: 50m
              memory: 50Mi
            limits:
              cpu: 500m
              memory: 256Mi
        - name: configure
          command: ['sh', '/config/configure']
          image: "docker.io/aboveos/gitlab-org-build-cng-gitlab-base:v16.6.0"                    
          env:
          
          
          volumeMounts:
          
          
          
          - name: toolbox-config
            mountPath: /config
            readOnly: true
          - name: init-toolbox-secrets
            mountPath: /init-config
            readOnly: true
          - name: toolbox-secrets
            mountPath: /init-secrets
            readOnly: false
          resources:
            requests:
              cpu: 50m
              memory: 10Mi
            limits:
              cpu: 500m
              memory: 256Mi   
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app: gitaly
                  release: gitlab
      containers:
        
        - name: toolbox
          args:
            - /bin/bash
            - -c
            - cp -v -r -L /etc/gitlab/.s3cfg $HOME/.s3cfg && while sleep 3600; do :; done # alpine sleep has no infinity
          image: "docker.io/aboveos/gitlab-org-build-cng-gitlab-toolbox-ce:v16.6.0"                    
          securityContext:
            runAsUser: 1000
          env:
            - name: ARTIFACTS_BUCKET_NAME
              value: gitlab-artifacts
            - name: REGISTRY_BUCKET_NAME
              value: registry
            - name: LFS_BUCKET_NAME
              value: git-lfs
            - name: UPLOADS_BUCKET_NAME
              value: gitlab-uploads
            - name: PACKAGES_BUCKET_NAME
              value: gitlab-packages
            - name: EXTERNAL_DIFFS_BUCKET_NAME
              value: gitlab-mr-diffs
            - name: TERRAFORM_STATE_BUCKET_NAME
              value: gitlab-terraform-state
            - name: CI_SECURE_FILES_BUCKET_NAME
              value: gitlab-ci-secure-files
            - name: BACKUP_BUCKET_NAME
              value: gitlab-backups
            - name: BACKUP_BACKEND
              value: s3
            - name: TMP_BUCKET_NAME
              value: tmp
            - name: PAGES_BUCKET_NAME
              value: gitlab-pages
            - name: GITALY_FEATURE_DEFAULT_ON
              value: "1"
            - name: ENABLE_BOOTSNAP
              value: "1"
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/var/opt/gitlab/templates'
            - name: CONFIG_DIRECTORY
              value: '/srv/gitlab/config'
            
            
          volumeMounts:
            
            - name: toolbox-config
              mountPath: '/var/opt/gitlab/templates'
            - name: toolbox-config
              mountPath: '/etc/krb5.conf'
              subPath: krb5.conf
            
            - name: toolbox-config
              mountPath: '/srv/gitlab/config/initializers/smtp_settings.rb'
              subPath: smtp_settings.rb
            - name: toolbox-secrets
              mountPath: '/etc/gitlab'
              readOnly: true
            - name: toolbox-secrets
              mountPath: /srv/gitlab/config/secrets.yml
              subPath: rails-secrets/secrets.yml
            - name: toolbox-tmp
              mountPath: '/srv/gitlab/tmp'
              readOnly: false
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: true
            - name: etc-pki-ca-trust-extracted-pem
              mountPath: /etc/pki/ca-trust/extracted/pem
              readOnly: true
          resources:
            requests:
              cpu: 50m
              memory: 350M
            limits:
              cpu: 200m
              memory: 700M
      volumes:
      
      
      
      
      - name: toolbox-config
        projected:
          sources:
            - configMap:
                name: gitlab-toolbox
      - name: toolbox-tmp
        emptyDir: {}
      - name: init-toolbox-secrets
        projected:
          defaultMode: 0400
          sources:
          - secret:
              name: "gitlab-rails-secret"
              items:
                - key: secrets.yml
                  path: rails-secrets/secrets.yml
          - secret:
              name: "gitlab-gitlab-shell-secret"
              items:
                - key: "secret"
                  path: shell/.gitlab_shell_secret
          - secret:
              name: "gitlab-gitaly-secret"
              items:
                - key: "token"
                  path: gitaly/gitaly_token
          
          
          
          
          - secret:
              name: "gitlab-redis-secret"
              items:
                - key: "secret"
                  path: redis/redis-password
          - secret:
              name: "gitlab-postgresql-password"
              items:
                - key: "postgresql-password"
                  path: postgres/psql-password-ci
          - secret:
              name: "gitlab-postgresql-password"
              items:
                - key: "postgresql-password"
                  path: postgres/psql-password-main
          - secret:
              name: "gitlab-registry-secret"
              items:
                - key: registry-auth.key
                  path: registry/gitlab-registry.key
          - secret:
              name: "gitlab-registry-notification"
              items:
                - key: "secret"
                  path: registry/notificationSecret
          
          # mount secret for kas
          - secret:
              name: "gitlab-gitlab-kas-secret"
              items:
                - key: "kas_shared_secret"
                  path: kas/.gitlab_kas_secret
          # mount secret for suggested reviewers
          - secret:
              name: "gitlab-gitlab-suggested-reviewers"
              items:
                - key: "suggested_reviewers_secret"
                  path: suggested_reviewers/.gitlab_suggested_reviewers_secret
          # mount secret for zoekt
          - secret:
              name: gitlab-zoekt-basicauth
              optional: true
              items:
                - key: gitlab_username
                  path: zoekt/.gitlab_zoekt_username
                - key: gitlab_password
                  path: zoekt/.gitlab_zoekt_password
          # mount secret for minio
          - secret:
              name: "gitlab-minio-secret"
              items:
                - key: accesskey
                  path: minio/accesskey
                - key: secretkey
                  path: minio/secretkey
          # mount secret for object_store
          # mount secret for artifacts
          # mount secret for lfs
          # mount secret for uploads
          # mount secret for packages
          # mount secret for external_diffs
          # mount secret for terraform_state
          # mount secret for ci_secure_files
          # mount secret for dependency_proxy
          # mount secret for pages
          # mount secrets for LDAP
          
          
          # mount secrets for microsoftGraphMailer
          # mount secrets for SMTP
      - name: toolbox-secrets
        emptyDir:
          medium: "Memory"
      
      - name: etc-ssl-certs
        emptyDir:
          medium: "Memory"
      - name: etc-pki-ca-trust-extracted-pem
        emptyDir:
          medium: "Memory"
---
# Source: gitlab/charts/gitlab/charts/webservice/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitlab-webservice-default
  namespace: {{ .Release.Namespace }}
  labels:
    app: webservice
    chart: webservice-7.6.0
    release: gitlab
    heritage: Helm
    gitlab.com/webservice-name: default
    
  annotations:
    
spec:
  # Don't provide replicas when HPA are present
  # replicas: 2
  selector:
    matchLabels:
      app: webservice
      release: gitlab
      
      
      gitlab.com/webservice-name: default
  template:
    metadata:
      labels:
        app: webservice
        chart: webservice-7.6.0
        release: gitlab
        heritage: Helm
        gitlab.com/webservice-name: default
        
        
        
      annotations:
        checksum/config: af7306f47b321ff31b08a4920bf7795a837f8b7d15a56102eb57596344685c2e
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        gitlab.com/prometheus_scrape: "true"
        gitlab.com/prometheus_port: "8083"
        gitlab.com/prometheus_path: /metrics
        prometheus.io/scrape: "true"
        prometheus.io/port: "8083"
        prometheus.io/path: /metrics
    spec:
      
      
      
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app: webservice
                  release: gitlab
                  
                  gitlab.com/webservice-name: default
      automountServiceAccountToken: false
      initContainers:
        
        - name: certificates
          image: docker.io/aboveos/gitlab-org-build-cng-certificates:v16.6.0    
          env:
          
          
          volumeMounts:
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs
            readOnly: false
          - name: etc-pki-ca-trust-extracted-pem
            mountPath: /etc/pki/ca-trust/extracted/pem
            readOnly: false
          resources:
            requests:
              cpu: 50m
        - name: configure
          command: ['sh']
          args: [ '-c', 'sh -x /config-webservice/configure ; sh -x /config-workhorse/configure ; mkdir -p -m 3770 /tmp/gitlab']
          image: "docker.io/aboveos/gitlab-org-build-cng-gitlab-base:v16.6.0"                    
          env:
            
            
          volumeMounts:
          
          
          
          - name: webservice-config
            mountPath: /config-webservice
            readOnly: true
          - name: workhorse-config
            mountPath: /config-workhorse
            readOnly: true
          - name: init-webservice-secrets
            mountPath: /init-config
            readOnly: true
          - name: webservice-secrets
            mountPath: /init-secrets
            readOnly: false
          - name: workhorse-secrets
            mountPath: /init-secrets-workhorse
            readOnly: false
          - name: shared-tmp
            mountPath: /tmp
            readOnly: false
          resources:
            requests:
              cpu: 50m
        - name: dependencies
          image: docker.io/aboveos/gitlab-org-build-cng-gitlab-webservice-ce:v16.6.0                    
          args:
            - /scripts/wait-for-deps
          env:
            - name: GITALY_FEATURE_DEFAULT_ON
              value: "1"
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/var/opt/gitlab/templates'
            - name: CONFIG_DIRECTORY
              value: '/srv/gitlab/config'
            - name: WORKHORSE_ARCHIVE_CACHE_DISABLED
              value: "1"
            - name: ENABLE_BOOTSNAP
              value: "1"
            
            
          volumeMounts:
            
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: true
            - name: etc-pki-ca-trust-extracted-pem
              mountPath: /etc/pki/ca-trust/extracted/pem
              readOnly: true
            - name: webservice-config
              mountPath: '/var/opt/gitlab/templates'
            - name: webservice-secrets
              mountPath: '/etc/gitlab'
              readOnly: true
            - name: webservice-secrets
              mountPath: /srv/gitlab/config/secrets.yml
              subPath: rails-secrets/secrets.yml
              readOnly: true
          resources:
            requests:
              cpu: 50m      
      containers:
        
        - name: webservice
          image: docker.io/aboveos/gitlab-org-build-cng-gitlab-webservice-ce:v16.6.0                    
          securityContext:
            runAsUser: 1000
          ports:
            - containerPort: 8080
              name: http-webservice
            - containerPort: 8083
              name: http-metrics-ws
          env:
            - name: GITLAB_WEBSERVER
              value: puma
            - name: TMPDIR
              value: "/tmp/gitlab"
            - name: GITALY_FEATURE_DEFAULT_ON
              value: "1"
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/var/opt/gitlab/templates'
            - name: CONFIG_DIRECTORY
              value: '/srv/gitlab/config'
            - name: prometheus_multiproc_dir
              value: /metrics
            - name: ENABLE_BOOTSNAP
              value: "1"
            - name: WORKER_PROCESSES
              value: "2"
            - name: WORKER_TIMEOUT
              value: "60"
            - name: INTERNAL_PORT
              value: "8080"
            - name: PUMA_THREADS_MIN
              value: "4"
            - name: PUMA_THREADS_MAX
              value: "4"
            - name: PUMA_WORKER_MAX_MEMORY
              value: ""
            - name: DISABLE_PUMA_WORKER_KILLER
              value: "true"
            - name: SHUTDOWN_BLACKOUT_SECONDS
              value: "10"
            
            - name: WORKHORSE_ARCHIVE_CACHE_DISABLED
              value: "true"
            
            
          volumeMounts:
            - name: webservice-metrics
              mountPath: '/metrics'
            - name: webservice-config
              mountPath: '/var/opt/gitlab/templates'
            - name: webservice-secrets
              mountPath: '/etc/gitlab'
              readOnly: true
            - name: webservice-secrets
              mountPath: /srv/gitlab/config/secrets.yml
              subPath: rails-secrets/secrets.yml
            - name: webservice-config
              mountPath: '/etc/krb5.conf'
              subPath: krb5.conf
            
            - name: webservice-config
              mountPath: '/srv/gitlab/config/initializers/smtp_settings.rb'
              subPath: smtp_settings.rb
            - name: webservice-config
              mountPath: '/srv/gitlab/INSTALLATION_TYPE'
              subPath: installation_type
            - name: shared-upload-directory
              mountPath: /srv/gitlab/public/uploads/tmp
              readOnly: false
            - name: shared-tmp
              mountPath: '/tmp'
              readOnly: false
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: true
            - name: etc-pki-ca-trust-extracted-pem
              mountPath: /etc/pki/ca-trust/extracted/pem
              readOnly: true
            
          livenessProbe:
            httpGet:
              path: /-/liveness
              port: 8080
            initialDelaySeconds: 20
            periodSeconds: 60
            timeoutSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /-/readiness
              port: 8080
            initialDelaySeconds: 0
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 2
          lifecycle:
            preStop:
              exec:
                command: ["/bin/bash", "-c", "pkill -SIGINT -o ruby"]
          resources:
            requests:
              cpu: 300m
              memory: 2.5G
            limits:
              cpu: 1000m
              memory: 5G
        - name: gitlab-workhorse
          image: "docker.io/aboveos/gitlab-org-build-cng-gitlab-workhorse-ce:v16.6.0"          
          ports:
            - containerPort: 8181
              name: http-workhorse
          env:
            - name: TMPDIR
              value: "/tmp/gitlab"
            - name: GITLAB_WORKHORSE_AUTH_BACKEND
              value: "http://localhost:8080"
            - name: GITLAB_WORKHORSE_EXTRA_ARGS
              value: ""
            - name: GITLAB_WORKHORSE_LISTEN_PORT
              value: "8181"
            - name: GITLAB_WORKHORSE_LOG_FORMAT
              value: "json"
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/var/opt/gitlab/templates'
            - name: CONFIG_DIRECTORY
              value: '/srv/gitlab/config'
            - name: SHUTDOWN_BLACKOUT_SECONDS
              value: "10"
            
            
            
          volumeMounts:
            - name: workhorse-config
              mountPath: '/var/opt/gitlab/templates'
            - name: workhorse-secrets
              mountPath: '/etc/gitlab'
              readOnly: true
            - name: shared-upload-directory
              mountPath: /srv/gitlab/public/uploads/tmp
              readOnly: false
            - name: shared-tmp
              mountPath: '/tmp'
              readOnly: false
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: true
            - name: etc-pki-ca-trust-extracted-pem
              mountPath: /etc/pki/ca-trust/extracted/pem
              readOnly: true
            
            
          lifecycle:
            preStop:
              exec:
                command:
                - /bin/bash
                - -c
                - sleep $SHUTDOWN_BLACKOUT_SECONDS
          livenessProbe:
            exec:
              command:
              - /scripts/healthcheck
            initialDelaySeconds: 20
            periodSeconds: 60
            timeoutSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
              - /scripts/healthcheck
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 3
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
            limits:
              cpu: 500m
              memory: 256Mi
      volumes:
      
      
      
      
      - name: shared-tmp
        emptyDir: {}
      - name: webservice-metrics
        emptyDir:
          medium: "Memory"
      - name: webservice-config
        configMap:
          name: gitlab-webservice
      - name: workhorse-config
        configMap:
            name: gitlab-workhorse-default
      - name: init-webservice-secrets
        projected:
          defaultMode: 0400
          sources:
          - secret:
              name: "gitlab-rails-secret"
              items:
                - key: secrets.yml
                  path: rails-secrets/secrets.yml
          - secret:
              name: "gitlab-gitlab-shell-secret"
              items:
                - key: "secret"
                  path: shell/.gitlab_shell_secret
          # mount secrets for microsoftGraphMailer
          # mount secrets for incomingEmail
          # mount secrets for serviceDeskEmail
          - secret:
              name: "gitlab-gitaly-secret"
              items:
                - key: "token"
                  path: gitaly/gitaly_token
          
          
          
          
          - secret:
              name: "gitlab-redis-secret"
              items:
                - key: "secret"
                  path: redis/redis-password
          - secret:
              name: "gitlab-postgresql-password"
              items:
                - key: "postgresql-password"
                  path: postgres/psql-password-ci
          - secret:
              name: "gitlab-postgresql-password"
              items:
                - key: "postgresql-password"
                  path: postgres/psql-password-main
          - secret:
              name: "gitlab-registry-secret"
              items:
                - key: registry-auth.key
                  path: registry/gitlab-registry.key
          - secret:
              name: "gitlab-registry-notification"
              items:
                - key: "secret"
                  path: registry/notificationSecret
          - secret:
              name: "gitlab-gitlab-workhorse-secret"
              items:
                - key: "shared_secret"
                  path: gitlab-workhorse/secret
          
          # mount secret for kas
          - secret:
              name: "gitlab-gitlab-kas-secret"
              items:
                - key: "kas_shared_secret"
                  path: kas/.gitlab_kas_secret
          # mount secret for suggested reviewers
          - secret:
              name: "gitlab-gitlab-suggested-reviewers"
              items:
                - key: "suggested_reviewers_secret"
                  path: suggested_reviewers/.gitlab_suggested_reviewers_secret
          # mount secret for zoekt
          - secret:
              name: gitlab-zoekt-basicauth
              optional: true
              items:
                - key: gitlab_username
                  path: zoekt/.gitlab_zoekt_username
                - key: gitlab_password
                  path: zoekt/.gitlab_zoekt_password
          # mount secret for minio
          - secret:
              name: "gitlab-minio-secret"
              items:
                - key: accesskey
                  path: minio/accesskey
                - key: secretkey
                  path: minio/secretkey
          # mount secret for object_store
          # mount secret for artifacts
          # mount secret for lfs
          # mount secret for uploads
          # mount secret for packages
          # mount secret for external_diffs
          # mount secret for terraform_state
          # mount secret for ci_secure_files
          # mount secret for dependency_proxy
          # mount secret for pages
          # mount secrets for LDAP
          
          
          # mount secrets for SMTP
      - name: webservice-secrets
        emptyDir:
          medium: "Memory"
      - name: workhorse-secrets
        emptyDir:
          medium: "Memory"
      - name: shared-upload-directory
        emptyDir: {}
      
      - name: etc-ssl-certs
        emptyDir:
          medium: "Memory"
      - name: etc-pki-ca-trust-extracted-pem
        emptyDir:
          medium: "Memory"
---
# Source: gitlab/charts/minio/templates/minio_deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitlab-minio
  namespace: {{ .Release.Namespace }}
  labels:
    app: minio
    chart: minio-0.4.3
    release: gitlab
    heritage: Helm
    
  annotations:
    
spec:
  selector:
    matchLabels:
      app: minio
      release: "gitlab"
      component: app
  strategy: 
    type: Recreate
  template:
    metadata:
      name: gitlab-minio
      labels:
        component: app
        app: minio
        chart: minio-0.4.3
        release: gitlab
        heritage: Helm
        
        
      annotations:
    spec:
      automountServiceAccountToken: false
      
      
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      
      volumes:
        - name: podinfo
          downwardAPI:
            items:
              - path: "labels"
                fieldRef:
                  fieldPath: metadata.labels
        - name: export
          persistentVolumeClaim:
            claimName: gitlab-minio
        - name: minio-configuration
          projected:
            sources:
            - configMap:
                name: gitlab-minio-config-cm
            - secret:
                name: "gitlab-minio-secret"
        - name: minio-server-config
          emptyDir:
            medium: "Memory"
      initContainers:
        - name: configure
          image: "docker.io/aboveos/gitlab-org-build-cng-gitlab-base:v16.6.0"          
          command: ["sh", "/config/configure"]
          volumeMounts:
            - name: minio-configuration
              mountPath: /config
            - name: minio-server-config
              mountPath: /minio
          resources:
            requests:
              cpu: 50m      
      containers:
        - name: minio
          image: docker.io/aboveos/minio-minio:RELEASE.2017-12-28T01-21-00Z         
          args: ["-C", "/tmp/.minio", "--quiet", "server", "/export"]
          volumeMounts:
            - name: export
              mountPath: /export
            - name: minio-server-config
              # this path altered from upstream, for use with `securityContext`/UID 1000
              mountPath: "/tmp/.minio"
            - name: podinfo
              mountPath: /podinfo
              readOnly: false
          ports:
            - name: service
              containerPort: 9000
          livenessProbe:
            tcpSocket:
              port: 9000
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 256Mi
---
# Source: gitlab/charts/nginx-ingress/templates/controller-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-4.0.6
    release: gitlab
    heritage: Helm
    
    component: "controller"
    helm.sh/chart: nginx-ingress-4.0.6
    app.kubernetes.io/version: "1.0.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: gitlabpure
  namespace: {{ .Release.Namespace }}
  annotations:
spec:
  selector:
    matchLabels:
      app: nginx-ingress
      release: gitlab
      component: "controller"
  replicas: 2
  revisionHistoryLimit: 10
  minReadySeconds: 0
  template:
    metadata:
      labels:
        app: nginx-ingress
        release: gitlab
        component: "controller"
        
    spec:
      dnsPolicy: ClusterFirst
      containers:
        - name: controller
          image: "docker.io/aboveos/gitlab-org-cloud-native-mirror-images-ingress-nginx-controller:v1.3.1"
          imagePullPolicy: IfNotPresent
          lifecycle: 
            preStop:
              exec:
                command:
                - /wait-shutdown
          args:
            - /nginx-ingress-controller
            - --publish-service=$(POD_NAMESPACE)/gitlab-nginx-ingress-controller
            - --election-id=ingress-controller-leader
            - --controller-class=k8s.io/ingress-nginx
            - --ingress-class=gitlab-nginx
            - --configmap=$(POD_NAMESPACE)/gitlab-nginx-ingress-controller
            - --tcp-services-configmap={{ .Release.Namespace }}/gitlab-nginx-ingress-tcp
            - --watch-namespace=$(POD_NAMESPACE)
          securityContext:
            capabilities:
                drop:
                - ALL
                add:
                - NET_BIND_SERVICE
            runAsUser: 101
            allowPrivilegeEscalation: true
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: LD_PRELOAD
              value: /usr/local/lib/libmimalloc.so
          livenessProbe: 
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe: 
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
            - name: https
              containerPort: 443
              protocol: TCP
            - name: metrics
              containerPort: 10254
              protocol: TCP
            - name: gitlab-shell
              containerPort: 22
              protocol: TCP
          resources: 
            requests:
              cpu: 100m
              memory: 100Mi
            limits:
              cpu: 500m
              memory: 256Mi
      serviceAccountName: gitlab-nginx-ingress
      terminationGracePeriodSeconds: 300
---
# Source: gitlab/charts/prometheus/templates/server/deploy.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    component: "server"
    app: prometheus
    release: gitlab
    chart: prometheus-15.18.0
    heritage: Helm
  name: gitlab-prometheus-server
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      component: "server"
      app: prometheus
      release: gitlab
  replicas: 1
  strategy:
    type: Recreate
    rollingUpdate: null
  template:
    metadata:
      labels:
        component: "server"
        app: prometheus
        release: gitlab
        chart: prometheus-15.18.0
        heritage: Helm
    spec:
      enableServiceLinks: true
      serviceAccountName: gitlab-prometheus-server
      containers:
        - name: prometheus-server-configmap-reload
          image: "docker.io/aboveos/jimmidyson-configmap-reload:v0.5.0"
          imagePullPolicy: "IfNotPresent"
          args:
            - --volume-dir=/etc/config
            - --webhook-url=http://127.0.0.1:9090/-/reload
          resources:
            requests:
              cpu: 50m
              memory: 50Mi
            limits:
              cpu: 500m
              memory: 256Mi
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
              readOnly: true

        - name: prometheus-server
          image: "docker.io/aboveos/prometheus-prometheus:v2.38.0"
          imagePullPolicy: "IfNotPresent"
          args:
            - --storage.tsdb.retention.time=15d
            - --config.file=/etc/config/prometheus.yml
            - --storage.tsdb.path=/data
            - --web.console.libraries=/etc/prometheus/console_libraries
            - --web.console.templates=/etc/prometheus/consoles
            - --web.enable-lifecycle
          ports:
            - containerPort: 9090
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 4
            failureThreshold: 3
            successThreshold: 1
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 10
            failureThreshold: 3
            successThreshold: 1
          resources:
            requests:
              cpu: 50m
              memory: 50Mi
            limits:
              cpu: 500m
              memory: 256Mi
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
            - name: storage-volume
              mountPath: /data
              subPath: ""
      dnsPolicy: ClusterFirst
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      terminationGracePeriodSeconds: 300
      volumes:
        - name: config-volume
          configMap:
            name: gitlab-prometheus-server
        - name: storage-volume
          persistentVolumeClaim:
            claimName: gitlab-prometheus-server
---
# Source: gitlab/charts/registry/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: gitlab-registry
  namespace: {{ .Release.Namespace }}
  labels:
    app: registry
    chart: registry-0.7.0
    release: gitlab
    heritage: Helm
    
  annotations:
    
spec:
  # Don't provide replicas when HPA are present
  # replicas: 2
  selector:
    matchLabels:
      app: registry
      release: gitlab
  template:
    metadata:
      labels:
        app: registry
        chart: registry-0.7.0
        release: gitlab
        heritage: Helm
        
        
      annotations:
        checksum/configmap: f284ddf5d7b9cb2210fb787c831269d2a34ae3ca4c60415522696eb70569c6de
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    spec:
      
      
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app: registry
                  release: gitlab
      automountServiceAccountToken: false
      
      initContainers:
        - name: certificates
          image: docker.io/aboveos/gitlab-org-build-cng-certificates:v16.6.0    
          env:
          
          
          volumeMounts:
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs
            readOnly: false
          - name: etc-pki-ca-trust-extracted-pem
            mountPath: /etc/pki/ca-trust/extracted/pem
            readOnly: false
          resources:
            requests:
              cpu: 50m
        - name: configure
          image: "docker.io/aboveos/gitlab-org-build-cng-gitlab-base:v16.6.0"                    
          command: ["sh", "/config/configure"]
          volumeMounts:
            - name: registry-secrets
              mountPath: /config
            - name: registry-server-config
              mountPath: /registry
          resources:
            requests:
              cpu: 50m
          env:
          
                
      containers:
        - name: registry
          image: "docker.io/aboveos/gitlab-org-build-cng-gitlab-container-registry:v3.86.1-gitlab"                    
          securityContext:
            runAsUser: 1000
          env:
          
          
          volumeMounts:
          - name: registry-server-config
            mountPath: /etc/docker/registry/
            readOnly: true
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs/
            readOnly: true
          - name: etc-pki-ca-trust-extracted-pem
            mountPath: /etc/pki/ca-trust/extracted/pem
            readOnly: true
          ports:
            - containerPort: 5000
              name: http
            - containerPort: 5001
              name: debug
          livenessProbe:
            httpGet:
              path: /debug/health
              port: debug
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /debug/health
              port: debug
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          resources:
            requests:
              cpu: 50m
              memory: 32Mi
          lifecycle:
            preStop:
              exec:
                command: ["/bin/bash", "-c", "sleep 5"]
          resources:
            requests:
              cpu: 10m
              memory: 20Mi
            limits:
              cpu: 500m
              memory: 256Mi
      terminationGracePeriodSeconds: 30
      volumes:
      - name: registry-server-config
        emptyDir:
          medium: "Memory"
      - name: registry-secrets
        projected:
          sources:
          - configMap:
              name: gitlab-registry
          - secret:
              name: "gitlab-registry-secret"
              items:
                  - key: registry-auth.crt
                    path: certificate.crt
          - secret:
              name: "gitlab-registry-httpsecret"
              items:
                - key: "secret"
                  path: httpSecret
          - secret:
              name: "gitlab-minio-secret"
          
          
      
      - name: etc-ssl-certs
        emptyDir:
          medium: "Memory"
      - name: etc-pki-ca-trust-extracted-pem
        emptyDir:
          medium: "Memory"
---
# Source: gitlab/charts/gitlab/charts/gitlab-shell/templates/hpa.yaml
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: gitlab-gitlab-shell
  namespace: {{ .Release.Namespace }}
  labels:
    app: gitlab-shell
    chart: gitlab-shell-7.6.0
    release: gitlab
    heritage: Helm
    
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: gitlab-gitlab-shell
  minReplicas: 2
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: AverageValue
          averageValue: 100m
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
---
# Source: gitlab/charts/gitlab/charts/kas/templates/hpa.yaml
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: gitlab-kas
  namespace: {{ .Release.Namespace }}
  labels:
    app: kas
    chart: kas-7.6.0
    release: gitlab
    heritage: Helm
    
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: gitlab-kas
  minReplicas: 2
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: AverageValue
          averageValue: 100m
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
---
# Source: gitlab/charts/gitlab/charts/sidekiq/templates/hpa.yaml
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: gitlab-sidekiq-all-in-1-v2
  namespace: {{ .Release.Namespace }}
  labels:
    app: sidekiq
    chart: sidekiq-7.6.0
    release: gitlab
    heritage: Helm
    
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: gitlab-sidekiq-all-in-1-v2
  minReplicas: 1
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: AverageValue
          averageValue: 350m
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
---
# Source: gitlab/charts/gitlab/charts/webservice/templates/hpa.yaml
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: gitlab-webservice-default
  namespace: {{ .Release.Namespace }}
  labels:
    app: webservice
    chart: webservice-7.6.0
    release: gitlab
    heritage: Helm
    gitlab.com/webservice-name: default
    
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: gitlab-webservice-default
  minReplicas: 2
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: AverageValue
          averageValue: 1
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
---
# Source: gitlab/charts/registry/templates/hpa.yaml
apiVersion: autoscaling/v2beta2
kind: HorizontalPodAutoscaler
metadata:
  name: gitlab-registry
  namespace: {{ .Release.Namespace }}
  labels:
    app: registry
    chart: registry-0.7.0
    release: gitlab
    heritage: Helm
    
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: gitlab-registry
  minReplicas: 2
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 75
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
---
# Source: gitlab/charts/gitlab/charts/gitaly/templates/statefulset.yml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: gitlab-gitaly
  namespace: {{ .Release.Namespace }}
  labels:
    app: gitaly
    chart: gitaly-7.6.0
    release: gitlab
    heritage: Helm
    
spec:
  selector:
    matchLabels:
      app: gitaly
      release: gitlab
      
  serviceName: gitlab-gitaly
  replicas: 1
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        app: gitaly
        chart: gitaly-7.6.0
        release: gitlab
        heritage: Helm
        
        
      annotations:
        checksum/config: 38099517701562eb6d70a15fa2f4e0dfe829092cb8c8a69dd7c507b95958f5fa
        gitlab.com/prometheus_scrape: "true"
        gitlab.com/prometheus_port: "9236"
        gitlab.com/prometheus_path: /metrics
        prometheus.io/scrape: "true"
        prometheus.io/port: "9236"
        prometheus.io/path: /metrics
    spec:
      
      terminationGracePeriodSeconds: 30
      initContainers:
        
        - name: certificates
          image: docker.io/aboveos/gitlab-org-build-cng-certificates:v16.6.0    
          env:
          
          
          volumeMounts:
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs
            readOnly: false
          - name: etc-pki-ca-trust-extracted-pem
            mountPath: /etc/pki/ca-trust/extracted/pem
            readOnly: false
          resources:
            requests:
              cpu: 50m
        - name: configure
          command: ['sh', '/config/configure']
          image: "docker.io/aboveos/gitlab-org-build-cng-gitlab-base:v16.6.0"                    
          env:
          
          
          volumeMounts:
          
          - name: gitaly-config
            mountPath: /config
            readOnly: true
          - name: init-gitaly-secrets
            mountPath: /init-config
            readOnly: true
          - name: gitaly-secrets
            mountPath: /init-secrets
            readOnly: false
          resources:
            requests:
              cpu: 50m
      
      securityContext:
        runAsUser: 1000
        fsGroup: 1000      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app: gitaly
                  release: gitlab
                  
      automountServiceAccountToken: false
      containers:
        
        - name: gitaly
          image: "docker.io/aboveos/gitlab-org-build-cng-gitaly:v16.6.0"                    
          securityContext:
            runAsUser: 1000
          ports:
            - containerPort: 8075
              name: grpc-gitaly
            - containerPort: 9236
              name: http-metrics
          env:
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/etc/gitaly/templates'
            - name: CONFIG_DIRECTORY
              value: '/etc/gitaly'
            - name: GITALY_CONFIG_FILE
              value: '/etc/gitaly/config.toml'
            - name: SSL_CERT_DIR
              value: '/etc/ssl/certs'
            
            
            
          volumeMounts:
            
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: true
            - name: etc-pki-ca-trust-extracted-pem
              mountPath: /etc/pki/ca-trust/extracted/pem
              readOnly: true
            - name: gitaly-config
              mountPath: '/etc/gitaly/templates'
            - name: gitaly-secrets
              mountPath: '/etc/gitlab-secrets'
              readOnly: true
            - name: repo-data
              mountPath: '/home/git/repositories'
          livenessProbe:
            exec:
              command:
              - /scripts/healthcheck
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
              - /scripts/healthcheck
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 3
            successThreshold: 1
            failureThreshold: 3
          resources:
            requests:
              cpu: 100m
              memory: 200Mi
            limits:
              cpu: 500m
              memory: 256Mi
      volumes:
      
      - name: gitaly-config
        configMap:
          name: gitlab-gitaly
      - name: gitaly-secrets
        emptyDir:
          medium: "Memory"
      - name: init-gitaly-secrets
        projected:
          defaultMode: 0440
          sources:
          - secret:
              name: "gitlab-gitaly-secret"
              items:
                - key: "token"
                  path: "gitaly_token"
          - secret:
              name: "gitlab-gitlab-shell-secret"
              items:
                - key: "secret"
                  path: ".gitlab_shell_secret"
      
      - name: etc-ssl-certs
        emptyDir:
          medium: "Memory"
      - name: etc-pki-ca-trust-extracted-pem
        emptyDir:
          medium: "Memory"
      

  
  volumeClaimTemplates:
    - metadata:
        name: repo-data
        labels:
          app: gitaly
          release: gitlab
        annotations:
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "50Gi"
        selector:
---
# Source: gitlab/charts/postgresql/templates/primary/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: gitlab-postgresql
  namespace: "{{ .Release.Namespace }}"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-12.5.2
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: primary
spec:
  replicas: 1
  serviceName: gitlab-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: gitlab
      app.kubernetes.io/component: primary
  template:
    metadata:
      name: gitlab-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-12.5.2
        app.kubernetes.io/instance: gitlab
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: primary
      annotations:
        postgresql.gitlab/init-revision: "1"
    spec:
      serviceAccountName: default
      
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: postgresql
                    app.kubernetes.io/instance: gitlab
                    app.kubernetes.io/component: primary
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: docker.io/aboveos/bitnami-postgresql:14.8.0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            # Authentication
            - name: POSTGRES_USER
              value: "gitlab"
            - name: POSTGRES_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "gitlab-postgresql-password"
                  key: postgresql-postgres-password
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: "gitlab-postgresql-password"
                  key: "postgresql-password"
            - name: POSTGRES_DB
              value: "gitlabhq_production"
            # Replication
            # Initdb
            # Standby
            # LDAP
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            # TLS
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            # Audit
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            # Others
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "gitlab" -d "dbname=gitlabhq_production" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                
                - |
                  exec pg_isready -U "gitlab" -d "dbname=gitlabhq_production" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: custom-init-scripts
              mountPath: /docker-entrypoint-initdb.d/
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
            - mountPath: /docker-entrypoint-preinitdb.d/init_revision.sh
              name: custom-init-scripts
              subPath: init_revision.sh
        - name: metrics
          image: docker.io/aboveos/bitnami-postgres-exporter:0.12.0-debian-11-r86
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
          env:
            - name: DATA_SOURCE_URI
              value: 127.0.0.1:5432/gitlabhq_production?sslmode=disable
            - name: DATA_SOURCE_PASS
              valueFrom:
                secretKeyRef:
                  name: "gitlab-postgresql-password"
                  key: "postgresql-password"
            - name: DATA_SOURCE_USER
              value: "gitlab"
          ports:
            - name: http-metrics
              containerPort: 9187
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /
              port: http-metrics
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            httpGet:
              path: /
              port: http-metrics
          volumeMounts:
          resources:
            requests:
              cpu: 100m
              memory: 50Mi
            limits:
              cpu: 500m
              memory: 256Mi
      volumes:
        - name: custom-init-scripts
          configMap:
            name: gitlab-postgresql-init-db
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: gitlab/charts/redis/templates/master/application.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: gitlab-redis-master
  namespace: "{{ .Release.Namespace }}"
  labels:
    app.kubernetes.io/name: redis
    helm.sh/chart: redis-16.13.2
    app.kubernetes.io/instance: gitlab
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: gitlab
      app.kubernetes.io/component: master
  serviceName: gitlab-redis-headless
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        helm.sh/chart: redis-16.13.2
        app.kubernetes.io/instance: gitlab
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: master
      annotations:
        checksum/configmap: 52220e5b76b1fa39c901bf03cc89213b7a7b9b331caf67f5c3391e2f7fe78f6f
        checksum/health: 35729c102511f2a42c3684a696ee17e7da7787c30ef29a894633f053ef764d52
        checksum/scripts: 28d8d71a18985dfbf8c4f845a46f3d971dc1f19df435c5e35bdee69112d3f3da
        checksum/secret: e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855
        prometheus.io/port: "9121"
        prometheus.io/scrape: "true"
    spec:
      
      securityContext:
        fsGroup: 1001
      serviceAccountName: gitlab-redis
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: redis
                    app.kubernetes.io/instance: gitlab
                    app.kubernetes.io/component: master
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      terminationGracePeriodSeconds: 30
      containers:
        - name: redis
          image: docker.io/aboveos/bitnami-redis:6.2.7-debian-11-r11
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
          args:
            - -c
            - /opt/bitnami/scripts/start-scripts/start-master.sh
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: REDIS_REPLICATION_MODE
              value: master
            - name: ALLOW_EMPTY_PASSWORD
              value: "no"
            - name: REDIS_PASSWORD_FILE
              value: "/opt/bitnami/redis/secrets/redis-password"
            - name: REDIS_TLS_ENABLED
              value: "no"
            - name: REDIS_PORT
              value: "6379"
          ports:
            - name: redis
              containerPort: 6379
          livenessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            # One second longer than command timeout should prevent generation of zombie processes.
            timeoutSeconds: 6
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_liveness_local.sh 5
          readinessProbe:
            initialDelaySeconds: 20
            periodSeconds: 5
            timeoutSeconds: 2
            successThreshold: 1
            failureThreshold: 5
            exec:
              command:
                - sh
                - -c
                - /health/ping_readiness_local.sh 1
          resources:
            requests:
              cpu: 100m
              memory: 50Mi
            limits:
              cpu: 500m
              memory: 256Mi
          volumeMounts:
            - name: start-scripts
              mountPath: /opt/bitnami/scripts/start-scripts
            - name: health
              mountPath: /health
            - name: redis-password
              mountPath: /opt/bitnami/redis/secrets/
            - name: redis-data
              mountPath: /data
              subPath: 
            - name: config
              mountPath: /opt/bitnami/redis/mounted-etc
            - name: redis-tmp-conf
              mountPath: /opt/bitnami/redis/etc/
            - name: tmp
              mountPath: /tmp
        - name: metrics
          image: docker.io/aboveos/bitnami-redis-exporter:1.43.0-debian-11-r4
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1001
          command:
            - /bin/bash
            - -c
            - |
              if [[ -f '/secrets/redis-password' ]]; then
              export REDIS_PASSWORD=$(cat /secrets/redis-password)
              fi
              redis_exporter
          env:
            - name: REDIS_ALIAS
              value: gitlab-redis
            - name: REDIS_USER
              value: default
          ports:
            - name: metrics
              containerPort: 9121
          resources:
            requests:
              cpu: 100m
              memory: 50Mi
            limits:
              cpu: 500m
              memory: 256Mi
          volumeMounts:
            - name: redis-password
              mountPath: /secrets/
      volumes:
        - name: start-scripts
          configMap:
            name: gitlab-redis-scripts
            defaultMode: 0755
        - name: health
          configMap:
            name: gitlab-redis-health
            defaultMode: 0755
        - name: redis-password
          secret:
            secretName: "gitlab-redis-secret"
            items:
            - key: "secret"
              path: redis-password
        - name: config
          configMap:
            name: gitlab-redis-configuration
        - name: redis-tmp-conf
          emptyDir: {}
        - name: tmp
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: redis-data
        labels:
          app.kubernetes.io/name: redis
          app.kubernetes.io/instance: gitlab
          app.kubernetes.io/component: master
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: gitlab/charts/certmanager-issuer/templates/issuer-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: gitlab-issuer-1
  namespace: {{ .Release.Namespace }}
  labels:
    app: certmanager-issuer
    chart: certmanager-issuer-0.1.0
    release: gitlab
    heritage: Helm
    
spec:
  activeDeadlineSeconds: 300
  template:
    metadata:
      labels:
        app: certmanager-issuer
        release: gitlab
    spec:
      
      securityContext:
        runAsUser: 65534
        fsGroup: 65534
      serviceAccountName: gitlab-certmanager-issuer
      restartPolicy: OnFailure      
      
      containers:
        - name: create-issuer
          image: docker.io/aboveos/gitlab-org-build-cng-kubectl:v16.6.0
          command: ['/bin/bash', '/scripts/create-issuer', '/scripts/issuer.yml']          
          volumeMounts:
            - name: scripts
              mountPath: /scripts
          resources:
            requests:
              cpu: 50m
      volumes:
      - name: scripts
        configMap:
          name: gitlab-certmanager-issuer-certmanager
---
# Source: gitlab/charts/gitlab/charts/migrations/templates/job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: gitlab-migrations-1
  namespace: {{ .Release.Namespace }}
  labels:
    app: migrations
    chart: migrations-7.6.0
    release: gitlab
    heritage: Helm
    
spec:
  activeDeadlineSeconds: 3600
  backoffLimit: 6
  template:
    metadata:
      labels:
        app: migrations
        chart: migrations-7.6.0
        release: gitlab
        heritage: Helm
        
        
    spec:
      
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      automountServiceAccountToken: false
      
      initContainers:
        
        - name: certificates
          image: docker.io/aboveos/gitlab-org-build-cng-certificates:v16.6.0    
          env:
          
          
          volumeMounts:
          - name: etc-ssl-certs
            mountPath: /etc/ssl/certs
            readOnly: false
          - name: etc-pki-ca-trust-extracted-pem
            mountPath: /etc/pki/ca-trust/extracted/pem
            readOnly: false
          resources:
            requests:
              cpu: 50m
        - name: configure
          command: ['sh', '/config/configure']
          image: "docker.io/aboveos/gitlab-org-build-cng-gitlab-base:v16.6.0"                    
          env:
          
          
          volumeMounts:
          
          
          
          - name: migrations-config
            mountPath: /config
            readOnly: true
          - name: init-migrations-secrets
            mountPath: /init-config
            readOnly: true
          - name: migrations-secrets
            mountPath: /init-secrets
            readOnly: false
          resources:
            requests:
              cpu: 50m
      restartPolicy: OnFailure      
      containers:
        
        - name: migrations
          image: "docker.io/aboveos/gitlab-org-build-cng-gitlab-toolbox-ce:v16.6.0"
          args:
            - /scripts/wait-for-deps
            - /scripts/db-migrate                    
          securityContext:
            runAsUser: 1000
          env:
            - name: CONFIG_TEMPLATE_DIRECTORY
              value: '/var/opt/gitlab/templates'
            - name: CONFIG_DIRECTORY
              value: '/srv/gitlab/config'
            - name: BYPASS_SCHEMA_VERSION
              value: 'true'
            - name: ENABLE_BOOTSNAP
              value: '1'
            
            
          volumeMounts:
            - name: migrations-config
              mountPath: '/var/opt/gitlab/templates'
            - name: migrations-secrets
              mountPath: '/etc/gitlab'
              readOnly: true
            - name: migrations-secrets
              mountPath: /srv/gitlab/config/secrets.yml
              subPath: rails-secrets/secrets.yml
            - name: migrations-secrets
              mountPath: /srv/gitlab/config/initial_root_password
              subPath: migrations/initial_root_password
            - name: migrations-secrets
              mountPath: /srv/gitlab/config/gitlab_shared_runners_registration_token
              subPath: migrations/gitlab_shared_runners_registration_token
            
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs/
              readOnly: true
            - name: etc-pki-ca-trust-extracted-pem
              mountPath: /etc/pki/ca-trust/extracted/pem
              readOnly: true
          resources:
            requests:
              cpu: 250m
              memory: 200Mi
      volumes:
      
      
      
      - name: migrations-config
        configMap:
          name: gitlab-migrations
      - name: init-migrations-secrets
        projected:
          defaultMode: 0400
          sources:
          
          - secret:
              name: "gitlab-rails-secret"
              items:
                - key: secrets.yml
                  path: rails-secrets/secrets.yml
          - secret:
              name: "gitlab-gitaly-secret"
              items:
                - key: "token"
                  path: gitaly/gitaly_token
          
          
          
          
          - secret:
              name: "gitlab-redis-secret"
              items:
                - key: "secret"
                  path: redis/redis-password
          - secret:
              name: "gitlab-postgresql-password"
              items:
                - key: "postgresql-password"
                  path: postgres/psql-password-ci
          - secret:
              name: "gitlab-postgresql-password"
              items:
                - key: "postgresql-password"
                  path: postgres/psql-password-main
          - secret:
              name: "gitlab-gitlab-initial-root-password"
              items:
                - key: "password"
                  path: migrations/initial_root_password
          - secret:
              name: "gitlab-gitlab-runner-secret"
              items:
                - key: runner-registration-token
                  path: migrations/gitlab_shared_runners_registration_token
      - name: migrations-secrets
        emptyDir:
          medium: "Memory"
      
      - name: etc-ssl-certs
        emptyDir:
          medium: "Memory"
      - name: etc-pki-ca-trust-extracted-pem
        emptyDir:
          medium: "Memory"
---
# Source: gitlab/charts/minio/templates/create-buckets-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: gitlab-minio-create-buckets-1
  namespace: {{ .Release.Namespace }}
  labels:
    app: minio
    chart: minio-0.4.3
    release: gitlab
    heritage: Helm
    
spec:
  activeDeadlineSeconds: 600
  template:
    metadata:
      labels:
        component: create-buckets
        app: minio
        chart: minio-0.4.3
        release: gitlab
        heritage: Helm
        
        

    spec:
      automountServiceAccountToken: false
      restartPolicy: OnFailure
      
      
      volumes:
        - name: minio-configuration
          projected:
            sources:
            - configMap:
                name: gitlab-minio-config-cm
            - secret:
                name: "gitlab-minio-secret"      
      containers:
      - name: minio-mc
        image: docker.io/aboveos/minio-mc:RELEASE.2018-07-13T00-53-22Z        
        command: ["/bin/sh", "/config/initialize"]
        env:
          - name: MINIO_ENDPOINT
            value: gitlab-minio-svc.{{ .Release.Namespace }}.svc
          - name: MINIO_PORT
            value: "9000"
        volumeMounts:
          - name: minio-configuration
            mountPath: /config
        resources:
          requests:
            cpu: 50m
---
# Source: gitlab/charts/nginx-ingress/templates/controller-ingressclass.yaml
# We don't support namespaced ingressClass yet
# So a ClusterRole and a ClusterRoleBinding is required
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  labels:
    app: nginx-ingress
    chart: nginx-ingress-4.0.6
    release: gitlab
    heritage: Helm
    
    component: "controller"
    helm.sh/chart: nginx-ingress-4.0.6
    app.kubernetes.io/version: "1.0.4"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: controller
  name: "gitlab-nginx"
spec:
  controller: k8s.io/ingress-nginx
---
# Source: gitlab/charts/gitlab/charts/kas/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gitlab-kas
  namespace: {{ .Release.Namespace }}
  labels:
    app: kas
    chart: kas-7.6.0
    release: gitlab
    heritage: Helm
    
  annotations:
    k8s.io/ingress-nginx: gitlab-nginx
    kubernetes.io/ingress.class: gitlab-nginx
    kubernetes.io/ingress.provider: "nginx"
    nginx.ingress.kubernetes.io/proxy-buffering: "off"
    nginx.ingress.kubernetes.io/custom-http-errors: ""
    cert-manager.io/issuer: "gitlab-issuer"
    acme.cert-manager.io/http01-edit-in-place: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  # ingressClassName: "gitlab-nginx"
  rules:
    - host: {{ $kasDomain }}
      http:
        paths:
          - path: "/k8s-proxy/"
            pathType: Prefix
            backend:
              service:
                name: gitlab-kas
                port:
                  number: 8154
          - path: "/"
            pathType: Prefix
            backend:
              service:
                name: gitlab-kas
                port:
                  number: 8150
  # tls:
  #   - hosts:
  #     - {{ $kasDomain }}
  #     secretName: gitlab-kas-tls
---
# Source: gitlab/charts/gitlab/charts/webservice/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gitlab-webservice-default
  namespace: {{ .Release.Namespace }}
  labels:
    app: webservice
    chart: webservice-7.6.0
    release: gitlab
    heritage: Helm
    gitlab.com/webservice-name: default
    
  annotations:
    k8s.io/ingress-nginx: gitlab-nginx
    kubernetes.io/ingress.class: gitlab-nginx
    kubernetes.io/ingress.provider: "nginx"
    nginx.ingress.kubernetes.io/proxy-body-size: "512m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "15"
    cert-manager.io/issuer: "gitlab-issuer"
    acme.cert-manager.io/http01-edit-in-place: "true"
    nginx.ingress.kubernetes.io/service-upstream: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  # ingressClassName: "gitlab-nginx"
  rules:
    - host: {{ $gitlabDomain }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                  name: gitlab-webservice-default
                  port:
                    number: 8181
  # tls:
  #   - hosts:
  #     - {{ $gitlabDomain }}
  #     secretName: gitlab-gitlab-tls
---
# Source: gitlab/charts/minio/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gitlab-minio
  namespace: {{ .Release.Namespace }}
  labels:
    app: minio
    chart: minio-0.4.3
    release: gitlab
    heritage: Helm
    
  annotations:
    k8s.io/ingress-nginx: gitlab-nginx
    kubernetes.io/ingress.class: gitlab-nginx
    kubernetes.io/ingress.provider: "nginx"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "900"
    nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
    nginx.ingress.kubernetes.io/proxy-buffering: "off"
    cert-manager.io/issuer: "gitlab-issuer"
    acme.cert-manager.io/http01-edit-in-place: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  # ingressClassName: "gitlab-nginx"
  rules:
    - host: {{ $minioDomain }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                  name: gitlab-minio-svc
                  port:
                    number: 9000
  # tls:
  #   - hosts:
  #     - {{ $minioDomain }}
  #     secretName: gitlab-minio-tls
---
# Source: gitlab/charts/registry/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: gitlab-registry
  namespace: {{ .Release.Namespace }}
  labels:
    app: registry
    chart: registry-0.7.0
    release: gitlab
    heritage: Helm
    
  annotations:
    k8s.io/ingress-nginx: gitlab-nginx
    kubernetes.io/ingress.class: gitlab-nginx
    kubernetes.io/ingress.provider: "nginx"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "900"
    nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
    nginx.ingress.kubernetes.io/proxy-buffering: "off"
    cert-manager.io/issuer: "gitlab-issuer"
    acme.cert-manager.io/http01-edit-in-place: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  # ingressClassName: "gitlab-nginx"
  rules:
    - host: {{ $registryDomain }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: gitlab-registry
                port:
                  number:  5000
  # tls:
  #   - hosts:
  #     - {{ $registryDomain }}
  #     secretName: gitlab-registry-tls
# ---
# # Source: gitlab/charts/certmanager/templates/webhook-mutating-webhook.yaml
# apiVersion: admissionregistration.k8s.io/v1
# kind: MutatingWebhookConfiguration
# metadata:
#   name: gitlab-certmanager-webhook
#   labels:
#     app: webhook
#     app.kubernetes.io/name: webhook
#     app.kubernetes.io/instance: gitlab
#     app.kubernetes.io/component: "webhook"
#     app.kubernetes.io/version: "v1.12.6"
#     app.kubernetes.io/managed-by: Helm
#     helm.sh/chart: certmanager-v1.12.6
#   annotations:
#     cert-manager.io/inject-ca-from-secret: "{{ .Release.Namespace }}/gitlab-certmanager-webhook-ca"
# webhooks:
#   - name: webhook.cert-manager.io
#     rules:
#       - apiGroups:
#           - "cert-manager.io"
#           - "acme.cert-manager.io"
#         apiVersions:
#           - "v1"
#         operations:
#           - CREATE
#           - UPDATE
#         resources:
#           - "*/*"
#     admissionReviewVersions: ["v1"]
#     # This webhook only accepts v1 cert-manager resources.
#     # Equivalent matchPolicy ensures that non-v1 resource requests are sent to
#     # this webhook (after the resources have been converted to v1).
#     matchPolicy: Equivalent
#     timeoutSeconds: 10
#     failurePolicy: Fail
#     # Only include 'sideEffects' field in Kubernetes 1.12+
#     sideEffects: None
#     clientConfig:
#       service:
#         name: gitlab-certmanager-webhook
#         namespace: {{ .Release.Namespace }}
#         path: /mutate
# ---
# # Source: gitlab/charts/certmanager/templates/webhook-validating-webhook.yaml
# apiVersion: admissionregistration.k8s.io/v1
# kind: ValidatingWebhookConfiguration
# metadata:
#   name: gitlab-certmanager-webhook
#   labels:
#     app: webhook
#     app.kubernetes.io/name: webhook
#     app.kubernetes.io/instance: gitlab
#     app.kubernetes.io/component: "webhook"
#     app.kubernetes.io/version: "v1.12.6"
#     app.kubernetes.io/managed-by: Helm
#     helm.sh/chart: certmanager-v1.12.6
#   annotations:
#     cert-manager.io/inject-ca-from-secret: "{{ .Release.Namespace }}/gitlab-certmanager-webhook-ca"
# webhooks:
#   - name: webhook.cert-manager.io
#     namespaceSelector:
#       matchExpressions:
#       - key: "cert-manager.io/disable-validation"
#         operator: "NotIn"
#         values:
#         - "true"
#       - key: "name"
#         operator: "NotIn"
#         values:
#         - {{ .Release.Namespace }}
#     rules:
#       - apiGroups:
#           - "cert-manager.io"
#           - "acme.cert-manager.io"
#         apiVersions:
#           - "v1"
#         operations:
#           - CREATE
#           - UPDATE
#         resources:
#           - "*/*"
#     admissionReviewVersions: ["v1"]
#     # This webhook only accepts v1 cert-manager resources.
#     # Equivalent matchPolicy ensures that non-v1 resource requests are sent to
#     # this webhook (after the resources have been converted to v1).
#     matchPolicy: Equivalent
#     timeoutSeconds: 10
#     failurePolicy: Fail
#     sideEffects: None
#     clientConfig:
#       service:
#         name: gitlab-certmanager-webhook
#         namespace: {{ .Release.Namespace }}
#         path: /validate
