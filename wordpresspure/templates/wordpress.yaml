
# Source: wordpress/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: wordpressentrance
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/instance: wordpress
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: wordpress
    app.kubernetes.io/version: 6.4.2
    helm.sh/chart: wordpress-19.1.0
spec:
  type: LoadBalancer
  externalTrafficPolicy: "Cluster"
  sessionAffinity: None
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: http
    - name: https
      port: 443
      protocol: TCP
      targetPort: https
  selector:
    app.kubernetes.io/instance: wordpress
    app.kubernetes.io/name: wordpress
---
# Source: wordpress/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpresspure
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/instance: wordpress
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: wordpress
    app.kubernetes.io/version: 6.4.2
    helm.sh/chart: wordpress-19.1.0
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: wordpress
      app.kubernetes.io/name: wordpress
  strategy:
    type: Recreate
  replicas: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: wordpress
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: wordpress
        app.kubernetes.io/version: 6.4.2
        helm.sh/chart: wordpress-19.1.0
    spec:
      
      # yamllint disable rule:indentation
      hostAliases:
        - hostnames:
          - status.localhost
          ip: 127.0.0.1
      # yamllint enable rule:indentation
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: wordpress
                    app.kubernetes.io/name: wordpress
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
                - matchExpressions:
                    - key: node-role.kubernetes.io/master
                      operator: Exists
      securityContext:
        fsGroup: 1000
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []

      initContainers:
        - name: init-chmod-data
          image: 'aboveos/busybox:1.34.0'
          command:
            - sh
            - '-c'
            - |
              chown -R 1000:1000 /app-data-root
          resources: {}
          volumeMounts:
            - name:  wordpress-data
              mountPath: /app-data-root
            - name: wordpress-data
              mountPath: /bitnami/wordpress
              subPath: wordpress
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 0

      containers:
        - name: wordpress
          image: aboveos/bitnami-wordpress:6.4.2-debian-11-r14
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -c
            - |
              # Create fix script
              /opt/bitnami/scripts/wordpress/entrypoint.sh /opt/bitnami/scripts/apache/run.sh &
              APACHE_PID=$!
              echo "Waiting for wp-config.php..."
              for i in {1..60}; do
                if [ -f /bitnami/wordpress/wp-config.php ]; then
                  # Debug: Show what Bitnami defined
                  echo "=== Checking Bitnami wp-config.php for WP_HOME/WP_SITEURL ==="
                  grep -n "WP_HOME\|WP_SITEURL" /bitnami/wordpress/wp-config.php || echo "No WP_HOME/WP_SITEURL found"
                  
                  # Remove Bitnami's hardcoded HTTP_HOST - let proxy headers work
                  if grep -q "\$_SERVER\['HTTP_HOST'\] = '127.0.0.1';" /bitnami/wordpress/wp-config.php; then
                    sed -i "/\$_SERVER\['HTTP_HOST'\] = '127.0.0.1';/d" /bitnami/wordpress/wp-config.php
                    echo "Removed Bitnami hardcoded HTTP_HOST - will use proxy Host header"
                  fi
                  
                  # Keep WP_HOME/WP_SITEURL as HTTP to avoid secure cookies
                  echo "Keeping WP_HOME/WP_SITEURL as HTTP to avoid secure cookies"
                  
                  echo "=== After fix, checking WP_HOME/WP_SITEURL again ==="
                  grep -n "WP_HOME\|WP_SITEURL" /bitnami/wordpress/wp-config.php || echo "No WP_HOME/WP_SITEURL found"
                  
                  # Force cookie paths - override Bitnami defaults
                  echo "Forcibly overriding Bitnami cookie path constants..."
                  
                  # Use sed to replace Bitnami's cookie constant definitions (match anywhere in line)
                  sed -i "/define.*COOKIEPATH/d" /bitnami/wordpress/wp-config.php
                  sed -i "/define.*SITECOOKIEPATH/d" /bitnami/wordpress/wp-config.php
                  sed -i "/define.*ADMIN_COOKIE_PATH/d" /bitnami/wordpress/wp-config.php
                  sed -i "/define.*PLUGINS_COOKIE_PATH/d" /bitnami/wordpress/wp-config.php
                  sed -i "/define.*COOKIE_DOMAIN/d" /bitnami/wordpress/wp-config.php
                  
                  # Add our definitions
                  echo "" >> /bitnami/wordpress/wp-config.php
                  echo "// Cookie paths for HTTPS proxy - force all to root" >> /bitnami/wordpress/wp-config.php
                  echo "define('COOKIEPATH', '/');" >> /bitnami/wordpress/wp-config.php
                  echo "define('SITECOOKIEPATH', '/');" >> /bitnami/wordpress/wp-config.php
                  echo "define('ADMIN_COOKIE_PATH', '/');" >> /bitnami/wordpress/wp-config.php
                  echo "define('PLUGINS_COOKIE_PATH', '/');" >> /bitnami/wordpress/wp-config.php
                  echo "define('COOKIE_DOMAIN', false);" >> /bitnami/wordpress/wp-config.php
                  echo "Cookie paths forcibly overridden"
                  
                  # Create MU-plugin to set cookies via JavaScript
                  echo "Creating mu-plugin to set cookies via JavaScript..."
                  mkdir -p /bitnami/wordpress/wp-content/mu-plugins
                  printf '<?php\n' > /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '/**\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf ' * Plugin Name: Fix Login with JS Cookies\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf ' * Description: Set cookies via JavaScript to bypass Envoy\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf ' */\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '// Intercept successful login\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf 'add_action("wp_login", function($user_login, $user) {\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '    // Generate auth cookies but do not set them via setcookie()\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '    $expiration = time() + 14 * DAY_IN_SECONDS;\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '    $expire = $expiration + 12 * HOUR_IN_SECONDS;\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '    \n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '    $auth_cookie = wp_generate_auth_cookie($user->ID, $expire, "secure_auth");\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '    $logged_in_cookie = wp_generate_auth_cookie($user->ID, $expire, "logged_in");\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '    \n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '    // Store in global for use in login_redirect\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '    global $wp_js_cookies;\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '    $wp_js_cookies = array(\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '        SECURE_AUTH_COOKIE => array("value" => $auth_cookie, "expires" => $expire),\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '        LOGGED_IN_COOKIE => array("value" => $logged_in_cookie, "expires" => $expire)\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '    );\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '}, 10, 2);\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '// Clear default auth cookies and return JS-based HTML\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf 'add_filter("login_redirect", function($redirect_to, $requested_redirect_to, $user) {\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '    global $wp_js_cookies;\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '    if (!$user instanceof WP_User || empty($wp_js_cookies)) return $redirect_to;\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '    \n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '    // Clear any cookies WordPress already set\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '    header_remove("Set-Cookie");\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '    \n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '    status_header(200);\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '    nocache_headers();\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '    ?>\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '<!DOCTYPE html>\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '<html><head><meta charset="UTF-8">\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '<title>Setting up your session...</title>\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '<style>body{font-family:sans-serif;text-align:center;padding-top:100px;background:#f0f0f0}</style>\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '</head><body>\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '<h1>Login Successful</h1>\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '<p>Setting up your session...</p>\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '<script>\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '<?php foreach ($wp_js_cookies as $name => $data): ?>\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf 'document.cookie = "<?php echo esc_js($name); ?>=<?php echo esc_js($data["value"]); ?>; path=/; secure; max-age=1252800";\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '<?php endforeach; ?>\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf 'document.cookie = "wordpress_test_cookie=WP Cookie check; path=/; secure";\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf 'setTimeout(function() { window.location.replace("<?php echo esc_js($redirect_to); ?>"); }, 1000);\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '</script>\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '</body></html>\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '<?php\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '    exit;\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  printf '}, 10, 3);\n' >> /bitnami/wordpress/wp-content/mu-plugins/fix-login.php
                  echo "MU-plugin created"
                  
                  break
                fi
                sleep 1
              done
              wait $APACHE_PID
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1000
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: PGID
              value: "1000"
            - name: PUID
              value: "1000"
            - name: BITNAMI_DEBUG
              value: "false"
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: WORDPRESS_SKIP_BOOTSTRAP
              value: "no"
            - name: MARIADB_HOST
              value: {{ .Values.mariadb.host }}
            - name: MARIADB_PORT_NUMBER
              value: "3306"
            - name: WORDPRESS_DATABASE_NAME
              value: {{ .Values.mariadb.databases.wordpress}}
            - name: WORDPRESS_DATABASE_USER
              value: {{ .Values.mariadb.username }}
            - name: WORDPRESS_DATABASE_PASSWORD
              value: {{ .Values.mariadb.password }}
            - name: WORDPRESS_USERNAME
              value: "user"
            - name: WORDPRESS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: wordpress
                  key: wordpress-password
            - name: WORDPRESS_EMAIL
              value: "user@example.com"
            - name: WORDPRESS_FIRST_NAME
              value: "FirstName"
            - name: WORDPRESS_LAST_NAME
              value: "LastName"
            - name: WORDPRESS_HTACCESS_OVERRIDE_NONE
              value: "no"
            - name: WORDPRESS_ENABLE_HTACCESS_PERSISTENCE
              value: "no"
            - name: WORDPRESS_BLOG_NAME
              value: "User's Blog!"
            - name: WORDPRESS_TABLE_PREFIX
              value: "wp_"
            - name: WORDPRESS_SCHEME
              value: "http"
            - name: SITE_DOMAIN
              value: {{ .Values.domain.wordpress | default "" | quote }}
            - name: WORDPRESS_PLUGINS
              value: "none"
            - name: WORDPRESS_OVERRIDE_DATABASE_SETTINGS
              value: "no"
            - name: APACHE_HTTP_PORT_NUMBER
              value: "8080"
            - name: APACHE_HTTPS_PORT_NUMBER
              value: "8443"
          ports:
            - name: http
              containerPort: 8080
            - name: https
              containerPort: 8443
          livenessProbe:
            failureThreshold: 6
            httpGet:
              httpHeaders: []
              path: /wp-admin/install.php
              port: 'http'
              scheme: 'HTTP'
            initialDelaySeconds: 1800
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          readinessProbe:
            failureThreshold: 6
            httpGet:
              httpHeaders: []
              path: /wp-login.php
              port: 'http'
              scheme: 'HTTP'
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits: 
              cpu: 2000m
              memory: 1024Mi
            requests:
              cpu: 300m
              memory: 512Mi
          volumeMounts:
            - mountPath: /bitnami/wordpress
              name: wordpress-data
              subPath: wordpress
      volumes:
        - name: wordpress-data
          hostPath:
            type: DirectoryOrCreate
            path: {{ .Values.userspace.appCache}}/wordpress
