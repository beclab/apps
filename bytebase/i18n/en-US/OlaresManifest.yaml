metadata:
  title: Bytebase
  description: World's most advanced database DevOps and CI/CD for Developer, DBA
    and Platform Engineering teams.
spec:
  fullDescription: |
    Bytebase is an open-source database DevOps tool, it's the GitLab/GitHub for managing databases throughout the application development lifecycle. It offers a web-based collaboration workspace for DBAs, Developers and platform engineers.

    ## HIGHLIGHTS ##
    Different database development tasks
    Multiple database systems
    Unified process
    Single tool

    ## KEY FEATURES ##
    * SQL Review
      Bytebase analyzes SQL changes to enforce rules in compliance with your organization's policy. The enforcement includes naming conventions, anti-SQL pattern detection and etc. Prod and non-prod environments can also enforce different rules respectively.
    * Database CI/CD and Change Automation
      Like code review, Bytebase streamlines the database change process. Within a single workflow, a database change can be reviewed and deployed from the dev environment all the way to the production environment.
    * GitOps (Database-as-Code)
      Bytebase keeps the complete schema change history. It also integrates with VCS systems. Teams can manage the SQL migration scripts in the VCS and trigger schema deployment on code commit.
    * Batch Change and Query
      Bytebase allows you to change a collection of databases in a single workflow. It also allows you to issue a single query against multiple databases.
    * SQL Editor
      A web-based SQL Editor to query and export data. DBAs no longer need to give away sensitive database credentials when developers need to access the data.
    * Dynamic Data Masking
      Bytebase provides multi-level masking policy with workflow to grant unmasked data access.
    * Data Access Control
      Bytebase provides a suite of features to enable organizations to enforce data security policies, avoid data leaks and conform compliance.
    * Data Rollback and Disaster Recovery
      - Statement-level rollback
      - Database-level manual and periodical backup and restore
      - Point-in-time recovery (PITR)
  upgradeDescription: |
    Upgrade app version to 3.11.0

    Notable Changes：
    * Environment rollout policy update
    - Issue Creators and Last Issue Approvers can no longer roll out issues. Manual rollouts now require specifying workspace/project roles or users with the bb.taskRuns.create permission.
    - The force rollout mechanism has been replaced by configurable rollout requirements:
      - Require Issue Approval – ensures issues must be approved before rollout can proceed (default: enabled).
      - Plan Check Enforcement – controls rollout behavior based on plan check results (default: block on errors only).
    
    * Deprecate bb.sql.export permission and roles/projectExporter role.
    
    * Deprecate request.row_limit in the project IAM policy. Use maximum_result_rows in QueryDataPolicy instead.

    * API
    - Standardize CEL attribute naming with prefixes: resource.*, statement.*, request.* (e.g., environment_id → resource.environment_id)
    - Unify risk levels to single RiskLevel enum; changed from integers (100, 200, 300) to strings (LOW, MODERATE, HIGH); CEL expressions migrate from format level == 300 to level == "HIGH"
    - Simplify approval template to singleton with flat role array; replace approval_finding_done/approval_finding_error with approval_status enum
    - Consolidate task types into DATABASE_MIGRATE (with migrate_type: DDL/DML/GHOST) and DATABASE_SDL. Split changelog Type into Type and MigrationType enums. Merged DatabaseSchemaUpdate and DatabaseDataUpdate into DatabaseUpdate.
    
    * Terraform (provider version: 3.11.1)
    - Use RiskLevel enum instead of numeric values for level in bytebase_risk. Example: risk.tf
    - Remove disable_copy_data_policy; moved into query_data_policy as the disable_copy_data field. Example: environment.tf
    - Update structure of the approval_flow setting. Example: approval_flow.tf
    - Remove row_limit from bytebase_iam_policy setting.

    * Remove Format on Save feature from SQL Editor.
    
    Enhancements:
    * Support key-value instance labels.
    * Optimize Schema Editor performance.
    * Add pre-flight validation and circuit breaker to gh-ost workflow.
    * AWS Elasticsearch – Add cross-account support.

    Bug Fixes

    View full release note here: https://github.com/bytebase/bytebase/releases/tag/3.11.0

