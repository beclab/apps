---
apiVersion: v1
kind: Service
metadata:
  name: devbox-svc
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    app: devbox
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 80

---
apiVersion: v1
kind: Service
metadata:
  name: devbox-server
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    app: devbox-server
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8088
      name: http
    - protocol: TCP
      port: 8083
      targetPort: 8083
      name: https

---
kind: Service
apiVersion: v1
metadata:
  name: chartmuseum
  namespace: {{ .Release.Namespace }}
spec:
  ports:
    - name: http
      protocol: TCP
      port: 8080
      targetPort: 8888
  selector:
    app: devbox-server

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: devbox-san-cnf
  namespace: {{ .Release.Namespace }}
data:
  san.cnf: |
    [req]
    distinguished_name = req_distinguished_name
    req_extensions = v3_req
    prompt = no

    [req_distinguished_name]
    countryName = CN
    stateOrProvinceName = Beijing
    localityName = Beijing
    0.organizationName = bytetrade
    commonName = devbox-server.{{ .Release.Namespace }}.svc

    [v3_req]
    basicConstraints = CA:FALSE
    keyUsage = nonRepudiation, digitalSignature, keyEncipherment
    subjectAltName = @bytetrade

    [bytetrade]
    DNS.1 = devbox-server.{{ .Release.Namespace }}.svc

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: devbox-server
  namespace: {{ .Release.Namespace }}
  labels:
    app: devbox-server
    applications.app.bytetrade.io/author: bytetrade.io
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: devbox-server
  template:
    metadata:
      labels:
        app: devbox-server
    spec:
      serviceAccountName: bytetrade-controller
      volumes:
        - name: chart
          hostPath:
            type: DirectoryOrCreate
            path: {{ .Values.userspace.appData}}/devbox/Chart
        - name: data
          hostPath:
            type: DirectoryOrCreate
            path: {{ .Values.userspace.appData }}/devbox/Data
        - name: storage-volume
          hostPath:
            path: {{ .Values.userspace.appData }}/devbox/helm-repo-dev
            type: DirectoryOrCreate
        - name: config-san
          configMap:
            name: devbox-san-cnf
            items:
              - key: san.cnf
                path: san.cnf
        - name: sidecar-configs-devbox
          configMap:
            name: sidecar-configs-devbox
            items:
              - key: envoy.yaml
                path: envoy.yaml
        - name: certs
          emptyDir: {}
      initContainers:
        - name: init-chmod-data
          image: 'docker.io/aboveos/busybox:1.28'
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - '-c'
            - |
              chown -R 1000:1000 /home/coder
              chown -R 65532:65532 /charts
              chown -R 65532:65532 /data
          securityContext:
            runAsUser: 0
          resources: { }
          volumeMounts:
            - name: storage-volume
              mountPath: /home/coder
            - name: chart
              mountPath: /charts
            - name: data
              mountPath: /data
        - name: terminus-sidecar-init
          image: docker.io/aboveos/openservicemesh-init:v1.2.3
          imagePullPolicy: IfNotPresent
          command:
          - /bin/sh
          - -c
          - |
            iptables-restore --noflush <<EOF
            # sidecar interception rules
            *nat
            :PROXY_IN_REDIRECT - [0:0]
            :PROXY_INBOUND - [0:0]
            :PROXY_OUTBOUND - [0:0]
            :PROXY_OUT_REDIRECT - [0:0]

            -A PREROUTING -p tcp -j PROXY_INBOUND
            -A OUTPUT -p tcp -j PROXY_OUTBOUND
            -A PROXY_INBOUND -p tcp --dport 15000 -j RETURN
            -A PROXY_INBOUND -p tcp --dport 8083 -j RETURN
            -A PROXY_INBOUND -p tcp -j PROXY_IN_REDIRECT
            -A PROXY_IN_REDIRECT -p tcp -j REDIRECT --to-port 15003


            -A PROXY_OUTBOUND -p tcp --dport 5432 -j RETURN
            -A PROXY_OUTBOUND -p tcp --dport 6379 -j RETURN
            -A PROXY_OUTBOUND -p tcp --dport 27017 -j RETURN
            -A PROXY_OUTBOUND -p tcp --dport 443 -j RETURN


            -A PROXY_OUTBOUND -d ${POD_IP}/32 -j RETURN

            -A PROXY_OUTBOUND -o lo ! -d 127.0.0.1/32 -m owner --uid-owner 1555 -j PROXY_IN_REDIRECT
            -A PROXY_OUTBOUND -o lo -m owner ! --uid-owner 1555 -j RETURN
            -A PROXY_OUTBOUND -m owner --uid-owner 1555 -j RETURN
            -A PROXY_OUTBOUND -d 127.0.0.1/32 -j RETURN

            -A PROXY_OUTBOUND -j PROXY_OUT_REDIRECT
            -A PROXY_OUT_REDIRECT -p tcp -j REDIRECT --to-port 15001

            COMMIT
            EOF
          env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          securityContext:
            privileged: true
            capabilities:
              add:
                - NET_ADMIN
            runAsNonRoot: false
            runAsUser: 0

        - name: generate-certs
          image: beclab/openssl:v3
          imagePullPolicy: IfNotPresent
          command: [ "/bin/sh", "-c" ]
          args:
            - |
              openssl genrsa -out /etc/certs/ca.key 2048
              openssl req -new -x509 -days 3650 -key /etc/certs/ca.key -out /etc/certs/ca.crt \
                -subj "/CN=bytetrade CA/O=bytetrade/C=CN"
              openssl req -new -newkey rsa:2048 -nodes \
                -keyout /etc/certs/server.key -out /etc/certs/server.csr \
                -config /etc/san/san.cnf
              openssl x509 -req -days 3650 -in /etc/certs/server.csr \
                -CA /etc/certs/ca.crt -CAkey /etc/certs/ca.key \
                -CAcreateserial -out /etc/certs/server.crt \
                -extensions v3_req -extfile /etc/san/san.cnf
              chown -R 65532 /etc/certs/*
          volumeMounts:
            - name: config-san
              mountPath: /etc/san
            - name: certs
              mountPath: /etc/certs

      containers:
        - name: devbox
          image: beclab/devbox-server:v0.1.29
          imagePullPolicy: IfNotPresent
          args:
          - server
          ports:
            - name: port
              containerPort: 8088
              protocol: TCP
            - name: ssl-port
              containerPort: 8083
              protocol: TCP
          volumeMounts:
            - name: chart
              mountPath: /charts
            - name: data
              mountPath: /data
            - mountPath: /etc/certs
              name: certs
          lifecycle:
            preStop:
              exec:
                command:
                - "/devbox"
                - "clean"
          env:
            - name: BASE_DIR
              value: /charts
            - name: OS_API_KEY
              value: {{ .Values.os.appKey }}
            - name: OS_API_SECRET
              value: {{ .Values.os.appSecret }}
            - name: OS_SYSTEM_SERVER
              value: system-server.user-system-{{ .Values.bfl.username }}
            - name: NAME_SPACE
              value: {{ .Release.Namespace }}
            - name: OWNER
              value: '{{ .Values.bfl.username }}'
          resources:
            requests:
              cpu: "50m"
              memory: 100Mi
            limits:
              cpu: "0.5"
              memory: 1000Mi
        - name: terminus-envoy-sidecar
          image: bytetrade/envoy:v1.25.11.1
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            runAsUser: 1555
          ports:
            - name: proxy-admin
              containerPort: 15000
            - name: proxy-inbound
              containerPort: 15003
            - name: proxy-outbound
              containerPort: 15001
          resources:
            requests:
              cpu: "50m"
              memory: 100Mi
            limits:
              cpu: "0.5"
              memory: 200Mi
          volumeMounts:
            - name: sidecar-configs-devbox
              readOnly: true
              mountPath: /etc/envoy/envoy.yaml
              subPath: envoy.yaml
          command:
            - /usr/local/bin/envoy
            - --log-level
            - debug
            - -c
            - /etc/envoy/envoy.yaml
          env:
            - name: POD_UID
              valueFrom:
                fieldRef:
                  fieldPath: metadata.uid
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: APP_KEY
              value: {{ .Values.os.appKey }}
            - name: APP_SECRET
              value: {{ .Values.os.appSecret }}
        - name: chartmuseum
          image: 'docker.io/aboveos/helm-chartmuseum:v0.15.0'
          args:
            - '--port=8888'
            - '--storage-local-rootdir=/storage'
          ports:
            - name: http
              containerPort: 8888
              protocol: TCP
          env:
            - name: CHART_POST_FORM_FIELD_NAME
              value: chart
            - name: DISABLE_API
              value: 'false'
            - name: LOG_JSON
              value: 'true'
            - name: PROV_POST_FORM_FIELD_NAME
              value: prov
            - name: STORAGE
              value: local
          resources:
            requests:
              cpu: "50m"
              memory: 100Mi
            limits:
              cpu: "0.5"
              memory: 256Mi
          volumeMounts:
            - name: storage-volume
              mountPath: /storage
          livenessProbe:
            httpGet:
              path: /health
              port: http
              scheme: HTTP
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: http
              scheme: HTTP
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: devbox
  namespace: {{ .Release.Namespace }}
  labels:
    app: devbox
    applications.app.bytetrade.io/author: bytetrade.io
spec:
  replicas: 1
  selector:
    matchLabels:
      app: devbox
  template:
    metadata:
      labels:
        app: devbox
    spec:
      volumes:
      - name: terminus-sidecar-config
        configMap:
          name: sidecar-configs
          items:
          - key: envoy.yaml
            path: envoy.yaml
      initContainers:
        - name: terminus-sidecar-init
          image: docker.io/aboveos/openservicemesh-init:v1.2.3
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: true
            capabilities: 
              add:
              - NET_ADMIN
            runAsNonRoot: false
            runAsUser: 0
          command:
          - /bin/sh
          - -c
          - |
            iptables-restore --noflush <<EOF
            # sidecar interception rules
            *nat
            :PROXY_IN_REDIRECT - [0:0]
            :PROXY_INBOUND - [0:0]
            -A PROXY_IN_REDIRECT -p tcp -j REDIRECT --to-port 15003
            -A PROXY_INBOUND -p tcp --dport 15000 -j RETURN
            -A PROXY_INBOUND -p tcp -j PROXY_IN_REDIRECT
            -A PREROUTING -p tcp -j PROXY_INBOUND
            COMMIT
            EOF
          
          env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
      containers:
        - name: devbox
          image: beclab/devbox:v0.1.27
          imagePullPolicy: IfNotPresent
          ports:
            - name: port
              containerPort: 80
              protocol: TCP
          resources:
            requests:
              cpu: "50m"
              memory: 100Mi
            limits:
              cpu: "0.5"
              memory: 256Mi
        - name: terminus-envoy-sidecar
          image: docker.io/aboveos/envoyproxy-envoy-distroless:v1.25.2
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            runAsUser: 1555
          ports:
          - name: proxy-admin
            containerPort: 15000
          - name: proxy-inbound
            containerPort: 15003
          resources:
            requests:
              cpu: "50m"
              memory: 100Mi
            limits:
              cpu: "0.5"
              memory: 200Mi
          volumeMounts:
          - name: terminus-sidecar-config
            readOnly: true
            mountPath: /etc/envoy/envoy.yaml
            subPath: envoy.yaml
          command:
          - /usr/local/bin/envoy
          - --log-level
          - debug
          - -c
          - /etc/envoy/envoy.yaml
          env:
          - name: POD_UID
            valueFrom:
              fieldRef:
                fieldPath: metadata.uid
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
---
apiVersion: v1
data:
  envoy.yaml: |
    admin:
      access_log_path: "/dev/stdout"
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 15000
    static_resources:
      listeners:
        - name: listener_0
          address:
            socket_address:
              address: 0.0.0.0
              port_value: 15003
          listener_filters:
            - name: envoy.filters.listener.original_dst
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.listener.original_dst.v3.OriginalDst
          filter_chains:
            - filters:
                - name: envoy.filters.network.http_connection_manager
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                    stat_prefix: desktop_http
                    upgrade_configs:
                      - upgrade_type: websocket
                      - upgrade_type: tailscale-control-protocol
                    skip_xff_append: false
                    codec_type: AUTO
                    route_config:
                      name: local_route
                      virtual_hosts:
                        - name: service
                          domains: ["*"]
                          routes:
                            - match:
                                prefix: "/"
                              route:
                                cluster: original_dst
                                timeout: 180s
                    http_protocol_options:
                      accept_http_10: true
                    http_filters:
                      - name: envoy.filters.http.router
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
        - name: listener_1
          address:
            socket_address:
              address: 0.0.0.0
              port_value: 15001
          listener_filters:
            - name: envoy.filters.listener.original_dst
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.listener.original_dst.v3.OriginalDst
          filter_chains:
            - filters:
                - name: envoy.filters.network.http_connection_manager
                  typed_config:
                    "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                    stat_prefix: devbox_out_http
                    skip_xff_append: false
                    codec_type: AUTO
                    route_config:
                      name: local_route
                      virtual_hosts:
                        - name: service
                          domains: ["*"]
                          routes:
                            - match:
                                prefix: "/server/intent/send"
                              request_headers_to_add:
                              - header:
                                  key: X-App-Key
                                  value: {{ .Values.os.appKey }}
                              route:
                                cluster: system-server
                                prefix_rewrite: /system-server/v2/legacy_api/api.intent/v2/server/intent/send
                            - match:
                                prefix: "/"
                              route:
                                cluster: original_dst
                                timeout: 180s
                              typed_per_filter_config:
                                envoy.filters.http.lua:
                                  "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.LuaPerRoute
                                  disabled: true

                    http_protocol_options:
                      accept_http_10: true
                    http_filters:
                      - name: envoy.filters.http.lua
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                          inline_code:
                              local sha = require("lib.sha2")
                              function envoy_on_request(request_handle)
                                local app_key = os.getenv("APP_KEY")
                                local app_secret = os.getenv("APP_SECRET")
                                local current_time = os.time()
                                local minute_level_time = current_time - (current_time % 60)
                                local time_string = tostring(minute_level_time)
                                local s = app_key .. app_secret .. time_string
                                request_handle:logInfo("originstring:" .. s)
                                local hash = sha.sha256(s)
                                request_handle:logInfo("Hello World.")
                                request_handle:logInfo(hash)
                                request_handle:headers():add("X-Auth-Signature",hash)
                              end
                      - name: envoy.filters.http.router
                        typed_config:
                          "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router


      clusters:
        - name: original_dst
          connect_timeout: 5000s
          type: ORIGINAL_DST
          lb_policy: CLUSTER_PROVIDED
        - name: system-server
          connect_timeout: 2s
          type: LOGICAL_DNS
          dns_lookup_family: V4_ONLY
          dns_refresh_rate: 600s
          lb_policy: ROUND_ROBIN
          load_assignment:
            cluster_name: system-server
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: system-server.user-system-{{ .Values.bfl.username }}
                          port_value: 80
kind: ConfigMap
metadata:
  name: sidecar-configs-devbox
  namespace: {{ .Release.Namespace }}