{{- $onlyofficeDomainENV := split  ","  .Values.domain.onlyoffice -}}
{{- $onlyofficeDomain := index $onlyofficeDomainENV "_0" -}}

{{- $onlyofficewebDomainENV := split  ","  .Values.domain.onlyofficeweb -}}
{{- $onlyofficewebDomain := index $onlyofficewebDomainENV "_0" -}}


{{- $of_office_secret := (lookup "v1" "Secret" .Release.Namespace "office-secret") -}}
{{- $coauthoring_secret := "" -}}
{{ if $of_office_secret -}}
{{- $coauthoring_secret = (index $of_office_secret "data" "coauthoring-secret") -}}
{{ else -}}
{{- $coauthoring_secret = randAlphaNum 8 | b64enc}}
{{- end -}}

---
apiVersion: v1
kind: Secret
metadata:
  name: office-secret
  namespace: "{{ .Release.Namespace }}"
  labels:
    app.kubernetes.io/name: minio
    helm.sh/chart: minio-11.10.24
    app.kubernetes.io/instance: mastodon
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  coauthoring-secret: "{{ $coauthoring_secret }}"
---
apiVersion: v1
data:
  default.json: |
    {
      "version": "1.9.0",
      "log": {
        "appenders": [
          {
            "type": "console"
          }
        ],
        "replaceConsole": "true",
        "levels": {
          "nodeJS": "Debug"
        }
      },
      "server": {
        "port": 3000,
        "siteUrl": "https://{{ $onlyofficeDomain }}/",
        "wopi": {
          "discovery": "hosting/discovery"
        },
        "commandUrl": "coauthoring/CommandService.ashx",
        "converterUrl": "ConvertService.ashx",
        "apiUrl": "web-apps/apps/api/documents/api.js",
        "preloaderUrl": "web-apps/apps/api/documents/cache-scripts.html",
        "exampleUrl": "https://{{ $onlyofficewebDomain }}",
        "storageFolder": "/home/Documents",
        "storagePath": "/home/Documents",
        "maxFileSize": 1073741824,
        "maxNameLength": 50,
        "mobileRegEx": "android|avantgo|playbook|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od|ad)|iris|kindle|lge |maemo|midp|mmp|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino",
        "token": {
            "enable": true,
            "useforrequest": true,
            "algorithmRequest": "HS256",
            "authorizationHeader": "Authorization",
            "authorizationHeaderPrefix": "Bearer ",
            "secret": "{{ $coauthoring_secret }}",
            "expiresIn": "5m"
        },
        "verify_peer_off": true,
        "languages": {
          "en": "English",
          "ar": "Arabic",
          "hy": "Armenian",
          "az": "Azerbaijani",
          "eu": "Basque",
          "be": "Belarusian",
          "bg": "Bulgarian",
          "ca": "Catalan",
          "zh": "Chinese (Simplified)",
          "zh-TW": "Chinese (Traditional)",
          "cs": "Czech",
          "da": "Danish",
          "nl": "Dutch",
          "en-GB": "English (United Kingdom)",
          "fi": "Finnish",
          "fr": "French",
          "gl": "Galego",
          "de": "German",
          "el": "Greek",
          "hu": "Hungarian",
          "id": "Indonesian",
          "it": "Italian",
          "ja": "Japanese",
          "ko": "Korean",
          "lo": "Lao",
          "lv": "Latvian",
          "ms": "Malay (Malaysia)",
          "no": "Norwegian",
          "pl": "Polish",
          "pt": "Portuguese (Brazil)",
          "pt-PT": "Portuguese (Portugal)",
          "ro": "Romanian",
          "ru": "Russian",
          "sr-Cyrl-RS": "Serbian (Cyrillic)",
          "sr-Latn-RS": "Serbian (Latin)",
          "si": "Sinhala (Sri Lanka)",
          "sk": "Slovak",
          "sl": "Slovenian",
          "es": "Spanish",
          "sv": "Swedish",
          "tr": "Turkish",
          "uk": "Ukrainian",
          "vi": "Vietnamese",
          "aa-AA": "Test Language"
        }
      },
      "plugins": {
        "pluginsData": []
      }
    }

  local.json: |
    {
      "services": {
        "CoAuthoring": {
          "sql": {
            "type": "postgres",
            "dbHost": "{{ .Values.postgres.host }}",
            "dbPort": "{{ .Values.postgres.port }}",
            "dbName": "{{ .Values.postgres.databases.onlyoffice }}",
            "dbUser": "{{ .Values.postgres.username }}",
            "dbPass": "{{ .Values.postgres.password }}"
          },
          "token": {
            "enable": {
              "request": {
                "inbox": true,
                "outbox": true
              },
              "browser": true
            },
            "inbox": {
              "header": "Authorization",
              "inBody": false
            },
            "outbox": {
              "header": "Authorization",
              "inBody": false
            }
          },
          "secret": {
            "inbox": {
              "string": "{{ $coauthoring_secret }}"
            },
            "outbox": {
              "string": "{{ $coauthoring_secret }}"
            },
            "session": {
              "string": "{{ $coauthoring_secret }}"
            }
          }
        }
      },
      "rabbitmq": {
        "url": "amqp://guest:guest@localhost"
      },
      "storage": {
        "fs": {
          "secretString": "lWjXgZbCCu5HC8gjBmJb"
        }
      }
    }

kind: ConfigMap
metadata:
  name: config
  namespace: {{ .Release.Namespace }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: onlyoffice
  name: onlyoffice
  namespace: '{{ .Release.Namespace }}'
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: onlyoffice
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.network/chrome-default: "true"
        io.kompose.service: onlyoffice
    spec:
      initContainers:
      - image: docker.io/aboveos/onlyoffice-documentserver:latest
        name: 'init-config'
        command:
          - 'sh'
          - '-c'
          - >
            cp local.json /etc/onlyoffice/documentserver/local.json
        volumeMounts:
          - name: config
            mountPath: /local.json
            subPath: local.json
      - name: init-chmod-data
        image: 'docker.io/aboveos/busybox:latest'
        command:
          - sh
          - '-c'
          - |
            chown -R 1000:1000 /home
        resources: {}
        volumeMounts:
          - name: userdata
            mountPath: /home
        securityContext:
          runAsUser: 0
      containers:
      - env:
        - name: PGID
          value: "1000"
        - name: PUID
          value: "1000"
        - name: TZ
          value: Etc/UTC
        - name: DB_TYPE
          value: "postgres"
        - name: DB_PORT
          value: "{{ .Values.postgres.port }}"
        - name: DB_NAME
          value: "{{ .Values.postgres.databases.onlyoffice }}"
        - name: DB_USER
          value: "{{ .Values.postgres.username }}"
        - name: DB_HOST
          value: "{{ .Values.postgres.host }}"
        - name: DB_PWD
          value: "{{ .Values.postgres.password }}"
        - name: REDIS_SERVER_PORT
          value: "{{ .Values.redis.port }}"
        - name: REDIS_SERVER_HOST
          value: "{{ .Values.redis.host }}"
        - name: REDIS_SERVER_PASS
          value: "{{ .Values.redis.password }}"
        - name: WOPI_ENABLED
          value: "true"
        - name: JWT_ENABLED
          value: "true"
        - name: JWT_SECRET
          value: "{{ $coauthoring_secret }}"
        image: docker.io/aboveos/onlyoffice-documentserver:latest
        name: onlyoffice
        ports:
        - containerPort: 80
        resources:
          limits:
            cpu: 2.5
            memory: 8Gi
          requests:
            cpu: 1
            memory: 1.5Gi
        volumeMounts:
        - mountPath: /var/log/onlyoffice
          name: logs
        - mountPath: /var/www/onlyoffice/Data
          name: data
        - mountPath: /var/lib/onlyoffice
          name: lib
        - mountPath: /home
          name: userdata
      restartPolicy: Always
      volumes:
      - hostPath:
          path: '{{ .Values.userspace.appData }}/onlyoffice/logs'
          type: DirectoryOrCreate
        name: logs
      - hostPath:
          path: '{{ .Values.userspace.appData }}/onlyoffice/data'
          type: DirectoryOrCreate
        name: data
      - hostPath:
          path: '{{ .Values.userspace.appData }}/onlyoffice/lib'
          type: DirectoryOrCreate
        name: lib
      - hostPath:
          path: '{{ .Values.userspace.userData }}'
          type: DirectoryOrCreate
        name: userdata
      - name: config
        configMap:
          name: config
          defaultMode: 438
          items:
          - key: local.json
            path: local.json
status: {}

---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: onlyoffice
  name: onlyoffice
  namespace: '{{ .Release.Namespace }}'
spec:
  ports:
  - name: "80"
    port: 80
    targetPort: 80
  selector:
    io.kompose.service: onlyoffice
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: onlyofficeweb
  name: onlyofficeweb
  namespace: '{{ .Release.Namespace }}'
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: onlyofficeweb
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.network/chrome-default: "true"
        io.kompose.service: onlyofficeweb
    spec:
      initContainers:
      - name: init-chmod-data
        image: 'docker.io/aboveos/busybox:latest'
        command:
          - sh
          - '-c'
          - |
            chown -R 1000:1000 /home
        resources: {}
        volumeMounts:
          - name: userdata
            mountPath: /home
        securityContext:
          runAsUser: 0
      containers:
      - image: docker.io/aboveos/kldtks-onlyoffice-example-node:v1.6.1
        name: web
        command:
          - 'sh'
          - '-c'
          - >
            cp /default.json /src/config/default.json; npm run start
        ports:
        - containerPort: 3000
        resources:
          limits:
            cpu: 1
            memory: 1Gi
          requests:
            cpu: 0.1
            memory: 0.1Gi
        volumeMounts:
        - mountPath: /home
          name: userdata
        - name: config
          mountPath: /default.json
          subPath: default.json
      restartPolicy: Always
      volumes:
      - hostPath:
          path: '{{ .Values.userspace.userData }}'
          type: DirectoryOrCreate
        name: userdata
      - name: config
        configMap:
          name: config
          defaultMode: 438
          items:
          - key: default.json
            path: default.json
status: {}
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: onlyofficeweb
  name: onlyofficeweb
  namespace: '{{ .Release.Namespace }}'
spec:
  ports:
  - name: "3000"
    port: 3000
    targetPort: 3000
  selector:
    io.kompose.service: onlyofficeweb
status:
  loadBalancer: {}