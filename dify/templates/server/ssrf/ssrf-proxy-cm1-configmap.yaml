{{- if and .Values.admin .Values.bfl.username (eq .Values.admin .Values.bfl.username) }}
apiVersion: v1
data:
  docker-entrypoint.sh: |
    #!/bin/bash

    # Modified based on Squid OCI image entrypoint

    echo "[ENTRYPOINT] re-create snakeoil self-signed certificate";
    if [ ! -f /etc/ssl/private/ssl-cert-snakeoil.key ]; then
        /usr/sbin/make-ssl-cert generate-default-snakeoil --force-overwrite > /dev/null 2>&1
    fi;

    # 创建必要的日志和缓存目录

    echo "[ENTRYPOINT] creating necessary directories";
    mkdir -p /var/log/squid;
    mkdir -p /var/cache/squid;
    mkdir -p /var/spool/squid;

    # 设置目录权限

    echo "[ENTRYPOINT] setting directory permissions";
    chown -R proxy:proxy /var/log/squid;
    chown -R proxy:proxy /var/cache/squid;
    chown -R proxy:proxy /var/spool/squid;
    chmod 755 /var/log/squid /var/cache/squid /var/spool/squid;

    # 创建日志文件

    echo "[ENTRYPOINT] setting up log files";
    touch /var/log/squid/access.log;
    touch /var/log/squid/error.log;
    touch /var/log/squid/store.log;
    touch /var/log/squid/cache.log;
    chown proxy:proxy /var/log/squid/access.log;
    chown proxy:proxy /var/log/squid/error.log;
    chown proxy:proxy /var/log/squid/store.log;
    chown proxy:proxy /var/log/squid/cache.log;
    
    # 处理conf.d目录，防止额外配置文件干扰
    
    echo "[ENTRYPOINT] handling conf.d directory";


    if [ -d /etc/squid/conf.d ]; then
        # 备份原始目录
        mv /etc/squid/conf.d /etc/squid/conf.d.bak;
        # 创建新的空目录
        mkdir -p /etc/squid/conf.d
    fi;
    
    # 启动日志监控

    tail -F /var/log/squid/access.log 2>/dev/null &
    tail -F /var/log/squid/error.log 2>/dev/null &
    tail -F /var/log/squid/store.log 2>/dev/null &
    tail -F /var/log/squid/cache.log 2>/dev/null &

    # 生成超简化的配置文件

    echo "[ENTRYPOINT] creating ultra-minimal squid configuration";
    
    # 使用逐行写入而不是here-document

    echo "# 极简配置 - 只有反向代理功能" > /etc/squid/squid.conf;
    echo "http_port 3128" >> /etc/squid/squid.conf;
    echo "" >> /etc/squid/squid.conf;
    echo "acl localnet src all" >> /etc/squid/squid.conf;
    echo "http_access allow localnet" >> /etc/squid/squid.conf;
    echo "" >> /etc/squid/squid.conf;
    echo "cache_mem 64 MB" >> /etc/squid/squid.conf;
    echo "coredump_dir /var/spool/squid" >> /etc/squid/squid.conf;
    echo "" >> /etc/squid/squid.conf;
    echo "# 禁用包含其他配置文件" >> /etc/squid/squid.conf;
    echo "# include /etc/squid/conf.d/*.conf" >> /etc/squid/squid.conf;
    echo "" >> /etc/squid/squid.conf;
    echo "# 反向代理配置" >> /etc/squid/squid.conf;
    echo "http_port 8194 accel defaultsite=sandbox" >> /etc/squid/squid.conf;
    echo "cache_peer sandbox parent 8194 0 no-query name=sandbox originserver" >> /etc/squid/squid.conf;
    echo "" >> /etc/squid/squid.conf;
    echo "# 必须的访问控制" >> /etc/squid/squid.conf;
    echo "acl our_sites dstdomain sandbox" >> /etc/squid/squid.conf;
    echo "http_access allow our_sites" >> /etc/squid/squid.conf;
    echo "http_access deny all" >> /etc/squid/squid.conf;
    
    echo "[ENTRYPOINT] final configuration:";
    cat /etc/squid/squid.conf;
    
    # 确保没有旧的PID文件


    echo "[ENTRYPOINT] cleaning old PID files";
    rm -f /run/squid.pid;
    rm -f /var/run/squid.pid;

    # 初始化缓存目录但带更多调试信息


    echo "[ENTRYPOINT] initializing cache directories";
    /usr/sbin/squid -z -d 1;
    echo "[ENTRYPOINT] initialization completed";
    
    # 再次清理PID文件

    rm -f /run/squid.pid;
    
    # 显示Squid版本信息

    echo "[ENTRYPOINT] Squid version:";
    /usr/sbin/squid -v;
    
    # 使用一次测试运行来验证配置

    echo "[ENTRYPOINT] testing configuration:";
    /usr/sbin/squid -k parse -f /etc/squid/squid.conf;
    
    # 启动Squid并保持前台运行以便容器不会退出

    echo "[ENTRYPOINT] starting squid in foreground mode";
    exec /usr/sbin/squid -f /etc/squid/squid.conf -N -d 1;
kind: ConfigMap
metadata:
  annotations:
    use-subpath: "true"
  labels:
    io.kompose.service: ssrf-proxy
  name: ssrf-proxy-cm1
  namespace: {{ .Release.Namespace }}
{{- end }}